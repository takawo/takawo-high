%!PS-Adobe-3.0 
%%Creator: Adobe Illustrator(R) 8.0
%%AI8_CreatorVersion: 14.0.0
%%For: (C-04) ()
%%Title: (44mm.ai)
%%CreationDate: 6/29/2011 10:53 PM
%%Canvassize: 16383
%%BoundingBox: 0 0 0 0
%%HiResBoundingBox: 0 0 0 0
%%DocumentProcessColors:
%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0
%%+ procset AGM_Gradient 1.0 0
%%+ procset Adobe_ColorImage_AI6 1.3 0
%%+ procset Adobe_Illustrator_AI5 1.3 0
%%+ procset Adobe_pattern_AI5 1.0 0
%%+ procset Adobe_cshow 2.0 8
%%+ procset Adobe_shading_AI8 1.0 0
%AI5_FileFormat 4.0
%AI3_ColorUsage: Color
%AI7_ImageSettings: 0
%%CMYKProcessColor: 1 1 1 1 ([\603\614\603W\603X\603g\603\614\601[\603V\603\607\603\623])
%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) 
%%+ Options: 1 16 0 1 1 1 0 0 0 0 1 1 1 18 0 0 0 0 0 0 0 0 -1 -1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 1 2 3 4
%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 1 0 () 
%AI3_TemplateBox: 77.5 75.5703 77.5 75.5703
%AI3_TileBox: -211.4648 -330.085 364.5352 489.0352
%AI3_DocumentPreview: None
%AI5_ArtSize: 153.0703 153.0703
%AI5_RulerUnits: 1
%AI5_ArtFlags: 0 0 0 1 0 0 1 0 0
%AI5_TargetResolution: 800
%AI5_NumLayers: 3
%AI8_OpenToView: -132 225.7368 3 1265 894 18 0 0 126 155 0 0
%AI5_OpenViewLayers: 237
%%PageOrigin:0 0
%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9
%AI9_Flatten: 1
%AI12_CMSettings: 00.MS
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 26 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			(AI8_CMYK_CustomColor)
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			(AI8_RGB_CustomColor)
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop dup
			(AI8_CMYK_CustomColor) eq
			{
				pop pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				dup (AI8_RGB_CustomColor) eq
				{
					pop pop
					3
					{
						1 exch sub
						3 index mul 
						1 exch sub
						3 1 roll
					} repeat
					4 -1 roll pop
					setrgbcolor
				}
				{
					pop
					4
					{
						4 index mul 4 1 roll
					} repeat
					5 -1 roll pop
					setcmykcolor
				} ifelse
			} ifelse
		}
		def
	} if
	/setAIseparationgray
	{
		false setoverprint
		0 setgray
		/setseparationgray where{
			pop setseparationgray
		}{
			/setcolorspace where{
				pop
				[/Separation (All) /DeviceCMYK {dup dup dup}] setcolorspace
				1 exch sub setcolor
			}{
				setgray
			}ifelse
		}ifelse
	} def
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	1 0 0 0 testCMYKColorThrough
	0 1 0 0 testCMYKColorThrough
	0 0 1 0 testCMYKColorThrough
	0 0 0 1 testCMYKColorThrough
	and and and
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginResource: procset AGM_Gradient_Sep 1.0 0
%%Title: (AGM Gradient Procset)
%%Version: 1.0 0
%%CreationDate: (4/26/96) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /AGM_Gradient_Sep 5 dict dup begin put
/AGM_Gradient_Sep_private 100 dict def
/initialize{
	AGM_Gradient_Sep begin
	AGM_Gradient_Sep_private begin
	_compositeJob{
		initializeSinglePassSeps
	}{
		initializeMultiPassSeps
	}ifelse
	initializeSeps
	AGM_Gradient_private begin
		/_fillSD newSpotDict def
		/_rampSD newSpotDict def
		/_nCustomColorSD nd
 end
	AGM_Gradient_Sep_private 
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
	AGM_Gradient_Sep
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
 end
	
	currentdict readonly pop	
 end
}def
/terminate{
	currentdict AGM_Gradient_Sep eq{
	 end
	}if
}def
AGM_Gradient_Sep_private begin
/initializeSeps{
	/currentoverprint { _of } def
	_noImage not _level2PS not and{
		/linealFill{
			currentoverprint{
				0 0 1 1 rectfill
			}{
				mySave
				8 setImageParms
				_color{
					_nCustomColorSD begin
						cyan magenta yellow black
	
						_spotColor{
							spot1/tintImage spot1/tintValue get 1 exch sub makeByte8 put
							spot2/tintImage spot2/tintValue get 1 exch sub makeByte8 put
						}if
				 end
	
					4{
						makeByte8 4 1 roll
					}repeat
					true 4 _nCustomColorSD ncolorimage
				}{
					_nCustomColorSD/black get 1 exch sub makeByte8 
					_nCustomColorSD bwImage
				}ifelse
				myRestore
			}ifelse
		}def
	}if
	/_whiteBytes 1 makeByte8 pt
	 /knockOut{
		_noImage _level2PS or currentoverprint or{
			gsave
			false setoverprint
			1 setgray 
			0 0 1 1 rectfill
			grestore
		}{
			8 setImageParms _whiteBytes /_image load 5 execImage
		}ifelse
	}def
	/newSpotDict{
		11 dict dup begin
			/nSpots 2 def
			/spot1 7 dict def
			/spot2 7 dict def
	 end
	}def
	/initSpotData
	{
	 begin
			/name nd
			/tintImage nd
			/tintValue nd
			/spot_C nd
			/spot_M nd
			/spot_Y nd
			/spot_K nd
	 end
	}def
	/initSpotDict{
	 begin
			/cyanInk nd
			/magentaInk nd
			/yellowInk nd
			/blackInk nd
			/cyan nd
			/magenta nd
			/yellow nd
			/black nd
			spot1 initSpotData
			spot2 initSpotData
	 end
	}def
	/copySpotDict{
		/_dst xp
	 begin
			cyanInk magentaInk yellowInk blackInk
			cyan magenta yellow black
			spot1 spot2
	 end
		_dst begin
			/spot1 spot1 maxlength dict def
			/spot2 spot2 maxlength dict def
			spot2 copy pop
			spot1 copy pop
			/black xd
			/yellow xd
			/magenta xd
			/cyan xd
			/blackInk xd
			/yellowInk xd
			/magentaInk xd
			/cyanInk xd
	 end
	}def
	/setCustomColor
	{
		1 index /Black eq{
			6 1 roll 5 npop
			1 exch sub
			setgray
		}{
			6 1 roll _ccAry1 astore exch
			dup null eq{
				pop 0
			}if
			setcustomcolor
		}ifelse
	}def
	/setCStop{
		/_colorStyle exch pt
		
		_colorStyle 0 eq{
			0 0 0
			4 -1 roll
			1 exch sub
			_spotColor{
				/_colorStyle 3 pt
				/Black
				1 index
				1 exch sub
			}if
		}if
		_colorStyle 2 eq{
			3 npop
		}if
		_rampSD _fillSD copySpotDict
		
		_colorStyle 4 eq{ 
			pop
			9 2 roll 3 npop 6 -2 roll
		} if
		
		_colorStyle 3 eq _colorStyle 4 eq or{ 	
				
			_fillSD begin
				/_spot1 spot1 pt
				/_spot2 spot2 pt
		 end
			
			exch dup _spot1/name get eq{
				_spot1 _spot2
			}{
				_spot2 _spot1
			}ifelse
		 begin
			 begin
					/name xd
					1 exch sub /tintValue xd
					4{
						tintValue mul 4 1 roll
					}repeat
					_spotColor not{
						/tintValue null def
					}if
			 end
				/tintValue 0 def
		 end
		}if
		_fillSD nsetcustomcolor
	}def
	/renderCMYK{
		spot1/name get null eq
		spot2/name get null eq and
		dup not{
			pop
			spot1 spotConverted
		}if
		dup not{
			pop
			spot2 spotConverted
		}if
	}def
	/currentInk{
		true
		_inRipSep{
			currentcolorspace 0 get
			dup /DeviceGray eq
			1 index /DeviceCMYK eq or{
				pop
				currentcmykcolor add add add 0 eq{
					pop false
				}if
			}{
				/Separation eq{
					currentcolor 0 eq{
						pop false
					}if
				}if
			}ifelse
		}{
			currentgray 1 eq{
				pop false
			}if
		}ifelse
	}def
	/currentInkN{
	
		_nCustomColorSD begin
			/_spot1 spot1 pt
			/_spot2 spot2 pt
			renderCMYK
	 end
		{
			currentInk
		}{
			gsave
			_spot1 begin
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					currentInk
				}{
					false
				}ifelse
		 end
			_spot2 begin
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					currentInk
				}{
					false
				}ifelse
		 end
			grestore
			
			or
		} ifelse
	}def
	/fill_ /fill load def
	/fillOvp{
		currentoverprint{
			_inRipSep{
				currentcolorspace 0 get
				dup /DeviceGray eq
				1 index /DeviceCMYK eq or{
					pop
					currentcmykcolor add add add 0 eq{
						newpath
					}if
				}{
					/Separation eq{
						currentcolor 0 eq{
							newpath
						}if
					}if
				}ifelse
			}{
				currentgray 1 eq{
					newpath
				}if
			}ifelse
		}if
		fill_
	}def
	/fill{
		_nCustomColorSD begin
			/_spot1 spot1 pt
			/_spot2 spot2 pt
			renderCMYK
	 end
		
		{
			fillOvp
		}{
			_spot1 begin
				gsave
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
				}{
					1 setgray
				}ifelse
				fillOvp 
				grestore
		 end
			_spot2 begin
				name null ne{
					gsave
					true setoverprint
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					fillOvp
					grestore
				}if
		 end
			newpath
		}ifelse
	}def
	/expandSpot{
		_spotColor{
			/_len xp
			_rampSD begin
				spot1 begin
					tintImage null ne{
						tintImage _len expandOne /tintImage xd
					}if
			 end
				spot2 begin
					tintImage null ne{
						tintImage _len expandOne /tintImage xd
					}if
			 end
		 end
		}{
			pop
		}ifelse
	}def
	/rampImage{
		currentoverprint{
			rectImage
		}{
			_enabledSmoothShade{
				fillRamp
			}{
				_color{
					_rampSD begin
						/cyanInk _cyanData 0 ne def
						/magentaInk _magentaData 0 ne def
						/yellowInk _yellowData 0 ne def
						/blackInk _blackData 0 ne def
				 end
					
					_nSamples setImageParms
					_nSamples expandSpot
					_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
					true 4 _rampSD ncolorimage
				}{
					_rampSD begin
						/cyanInk false def
						/magentaInk false def
						/yellowInk false def
						/blackInk true def
				 end
					_nSamples setImageParms 
					_blackData _rampSD bwImage
				}ifelse
			}ifelse
		}ifelse
	}def
	/nsetcustomcolor where{
		pop
	}{
		/nsetcustomcolor
		{
			/_nCustomColorSD xp
			_nCustomColorSD begin
				4 copy
				/black xd
				/yellow xd
				/magenta xd
				/cyan xd
				4 copy
				0 ne /blackInk xd
				0 ne /yellowInk xd
				0 ne /magentaInk xd
				0 ne /cyanInk xd
		 end
			setcmykcolor
		}def
	}ifelse
	/nsetcustomcolorend where{
		pop
	}{
		/nsetcustomcolorend
		{
			/_nCustomColorSD null pt
		}def
	}ifelse
}def
/initializeSinglePassSeps{
	/_decodeNorm	[0 1] pt
	/_decodeInvert 	[1 0] pt
	/spotConverted
	{
	 begin
			name null eq{
				false
			}{
				tintValue null eq tintImage null eq and{
					true
				}{
					_inDistiller{
						false
					}{
						false
						currentpagedevice/SeparationColorNames get{name eq or}forall
						not
					}ifelse
				}ifelse
			}ifelse
	 end
	}def
	/dictImage
	{
		20 dict dup begin
			/Dict xd
			/Decode xd
			/DataSource xd
			/ImageMatrix xd
			/BitsPerComponent xd
			/Height xd
			/Width xd
			/ImageType 1 def
			Dict
	 end
		/_image load 1 execImage
	}def
	/bwImage{
	 begin
			gsave
			currentoverprint{
				blackInk{
					[/Separation /Black /DeviceGray{}] setcolorspace
					_decodeInvert dictImage
				}{
					5 npop
				}ifelse
			}{
				/DeviceGray setcolorspace
				_decodeNorm dictImage
			}ifelse
			grestore
	 end
	}def
	/ncolorimage where{
		pop
	}{
		/ncolorimage{
		 begin
				renderCMYK{
					cyanInk 
					magentaInk and
					yellowInk and
					blackInk and
					not
					currentoverprint 
					and{	
						pop pop
						gsave
						cyanInk{
							8 copy
							[/Separation /Cyan /DeviceGray{}] setcolorspace
							3 npop
							_decodeNorm dictImage
						}if
						magentaInk{
							8 copy
							[/Separation /Magenta /DeviceGray{}] setcolorspace
							4 -1 roll
							3 npop
							_decodeNorm dictImage
						}if
						yellowInk{
							8 copy
							[/Separation /Yellow /DeviceGray{}] setcolorspace
							4 -2 roll
							3 npop
							_decodeNorm dictImage
						}if
						blackInk{
							4 -3 roll
							[/Separation /Black /DeviceGray{}] setcolorspace
							3 npop
							_decodeNorm dictImage
						}{
							8 npop
						}ifelse
						grestore
					}{
						/_colorimage load 10 execImage
					}ifelse
				}{
					6 npop
					gsave
					spot1 begin
						name null ne tintImage null ne and{
							[/Separation name /DeviceGray{}] setcolorspace
							4 copy
							tintImage 
							name /Black eq{
								_decodeNorm
							}{
								_decodeInvert
							}ifelse 
							dictImage
						}{
							1 setgray fill
						}ifelse
				 end
					spot2 begin
						true setoverprint
						name null ne tintImage null ne and{
							[/Separation name /DeviceGray{}] setcolorspace
							tintImage 
							name /Black eq{
								_decodeNorm
							}{
								_decodeInvert
							}ifelse 
							dictImage
						}{
							4 npop
							1 setgray fill
						}ifelse
				 end
					grestore
				}ifelse
		 end
		}def
	}ifelse
	/getRampColorSpace{
		
		/_renderCMYK _rampSD begin renderCMYK end pt
		
		_renderCMYK not{
			_rampSD begin
				[/DeviceN 
					[
					spot1 begin
						name null ne tintImage null ne and{
							name
						}if
				 end
					spot2 begin
						name null ne tintImage null ne and{
							name
						}if
				 end
					]
					_inDistiller {
						/DeviceCMYK [
							spot1 begin
								name null ne tintImage null ne and{
									spot_C spot_M spot_Y spot_K 1
								}{
									0 0 0 0 0
								}ifelse
						 end
							spot2 begin
								name null ne tintImage null ne and{
									spot_C spot_M spot_Y spot_K 2
								}{
									0 0 0 0 0
								}ifelse
						 end
							5 1 roll 6 -2 roll add
							dup 1 eq {
								pop
								8 /index cvx 1 /exch cvx /sub cvx
								9 1 /roll cvx
							}{
								2 eq {
									8 /index cvx 1 /exch cvx /sub cvx
									10 1 /roll cvx
								}if
							}ifelse
							4 1 /roll cvx 5 -2 /roll cvx
							8 /index cvx /mul cvx /exch cvx 9 /index cvx /mul cvx /add cvx 7 1 /roll cvx
							3 1 /roll cvx 4 -2 /roll cvx
							7 /index cvx /mul cvx /exch cvx 8 /index cvx /mul cvx /add cvx 6 1 /roll cvx
							2 1 /roll cvx 3 -2 /roll cvx
							6 /index cvx /mul cvx /exch cvx 7 /index cvx /mul cvx /add cvx 5 1 /roll cvx
							5 /index cvx /mul cvx /exch cvx 6 /index cvx /mul cvx /add cvx 4 1 /roll cvx
							6 -2 /roll cvx /pop cvx /pop cvx
						] cvx bind
					}{
						/DeviceCMYK {}
					}ifelse
				] setcolorspace
		 end
			/_nColorSpace currentcolorspace pt
		}if
		
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		_renderCMYK{
			/_C0 [currentcolor] pt
			/_C0_Space currentcolorspace pt
		}{
			/_C0 [
				_nCustomColorSD begin
					spot1 begin 
						name null ne{
							tintValue
						}if
				 end
					spot2 begin 
						name null ne{
							tintValue
						}if
				 end
			 end
			] pt
			/_C0_Space _nColorSpace pt
		}ifelse
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		_renderCMYK{
			/_C1 [currentcolor] pt
			/_C1_Space currentcolorspace pt
		}{
			/_C1 [
				_nCustomColorSD begin
					spot1 begin 
						name null ne{
							tintValue
						}if
				 end
					spot2 begin 
						name null ne{
							tintValue
						}if
				 end
			 end
			] pt
			/_C1_Space _nColorSpace pt
		}ifelse
		
		/_rampColorSpace _C0_Space pt
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
/initializeMultiPassSeps{
	/invertXfer{
		[
		{
			1 exch sub
		}/exec load systemdict /currenttransfer get exec /exec load
		] cvx systemdict /settransfer get exec
	}def
	/ccThrough{
		gsave
		1 setCustomColor
		currentcmykcolor
		grestore
		add add add 0 ne
	}def
	/spotConverted
	{
	 begin
			_isCMYKSep not{
				false
			}{
				name null eq{
					false
				}{
					tintValue null eq tintImage null eq and{
						true
					}{
						spot_C spot_M spot_Y spot_K name ccThrough
					}ifelse
				}ifelse
			}ifelse
	 end
	}def
	/spotChannel
	{
		_isCMYKSep{
			pop false
		}{
			/_spotDict xp
				_spotDict/name get null eq{
					false
				}{
					_spotDict/spot_C get
					_spotDict/spot_M get
					_spotDict/spot_Y get
					_spotDict/spot_K get
					_spotDict/name get
					ccThrough 
				}ifelse
		}ifelse
	}def
	/getChannelData
	{
		_isCMYKSep dup{
			pop renderCMYK
		}if
		{
			_blackPlate{
				4 1 roll 3 npop blackInk
			}{
				_yellowPlate{
					4 2 roll 3 npop yellowInk
				}{
					_magentaPlate{
						4 3 roll 3 npop magentaInk
					}{
						3 npop cyanInk
					}ifelse
				}ifelse
			}ifelse
			{
				true /nonZeroData
			}{
				true /zeroData
			}ifelse
		}{
			4 npop
			spot1/name get null ne 
			spot1 spotChannel and{
				spot1/tintImage get dup null ne{
					false /nonZeroData
				}{
					pop false /noData
				}ifelse
			}{
				spot2/name get null ne 
				spot2 spotChannel and{
					spot2/tintImage get dup null ne{
						false /nonZeroData
					}{
						pop false /noData
					}ifelse
				}{
					false /noData
				}ifelse
			}ifelse
		}ifelse
	}def
	/renderChannelData
	{
		/_tmp xp
		_tmp /nonZeroData ne currentoverprint and{
			pop
			_tmp /zeroData eq{pop}if
			4 npop
		}{
			_tmp /nonZeroData eq{
				{
					invertXfer
				}if
					systemdict/image
				get 5 execImage
			}{
				pop
				_tmp /zeroData eq{pop}if
				4 npop
				knockOut
			}ifelse
		}ifelse
	}def
	/bwImage{
	 begin
			gsave
			dup dup dup
			getChannelData
			exch pop false exch
			renderChannelData
			grestore
	 end
	}def
	/ncolorimage{
	 begin
			pop pop
			gsave
			spot2/name get null ne spot2 spotChannel and{
				true setoverprint
			}if
			getChannelData 
			renderChannelData
			grestore
	 end
	}def
	/getRampColorSpace{
		
		/_renderCMYK _rampSD begin renderCMYK end pt
		
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		
		_renderCMYK{
			/_C0 [currentcolor] pt
			/_C0_Space currentcolorspace pt
		}{
			/_C0 [
				_nCustomColorSD begin
					0
					spot1 begin 
						name null ne
						tintValue null ne and
						spot1 spotChannel and{
							pop tintValue
						}if
				 end
					spot2 begin 
						name null ne
						tintValue null ne and
						spot2 spotChannel and{
							pop tintValue
						}if
				 end
					1 exch sub
			 end
			] pt
			/_C0_Space /DeviceGray pt
		}ifelse
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		
		_renderCMYK{
			/_C1 [currentcolor] pt
			/_C1_Space currentcolorspace pt
		}{
			/_C1 [
				_nCustomColorSD begin
					0
					spot1 begin 
						name null ne
						tintValue null ne and
						spot1 spotChannel and{
							pop tintValue
						}if
				 end
					spot2 begin 
						name null ne
						tintValue null ne and
						spot2 spotChannel and{
							pop tintValue
						}if
				 end
					1 exch sub
			 end
			] pt
			/_C1_Space /DeviceGray pt
		}ifelse
		
		/_rampColorSpace _C0_Space pt
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
end
end
defaultpacking setpacking
%%EndResource
%%BeginResource: procset AGM_Gradient 1.0 0
%%Title: (AGM Gradient Procset)
%%Version: 1.0 0
%%CreationDate: (4/26/96) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /AGM_Gradient 20 dict dup begin put
/AGM_Gradient_private 201 dict def
/initialize
{
	AGM_Gradient begin
	AGM_Gradient_private begin
	initializeVars
	
	/bd systemdict/mark get def
	/ed
		_level2PS 
		{
			(>>)
		}{
			(counttomark 2 idiv dup dict begin {def} repeat pop currentdict end)
		} ifelse
	cvx def
	
	_level2PS{
		initializeLev2
	}{
		initializeLev1
	}ifelse
	
	queryDevice
	
	initializeRectFill
	initializeShading
	initializeOps
	_producingSeps{
		AGM_Gradient_Sep/initialize get exec
	}{
		initializeComposite
	}ifelse
	_illustrator{
		/f{}def
		/F{}def
		/s{}def
		/S{}def
		/b{}def
		/B{}def
	}if
	/image where{
		/image get /_image xd
	}if
	/colorimage where{
		/colorimage get /_colorimage xd
	}if
	AGM_Gradient_private
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
	AGM_Gradient
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
 end
	
	currentdict readonly pop
 end
}def
/initializeAI
{
	pop pop 
	AGM_Gradient/AGM_Gradient_private get /_illustrator true put
	AGM_Gradient/initialize get exec
		AGM_Gradient begin
}def
/unload{
	systemdict/languagelevel known{
		systemdict/languagelevel get 2 ge{
			userdict/AGM_Gradient_Sep 2 copy known{
				undef
			}{
				pop pop
			}ifelse
			userdict/AGM_Gradient 2 copy known{
				undef
			}{
				pop pop
			}ifelse
		}if
	}if
}def
/terminate{
	currentdict AGM_Gradient eq{
	 end
	}if
}def
 
AGM_Gradient_private begin
/initializeVars{
	/_d255 256 array def
	0 1 255{
		_d255 exch dup 255 div put
	}bind for
	/_d255- 256 array def
	0 1 255{
		_d255- exch 1 _d255 2 index get sub put
	}bind for
	/_sSave nd
	/_dUserSpace matrix defaultmatrix def
	/_bUMatrix matrix def
	/_imageMatrix matrix def
	/_saveMatrix matrix def
	/_xm matrix def
	/_ccAry1 5 array def
	/_bbox 4 array pt
	/_level2PS 
		systemdict/languagelevel known dup{
			pop systemdict/languagelevel get 2 ge
		}if
	def
	/_level3PS
		_level2PS systemdict/shfill known and
	def
	currentdict /_illustrator known not{
		/_illustrator false def
	}if
	
}def
/initializeOps
{
	AGM_Gradient begin
	currentdict/Bc known not{
		/Bc{
		
			_renderFlag 2 eq _enabledSmoothShade or{
				6 npop
			}{
				pushBSpace
				_rampIndex 0 eq{
					pop pop
					setCStop
				}if
				linealFill
				popBSpace
			}ifelse
		
		}def
	}if
	
	currentdict/Bg known not{
		/Bg{
			10 npop
			/_gradName xp
			/_renderFlag xp
			/_enabledSmoothShade false pt
		
			_renderFlag 2 ne{
		
				_illustrator{
					_of setoverprint
				}if
		
				/_enabledSmoothShade 
					_level3PS{
						_usingSmoothShade
						_producingSeps not
						currentoverprint not or and
						_noImage not and
					}{
						false
					}ifelse
				pt
				
				_illustrator _eo and _renderFlag 3 eq or{
					eoclip
				}{
					clip
				}ifelse
		
				_gradNames _gradName 2 copy known{
					get
					mark exch aload pop
					/_gradType xp
					1 sub dup /_rampIndex xp
					/_maxRampIndex xp
					mark exch aload pop
					0 0
				}if
				pop pop
				getRampData
			}{
				mark mark
			}ifelse
		}def
	}if
	
	currentdict/Bm known not{
		/Bm{
			_renderFlag 2 ne{
				_gradType 0 eq{
					linealRamp
				}{
					radialGrad
				}ifelse
			}{
				6 npop
			}ifelse
		}def
	}if
	
	currentdict/Bh known not{
		/Bh{
			2 npop
			/_yHi xp
			/_xHi xp
			/_radHilite _xHi 0 ne _yHi 0 ne or pt
		}def
	}if
	
	currentdict/Bn known not{
		/Bn{
			AGM_Gradient_private begin
				dict /_gradNames xp
		 end
		}def
	}if
	
	currentdict/Bd known not{
		/Bd{
			AGM_Gradient begin
			AGM_Gradient_private begin
				/_nColorsBd xp
				/_gradType xp
				/_gradName xp
		}def
	}if
	
	currentdict/BD known not{
		/BD{
				currentdict/_gradNames known not{
					/_gradNames 20 dict def
				}if
				] _nColorsBd _gradType
				]  _gradName exch /_gradNames xput
		 end
		 end
		}def
	}if
	
	currentdict/Bb known not{
		/Bb{
		
			AGM_Gradient/AGM_Gradient_private get /_illustrator get not{
				AGM_Gradient begin
			}if
			AGM_Gradient_private begin
			_producingSeps{
				AGM_Gradient_Sep/AGM_Gradient_Sep_private get begin
			}if
			mySave
		}def
	}if
	
	currentdict/BB known not{
		/BB{
		
			/_tmp xp
			cleartomark cleartomark
		
			_tmp dup
			_renderFlag
		
			myRestore
		
			_producingSeps{
			 end
			}if
		
			_illustrator dup
		 end
			not {
			 end
			}if
		
			{
				2 ne exch 0 gt and{
					2 eq{
						s
					}{
						S
					}ifelse
				}{
					pop newpath
				}ifelse
			}{
				pop newpath
			}ifelse
		
		
		}def
	}if
	
	currentdict/Xm known not{
		/Xm{
			_xm astore pop
		}def
	}if
	
 end
}def
/queryDevice{
	/_inDistiller
		systemdict /currentdistillerparams known
	def
	/_inRipSep
		_level2PS{
			currentpagedevice/Separations 2 copy known{
				get
			}{
				pop pop false
			}ifelse
		}{
			false
		}ifelse
		_inDistiller or
	def
	/_noImage /lv1Fix where{
		pop lv1Fix
	}{
		false
	}ifelse
	def
	/_useShells where{
		/_useShells get /_usingShells xp
	}{
		/_usingShells false def
	}ifelse
	
	/_useSmoothShade where{
		pop
	}{
		/_useSmoothShade false def 
	}ifelse
	/_forceToCMYK where{
		pop
	}{
		/_forceToCMYK false def 
	}ifelse
	/_cyanPlate 1 0 0 0 testCMYKColorThrough def
	/_magentaPlate 0 1 0 0 testCMYKColorThrough def
	/_yellowPlate 0 0 1 0 testCMYKColorThrough def
	/_blackPlate 0 0 0 1 testCMYKColorThrough def
	/_compositeJob
		_cyanPlate _magentaPlate and _yellowPlate and _blackPlate and
	def
	/_isCMYKSep
		_cyanPlate _magentaPlate or _yellowPlate or _blackPlate or
	def
	/_compositeSpotDevice where{
		pop
	}{
		/_compositeSpotDevice _compositeJob not _inRipSep or{
			1
		}{
			0
		}ifelse
		def
	}ifelse
	/_producingSeps _compositeSpotDevice 0 ne def
	/_deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt def
	/_dpiThreshold where{
		pop
	}{
		/_dpiThreshold 600 def
	}ifelse
	/_screenFreqThreshold where{
		pop
	}{
		/_screenFreqThreshold 150 def
	}ifelse
	/_contoneDevice where{
		pop
	}{
		/_contoneDevice false def
	}ifelse
	/_subSampleOK 
		_deviceDPI _dpiThreshold le 
		currentScreenFreq _screenFreqThreshold le and 
		_contoneDevice not and 
	def
}def
/initializeRectFill{
	/rectfill where dup{
		exch pop not _producingSeps or
	}{
		not
	}ifelse
	{
		/rectfill{
			gsave
			newpath
			4 2 roll moveto
			1 index 0 rlineto
			0 1 index rlineto
			1 index neg 0 rlineto
			pop pop
			closepath
			fill
			grestore
		}def
	}if
}def
/initializeLev1{
	/currentScreenFreq{
		currentscreen pop pop
	}def
	/_byte 1 string def
	/colorimage where{
		pop
	}{
		/colorimage{
			pop pop
			/_blackTmp xp
			/_yellowTmp xp
			/_magentaTmp xp
			/_cyanTmp xp
			/_cnt 0 pt
			[
			_byte dup 0
			_cyanTmp 
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .3 /mul cvx
			_magentaTmp
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .59 /mul cvx
			_yellowTmp
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .11 /mul cvx
			_blackTmp 
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx
			/add cvx /add cvx /add cvx 1 /exch cvx /sub cvx
			/dup cvx 0 /lt cvx{
				pop 0
			}/if cvx
			/dup cvx 1 /gt cvx{
				pop 1
			}/if cvx
			255 /mul cvx /cvi cvx
			256 /mod cvx
			/dup cvx 0 /lt cvx{
				pop 0
			}/if cvx
			/put cvx
			/_cnt dup cvx 1 /add cvx /pt cvx
			] cvx
			bind
			/_image load 5 execImage
		}def
	}ifelse
}def
/initializeLev2{
	/level2ScreenFreq{
	 begin
		60
		HalftoneType 1 eq{
			pop Frequency
		}if
		HalftoneType 2 eq{
			pop GrayFrequency
		}if
		HalftoneType 5 eq{
			pop Default level2ScreenFreq
		}if
		 end
	}def
	/currentScreenFreq{
		currenthalftone level2ScreenFreq
	}def
}def
/initializeShading{
	_useSmoothShade _level3PS and{
		/_usingSmoothShade true pt
		initializeLev3_Ops
	}{
		/_usingSmoothShade false pt
	}ifelse
}def
/initializeLev3_Ops
{
	/initShFill{
		/_index _gradType 0 eq {0}{_maxRampIndex 1 sub} ifelse pt
		/_rampFuncsArray _maxRampIndex array pt
		/_boundsArray _maxRampIndex 1 sub array pt
		/_encodeArray _maxRampIndex 2 mul array pt
		/_beginCoord _rampPoint pt
		/_colorSpace null pt
		/_firstFill _rampIndex _maxRampIndex eq pt
		/_lastFill false pt
	}def
	/linealShFill{
		popBSpace
		_xm aload pop pushBSpace
		
		/_size _index 1 add pt
		_size _maxRampIndex lt {
			/_rampFuncsArray _rampFuncsArray 0 _size getinterval pt
			/_boundsArray _boundsArray 0 _size 1 sub getinterval pt
			/_encodeArray _encodeArray 0 _size 2 mul getinterval pt
		}if
		
		bd
			/ShadingType 2
			/ColorSpace _colorSpace
			_rgbInCMYK{
				/Function [
					_cData sampFunc
					_mData sampFunc
					_yData sampFunc
					_kData sampFunc
				]
			}{
				/Function 
					bd
						/FunctionType 3
						/Domain [0 1]
						/Functions _rampFuncsArray
						/Bounds _boundsArray
						/Encode _encodeArray
					ed
			}ifelse
			/Extend [_firstFill _lastFill]
			/Domain [0 1] 
			/Coords [_beginCoord 0 _endCoord 0]
		ed
		shfill
	}def
	
	/radialShFill{
		/_size _maxRampIndex _index sub pt
		_size _maxRampIndex lt {
			/_rampFuncsArray _rampFuncsArray _index _size getinterval pt
			/_boundsArray _boundsArray _index _size 1 sub getinterval pt
			/_encodeArray _encodeArray _index 2 mul _size 2 mul getinterval pt
		}if
		
		/_rampLen _beginCoord _endCoord sub pt
		bd
			/ShadingType 3
			/ColorSpace _colorSpace
			_rgbInCMYK{
				/Function [
					_cData sampFunc
					_mData sampFunc
					_yData sampFunc
					_kData sampFunc
				]
			}{
				/Function 
					bd
						/FunctionType 3
						/Domain [0 1]
						/Functions _rampFuncsArray
						/Bounds _boundsArray
						/Encode _encodeArray
					ed
			}ifelse
			/Extend [_lastFill _firstFill]
			/Domain [0 1] 
			/Coords [_xHi _rampLen mul _yHi _rampLen mul _endCoord 0 0 _beginCoord] 
		ed
		shfill
		
		_radHilite{
			_xHi _rampLen mul _yHi _rampLen mul translate
		}if
	}def
	
	%
	/sampFunc{
		/_tmp exch pt
		bd
			_tmp length 1 eq {
				_tmp 0 get
				/_tmp 2 string pt
				dup _tmp 0 3 -1 roll put
				_tmp 1 3 -1 roll put
			}if
			/FunctionType 0
			/Order 1
			/Size [_tmp length]
			/Domain [0 1]
			/BitsPerSample 8
			/DataSource _tmp
			/Range [0 1]
		ed
	}def
	
	/fillRamp{
	
	
		/_invert _midPoint 0.5 lt pt
		_rampIndex _maxRampIndex eq {
			initShFill
		}if
		
		getRampColorSpace
		
		_colorSpace null eq{
			/_colorSpace _rampColorSpace pt
		}{
			_colorSpace _rampColorSpace ne _rgbInCMYK or{
				/_index _index 1 
				_gradType 0 eq{
					sub pt
					linealShFill
				}{
					add pt
					radialShFill
				}ifelse
				initShFill
				/_colorSpace _rampColorSpace pt
			} if
		}ifelse
		/_endCoord _endPoint pt	
		/_rgbInCMYK false pt
		_producingSeps _forceToCMYK or _rgbRamp and {
			_spotColor{
				_renderCMYK
			}{
				_isCMYKSep
			}ifelse
		}{
			false
		}ifelse
		{
			_compositeJob{
				/_rgbInCMYK true pt
				_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
				dup length string copy /_kData exch pt
				dup length string copy /_yData exch pt
				dup length string copy /_mData exch pt
				dup length string copy /_cData exch pt
			}{
				_rampFuncsArray _index
					_cyanPlate{_cyanData}if
						_magentaPlate{_magentaData}if
						_yellowPlate{_yellowData}if
						_blackPlate{_blackData}if
					_nSamples expandOne
					sampFunc
					dup begin /Decode [1 0] def end
				put
				/_invert false pt
			}ifelse
		}{
			_rampFuncsArray _index
				bd
					/FunctionType 2
					/Domain [0 1]
					/N 0.5 log _invert{1 _midPoint sub}{_midPoint}ifelse log div
					_gradType 0 eq{
						_invert{/C1}{/C0}ifelse _C0
						_invert{/C0}{/C1}ifelse _C1
					}{
						_invert{/C0}{/C1}ifelse _C1
						_invert{/C1}{/C0}ifelse _C0
					}ifelse
				ed
			put
		}ifelse
		
		_rampIndex 1 ne{
			_boundsArray _index _gradType 1 eq{1 sub}if _endCoord put
		} if
		
		0 1 _invert {exch}if
		_encodeArray _index 2 mul 1 add 3 -1 roll put
		_encodeArray _index 2 mul 3 -1 roll put
		_rampIndex 1 eq {
			/_lastFill true pt
			_gradType 0 eq{
				linealShFill
			}{
				radialShFill
			}ifelse
		}if
		/_index _index 1 
		_gradType 0 eq{
			add pt
		}{
			sub pt
		}ifelse
	}def
}def
/initializeComposite{
	/bwImage{
		pop /_image load 5 execImage 
	}def
	/rampImage{
		_enabledSmoothShade{
			fillRamp
		}{
			_color{
				_nSamples setImageParms
	
				
				_rgbRamp _forceToCMYK not and{
					_redData _greenData _blueData _nSamples 3 expandColor
					true 3 null ncolorimage
				}{
					_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
					true 4 null ncolorimage
				}ifelse
			}{
				_nSamples setImageParms _blackData null bwImage
			}ifelse
		}ifelse
	}def
	/setCStop{
		/_colorStyle exch pt
		_colorStyle 0 eq{
			1 exch sub
			0 0 0
			4 -1 roll
		}if
		
		_colorStyle 2 eq{
			_forceToCMYK{
				3 npop setcmykcolor
			}{
				setrgbcolor 4 npop
			}ifelse
		}if
		
		_colorStyle 3 eq{
			1 exch sub /_tmp xp
			pop
			4{
				_tmp mul 4 1 roll
			}repeat
		}if
		
		_colorStyle 4 eq{
			_forceToCMYK{
				6 npop setcmykcolor
			}{
				3 -1 roll pop pop
				1 exch sub /_tmp xp
				3{
					1 exch sub _tmp mul 1 exch sub 3 1 roll
				}repeat
				setrgbcolor 
				4 npop
			}ifelse
		}if
		_colorStyle 2 ne _colorStyle 4 ne and{
			null nsetcustomcolor
		}if
	}def
	/nsetcustomcolor
	{
		pop setcmykcolor
	}def
	/nsetcustomcolorend
	{
	}def
	/ncolorimage{
		pop 
		/_colorimage load 10 execImage
	}def
	_noImage not _level2PS not and{
		/linealFill{
			8 setImageParms
			_color{
				currentcmykcolor
				4{
					makeByte8 4 1 roll
				}repeat
				true 4 null ncolorimage
			}{
				currentgray makeByte8 null bwImage
			}ifelse
		}def
	}if
	/getRampColorSpace{
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		/_C0 [currentcolor] pt
		/_C0_Space currentcolorspace pt
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		/_C1 [currentcolor] pt
		/_C1_Space currentcolorspace pt
		
		/_rampColorSpace _C0_Space pt
		
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
/npop{
	{pop}repeat
}def
/xd{
	exch def
}def
/nd{
	null def
}def
/pt{
	AGM_Gradient_private 3 1 roll put
}def
/xp{
	exch pt
}def
/xput{
	dup load dup length exch maxlength eq{
		dup dup load dup
		length 2 mul dict copy def
	}if
	load begin
		def
  end
}def
/mySave{
	save /_sSave xp
}def
/myRestore{
	_sSave type /savetype eq{
		_sSave restore
	}if
}def
/gMark{
	counttomark 2 add -1 roll
}def
/execImage{
	/_tmp xp
	{
		exec
	}stopped{
		$error /errorname get /undefinedresult ne{
			stop
		}{
			_tmp npop
		}ifelse
	}if
}def
/pushBSpace{
	newpath gsave
	_bUMatrix astore concat 
}def
/popBSpace{
	grestore
}def
/makeByte8{
	/_tmp 0 pt
	255 mul cvi
	8 string 8{
		dup _tmp 3 index put 
		/_tmp _tmp 1 add pt
	}repeat
	exch pop
}def
/setImageParms{
	1 8 2 index 0 0 1 0 0 _imageMatrix astore
}def
/linealFill{
	0 0 1 1 rectfill
}def
/testCMYKColorThrough{
	gsave
	setcmykcolor currentcmykcolor
	grestore
	add add add 0 ne
}def
/expandOne	{
	/_tmp xp
	dup type /stringtype ne{
		_tmp string
		exch
		dup 0 ne{
			255 mul cvi
			0 1 _tmp 1 sub{
				3 copy
				exch put pop
			}for
		}if
		pop
	}if
}def
/expandColor{
	/_channels xp
	/_len xp
	_channels{
		_len expandOne _channels 1 roll
	}repeat
}def
/blendColor{
	
	_color{
		_rgbRamp _producingSeps not and _forceToCMYK not and{
			_redData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_greenData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_blueData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			/setrgbcolor cvx
		}{
			_cyanData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_magentaData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_yellowData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_blackData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
	
			_spotColor{
				_rampSD begin
					/_rampSD cvx /begin cvx
	
					spot1 begin
						tintImage dup type /stringtype eq{
							/_ndx cvx /get cvx _d255- /exch cvx /get cvx
						}{
							dup null ne{
								name type /nametype ne{
									1 exch sub
								}if
							}if
						}ifelse
				 end
					/spot1 cvx /tintValue 3 -1 /roll cvx /put cvx
	
					spot2 begin
						tintImage dup type /stringtype eq{
							/_ndx cvx /get cvx _d255- /exch cvx /get cvx
						}{
							dup null ne{
								name type /nametype ne{
									1 exch sub
								}if
							}if
						}ifelse
				 end
					/spot2 cvx /tintValue 3 -1 /roll cvx /put cvx
					/end cvx
			 end
				/_rampSD cvx
				/nsetcustomcolor cvx
			}{
				/setcmykcolor cvx
			}ifelse
		}ifelse
	}{
		_blackData dup type /stringtype eq{
			/_ndx cvx /get cvx _d255 /exch cvx /get cvx
		}if
		
		_enabledSmoothShade{
			1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx /setcmykcolor cvx
		}{
			 /setgray cvx
		}ifelse
	}ifelse
}def
/useRectImage{
	_subSampleOK _enabledSmoothShade not and{
		{
			mark
			0 1 dtransform atan cvi 90 mod 0 eq
			1 0 dtransform atan cvi 90 mod 0 eq
		} stopped
		{
			cleartomark
			false
		}
		{
			and exch pop
		} ifelse
	}{
		false
	}ifelse
}def
/linealImage{
	_noImage{
		rectImage
	}{
		_producingSeps{
				AGM_Gradient_Sep/AGM_Gradient_Sep_private get
				/rampImage get exec
		}{
			useRectImage{
				rectImage
			}{
				rampImage
			}ifelse
		}ifelse
	}ifelse
}def
/linealRamp{
	pushBSpace
	_ramp{
		linealImage
	}{
		linealFill
	}ifelse
	popBSpace
	/_rampIndex _rampIndex 1 sub pt
	_rampIndex 0 gt{
		getRampData
	}if
}def
/radialGrad{
	/_usingShells currentoverprint _producingSeps and _usingShells or pt
	/_firstShell true pt
	_enabledSmoothShade not{
		currentoverprint _producingSeps and{
			
			newpath
			clippath pathbbox 
			1 add 4 1 roll
			1 add 4 1 roll
			1 sub 4 1 roll
			1 sub 4 1 roll
			_bbox astore pop
			
			newpath
			_bbox 0 get _bbox 1 get moveto
			_bbox 2 get _bbox 1 get lineto
			_bbox 2 get _bbox 3 get lineto
			_bbox 0 get _bbox 3 get lineto
			closepath
			6 copy
			gsave _bUMatrix astore concat
			1 0 moveto 0 0 1 0 360 arc closepath
			eoclip fill
			popBSpace
		}{
			fill
		}ifelse
	}if
	pushBSpace
	
	_radHilite{
		_xHi _yHi _bUMatrix idtransform /_yHi xp /_xHi xp
		_rampPoint 1 lt{
			1 _rampPoint sub dup _xHi mul exch _yHi mul translate
		}if
	}if
	_rampIndex{
		radialRamp
		/_rampIndex _rampIndex 1 sub pt
		_rampIndex 0 gt{
			getRampData
		}if
	}repeat
	
	popBSpace
	
}def
/getNSamples{
	0 exch
	{
		dup type /stringtype eq{
			length exch pop exit
		}if
		pop
	}forall
	dup 0 eq{
		pop 1
	}if
}def
/getRampData{
	/_rampType gMark pt
	/_color _rampType 0 gt pt
	/_ccRGB _rampType 5 eq _rampType 6 eq or pt
	/_rgbRamp _rampType 4 eq _ccRGB or pt
	/_ccProcess _rampType 2 eq _rampType 3 eq or pt
	_producingSeps{
		_rampSD initSpotDict
		/_spotColor _ccProcess _ccRGB or pt
	}{
		/_spotColor false pt
	}ifelse
	/_ramp true pt
	100 div /_rampPoint xp
	100 div /_midPoint xp
	
	dup /_colorStyle xp
	_colorStyle 0 eq{ 
		2
	}{
		_colorStyle 1 eq{ 
			5
		}{
			_colorStyle 2 eq{
				8
			}{
				_colorStyle 3 eq{
					_producingSeps{
						_rampSD /spot1 get begin
							/name 3 index def
							/spot_K 4 index def
							/spot_Y 5 index def
							/spot_M 6 index def
							/spot_C 7 index def
					 end
					}if
					7
				}{
					_producingSeps{
						_rampSD/spot1 get begin
							/name 4 index def
							/spot_K 8 index def
							/spot_Y 9 index def
							/spot_M 10 index def
							/spot_C 11 index def
					 end
					}if
					11
				} ifelse
			}ifelse
		}ifelse
	}ifelse
	/_tmp xp
	_tmp index 100 div /_endPoint xp
	
	_gradType 1 eq{
		_tmp 1 add index 100 div /_midPoint xp
	}if
	
	_producingSeps{
		_tmp 2 add index /_nextColorStyle xp
		_nextColorStyle 3 eq{
			/_tmp _tmp 4 add pt
			_tmp index dup
			_rampSD/spot1 get /name get ne{
				_rampSD /spot2 get begin
					/name xd
					/spot_K _tmp 2 add index def
					/spot_Y _tmp 3 add index def
					/spot_M _tmp 4 add index def
					/spot_C _tmp 5 add index def
			 end
			}{
				pop
			}ifelse
		}if
		_nextColorStyle 4 eq{
			/_tmp _tmp 5 add pt
			_tmp index dup
			_rampSD/spot1 get /name get ne{
				_rampSD /spot2 get begin
					/name xd
					/spot_K _tmp 5 add index def
					/spot_Y _tmp 6 add index def
					/spot_M _tmp 7 add index def
					/spot_C _tmp 8 add index def
			 end
			}{
				pop
			}ifelse
		}if
	}if
	_rampType 3 eq _rampType 6 eq or{
		/_tint2Data gMark pt
	}if
	_ccProcess _ccRGB or{
		/_tint1Data gMark pt
	}if
	_rgbRamp{
		/_blueData gMark pt
		/_greenData gMark pt
		/_redData gMark pt
	}if
	
	_producingSeps{
		_ccProcess _ccRGB or{
			_rampType 3 eq _rampType 6 eq or{
				_rampSD /spot2 get begin
					/tintImage _gradType 0 eq{
						_tint2Data
					}{
						_tint1Data
					}ifelse
					def
					name null eq{
						/name /Black def
					}if
			 end
			}if
			_rampSD /spot1 get begin
				/tintImage _gradType 0 eq _rampType 2 eq or _rampType 5 eq or{
					_tint1Data
				}{
					_tint2Data
				}ifelse
				def
				_rampType 2 eq _rampType 5 eq or{
					name null eq{
						/name _rampSD/spot2 get /name get def
						/spot_C _rampSD/spot2 get /spot_C get def
						/spot_M _rampSD/spot2 get /spot_M get def
						/spot_Y _rampSD/spot2 get /spot_Y get def
						/spot_K _rampSD/spot2 get /spot_K get def
						_rampSD/spot2 get /name null put
					}if
				}{
					name null eq{
						/name /Black def
					}if
				}ifelse
		 end
		}if
	}if
	/_blackData gMark pt
	_rampType 0 gt{
		counttomark 4 add -3 roll
		/_yellowData xp
		/_magentaData xp
		/_cyanData xp
	}if
	_ramp{
		/_nSamples
			[
			_rampType 0 eq {_blackData}if
			_rampType 1 eq {_cyanData _magentaData _yellowData _blackData}if
			_rampType 2 eq {_cyanData _magentaData _yellowData _blackData _tint1Data}if
			_rampType 3 eq {_cyanData _magentaData _yellowData _blackData _tint1Data _tint2Data}if
			_rampType 4 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData}if
			_rampType 5 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data}if
			_rampType 6 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data _tint2Data}if
			] getNSamples pt
		_enabledSmoothShade not {/_ramp _nSamples 1 gt pt} if
	} if
	
	setCStop
}def
/rectImage{
	gsave
	/_sInc 1 pt
	/_bInc 1 _nSamples div pt
	/_nSubSamples _nSamples pt
	/_optimize false pt
		
	_subSampleOK{
		/_uRampLen 1 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt pt
		/_pChange _uRampLen 0 eq{0}{_nSamples _uRampLen div}ifelse pt
		
		_pChange .5 gt dup /_optimize xp{
			/_nSubSamples _uRampLen 2 div round cvi dup 1 le{pop 2}if pt
			/_bInc 1 _nSubSamples div pt
			/_sInc _nSamples 1 sub _nSubSamples 1 sub div pt
		}if
	}if
	0
	_nSubSamples
	[
	/dup cvx
	_optimize {
		/round cvx /cvi cvx
	} if
	/_ndx /exch cvx /pt cvx
	blendColor
	0 0 _bInc 1 /rectfill cvx
	_bInc 0 /translate cvx
	_sInc /add cvx
	] cvx
	bind
	repeat
	pop
	_spotColor{
		nsetcustomcolorend
	}if
	grestore
}def
/radialInit{
	/_nRadSamples _nSamples dup 0 eq{pop 1}if pt
	/_sInc -1 pt
	/_rampLen _rampPoint _endPoint sub pt
	/_bInc _rampLen _nSamples div neg pt
	/_optimize false pt
	_subSampleOK{
		/_uRampLen
			_rampLen 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt
			0 _rampLen dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt
			2 copy lt{
				exch
			}if pop
		pt
		/_pChange 
			_uRampLen 0 eq{
				0
			}{
				_nSamples _uRampLen div
			}ifelse
		pt
		_pChange .5 gt dup /_optimize xp{
			/_nRadSamples _uRampLen 2 div round cvi dup 1 le{pop 2}if pt
			/_bInc _rampLen _nRadSamples div neg pt
			/_sInc _nSamples 1 sub _nRadSamples 1 sub div neg pt
		}if
	}if
	_radHilite{
		/_xBCInc _xHi _rampLen mul _nRadSamples div pt
		/_yBCInc _yHi _rampLen mul _nRadSamples div pt
	}if
}def
/radialRamp{
	_enabledSmoothShade{
		fillRamp
	}{
		/_saveMatrix _saveMatrix currentmatrix def
		
		radialInit
	
		%
		%
		true
		_producingSeps _rgbRamp not and{
			_nSamples 1 gt{ 
				pop
				/_ndx 0 pt
				[blendColor] cvx exec
				currentInkN
				/_ndx _nSamples 1 sub pt
				[blendColor] cvx exec
				currentInkN
				or
			}if
		}if
		{
			_rampPoint
		
			_nSamples 1 sub
		
			_nRadSamples 
			[
				/dup cvx
		
				_optimize{
					/round cvx /cvi cvx
				}if
		
				/_ndx /exch cvx /pt cvx
				
				_usingShells{
					/_firstShell cvx{
						/_firstShell false pt
					}{
						0 0 3 index 360 0 arcn fill
					}/ifelse cvx
				}if
		
				blendColor
		
				_usingShells{
					0 0 3 /index cvx 0 360 /arc cvx 
				}{
					0 0 3 /index cvx 0 360 /arc cvx /fill cvx
				}ifelse
		
				/exch cvx _bInc /add cvx /exch cvx
		
				_sInc /add cvx
		
				_radHilite{
					_xBCInc _yBCInc /translate cvx
				}if
			] cvx bind
			repeat
		
			pop pop
		}{
			_usingShells{
				0 0 _rampPoint 360 0 arcn fill
			}if
		}ifelse
	
		_saveMatrix setmatrix
		
		_radHilite{
			_xHi _rampLen mul _yHi _rampLen mul translate
		}if
		
		_usingShells _rampIndex 1 eq and{
			fill
		}if
	
		_spotColor{
			nsetcustomcolorend
		}if
	}ifelse
}def
end
end
defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.3 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 53 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize { 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6 {
		dup type /arraytype eq {
			dup xcheck {
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not {
	/Adobe_ColorImage_AI6_Vars 41 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/plateindex -1 def
	/_newproc null def
	/_proc1 null def
	/_proc2 null def
	/sourcearray 4 array def
	/_ptispace null def
	/_ptiname null def
	/_pti0 0 def
	/_pti1 0 def
	/_ptiproc null def
	/_ptiscale 0 def
	/_pticomps 0 def
	/_ptibuf 0 string def
	/_gtigray 0 def
	/_cticmyk null def
	/_rtirgb null def
	/XIEnable true def
	/XIType 0 def
	/XIEncoding 0 def
	/XICompression 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIRowBytes 0 def
	/XIFile null def
	/XIBuffer1 null def
	/XIBuffer2 null def
	/XIBuffer3 null def
	/XIDataProc null def
	/XIColorSpace /DeviceGray def
	/XIColorValues 0 def
	/XIPlateList false def
end
/ci6colorimage /colorimage where {/colorimage get}{null} ifelse def
/ci6image systemdict /image get def
/ci6curtransfer systemdict /currenttransfer get def
/ci6curoverprint /currentoverprint where {/currentoverprint get}{{_of}} ifelse def
/ci6foureq {
	4 index ne {
		pop pop pop false
	}{
		4 index ne {
			pop pop false
		}{
			4 index ne {
				pop false
			}{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/ci6testplate {
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where {
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 ci6foureq { 
				/plateindex 0 def
			}{
				0 1 0 0 ci6foureq { 
					/plateindex 1 def
				}{
					0 0 1 0 ci6foureq {
						/plateindex 2 def
					}{
						0 0 0 1 ci6foureq { 
							/plateindex 3 def
						}{
							0 0 0 0 ci6foureq {
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/ci6concatprocs {
	/packedarray where {
		pop dup type /packedarraytype eq 2 index type
		/packedarraytype eq or
	}{
		false
	} ifelse
	{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		_proc1 aload pop
		_proc2 aload pop
		_proc1 length
		_proc2 length add
		packedarray cvx
	}{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		/_newproc _proc1 length _proc2 length add array def
		_newproc 0 _proc1 putinterval
		_newproc _proc1 length _proc2 putinterval
		_newproc cvx
	} ifelse
} def
/ci6istint {
	type /arraytype eq 
} def
/ci6isspot {
	dup type /arraytype eq {
		dup length 1 sub get /Separation eq
	}{
		pop false
	} ifelse
} def
/ci6spotname {
	dup ci6isspot {dup length 2 sub get}{pop ()} ifelse
} def
/ci6altspace {
	aload pop pop pop ci6colormake
} def
/ci6numcomps {
	dup /DeviceGray eq {
		pop 1
	}{
		dup /DeviceRGB eq {
			pop 3
		}{
			/DeviceCMYK eq {
				4
			}{
				1
			} ifelse
		} ifelse
	} ifelse
} def
/ci6marksplate {
	dup /DeviceGray eq {
		pop plateindex 3 eq
	}{
		dup /DeviceRGB eq {
			pop plateindex 5 ne
		}{
			dup /DeviceCMYK eq {
				pop plateindex 5 ne
			}{
				dup ci6isspot {
					/findcmykcustomcolor where {
						pop
						dup length 2 sub get
						0.1 0.1 0.1 0.1 5 -1 roll
						findcmykcustomcolor 1 setcustomcolor
						systemdict /currentgray get exec
						1 ne
					}{
						pop plateindex 5 ne
					} ifelse
				}{
					pop plateindex 5 ne
				} ifelse
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colormake {
	dup ci6numcomps
	exch 1 index 2 add 1 roll
	dup 1 eq {pop}{array astore} ifelse
	exch
} def
/ci6colorexpand {
	dup ci6spotname exch
	dup ci6istint {
		ci6altspace
		exch 4 1 roll
	}{
		1 3 1 roll
	} ifelse
} def
/ci6colortint {
	dup /DeviceGray eq {
		3 1 roll 1 exch sub mul 1 exch sub exch
	}{
		dup /DeviceRGB eq {
			3 1 roll {1 exch sub 1 index mul 1 exch sub exch} forall pop 3 array astore exch
		}{
			dup /DeviceCMYK eq {
				3 1 roll {1 index mul exch} forall pop 4 array astore exch
			}{
				3 1 roll mul exch
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colortocmyk {
	dup /DeviceGray eq {
		pop 1 exch sub 0 0 0 4 -1 roll 4 array astore
	}{
		dup /DeviceRGB eq {
			pop aload pop _rgbtocmyk 4 array astore
		}{
			dup /DeviceCMYK eq {
				pop
			}{
				ci6altspace ci6colortint ci6colortocmyk
			} ifelse
		} ifelse
	} ifelse
} def
/ci6makeimagedict {
	7 dict begin
		/ImageType 1 def
		/Decode exch def
		/DataSource exch def
		/ImageMatrix exch def
		/BitsPerComponent exch def
		/Height exch def
		/Width exch def
	currentdict end
} def
/ci6stringinvert {
	0 1 2 index length 1 sub {
		dup 2 index exch get 255 exch sub 2 index 3 1 roll put
	} for
} def
/ci6stringknockout {
	0 1 2 index length 1 sub {
		255 2 index 3 1 roll put
	} for
} def
/ci6stringapply {
	0 1 4 index length 1 sub {
		dup
		4 index exch get
		3 index 3 1 roll
		3 index exec
	} for
	pop exch pop
} def
/ci6walkrgbstring {
	0 3 index
	dup length 1 sub 0 3 3 -1 roll {
		3 getinterval {} forall
		5 index exec
		3 index
	} for
	
	 5 {pop} repeat
} def
/ci6walkcmykstring
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll {
		4 getinterval {} forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/ci6putrgbtograystr
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/ci6putcmyktograystr
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/ci6rgbtograyproc {	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putrgbtograystr load exch
		ci6walkrgbstring
 end
} def
/ci6cmyktograyproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putcmyktograystr load exch
		ci6walkcmykstring
 end
} def
/ci6separatecmykproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		
		XIBuffer3
		
		0 2 index
		
		plateindex 4 2 index length 1 sub {
			get 255 exch sub
			
			3 copy put pop 1 add
			
			2 index
		} for
		pop pop exch pop
 end
} def
	
/ci6compositeimage {
	dup 1 eq {
		pop pop image
	}{
		/ci6colorimage load null ne {
			ci6colorimage
		}{
			3 1 roll pop
			sourcearray 0 3 -1 roll put
			3 eq {/ci6rgbtograyproc}{/ci6cmyktograyproc} ifelse load
			image
		} ifelse
	} ifelse
} def
/ci6knockoutimage {
	gsave
	0 ci6curtransfer exec 1 ci6curtransfer exec
	eq {
		0 ci6curtransfer exec 0.5 lt
	}{
		0 ci6curtransfer exec 1 ci6curtransfer exec gt
	} ifelse
	{{pop 0}}{{pop 1}} ifelse
	systemdict /settransfer get exec
	ci6compositeimage
	grestore
} def
/ci6drawimage {
	ci6testplate -1 eq {
		pop ci6compositeimage
	}{
		dup type /arraytype eq {
			dup length plateindex gt {plateindex get}{pop false} ifelse
		}{
			{
				true
			}{
				dup 1 eq {plateindex 3 eq}{plateindex 3 le} ifelse
			} ifelse
		} ifelse
		{
			dup 1 eq {
				pop pop ci6image
			}{
				dup 3 eq {
					ci6compositeimage
				}{
					pop pop
					sourcearray 0 3 -1 roll put
					/ci6separatecmykproc load
					ci6image
				} ifelse
			} ifelse
		}{
			ci6curoverprint {
				7 {pop} repeat
			}{
				ci6knockoutimage
			} ifelse
		} ifelse
	} ifelse
} def
/ci6proctintimage {
	/_ptispace exch store /_ptiname exch store /_pti1 exch store /_pti0 exch store /_ptiproc exch store
	/_pticomps _ptispace ci6numcomps store
	/_ptiscale _pti1 _pti0 sub store
	level2? {
		_ptiname length 0 gt version cvr 2012 ge and {
			[/Separation _ptiname _ptispace {_ptiproc}] setcolorspace
			[_pti0 _pti1] ci6makeimagedict ci6image
		}{
			[/Indexed _ptispace 255 {255 div _ptiscale mul _pti0 add _ptiproc}] setcolorspace
			[0 255] ci6makeimagedict ci6image
		} ifelse
	}{
		_pticomps 1 eq {
			{
				dup
				{
					255 div _ptiscale mul _pti0 add _ptiproc 255 mul cvi put
				} ci6stringapply
			} ci6concatprocs ci6image
		}{
			{
				dup length _pticomps mul dup _ptibuf length ne {/_ptibuf exch string store}{pop} ifelse
				_ptibuf {
					exch _pticomps mul exch 255 div _ptiscale mul _pti0 add _ptiproc
					_pticomps 2 add -2 roll
					_pticomps 1 sub -1 0 {
						1 index add 2 index exch
						5 -1 roll
						255 mul cvi put
					} for
					pop pop
				} ci6stringapply
			} ci6concatprocs false _pticomps
			/ci6colorimage load null eq {7 {pop} repeat}{ci6colorimage} ifelse
		} ifelse
	} ifelse
} def
/ci6graytintimage {
	/_gtigray 5 -1 roll store
	{1 _gtigray sub mul 1 exch sub} 4 1 roll
	/DeviceGray ci6proctintimage
} def
/ci6cmyktintimage {
	/_cticmyk 5 -1 roll store
	{_cticmyk {1 index mul exch} forall pop} 4 1 roll
	/DeviceCMYK ci6proctintimage
} def
/ci6rgbtintimage {
	/_rtirgb 5 -1 roll store
	{_rtirgb {1 exch sub 1 index mul 1 exch sub exch} forall pop} 4 1 roll
	/DeviceRGB ci6proctintimage
} def
/ci6tintimage {
	ci6testplate -1 eq {
		ci6colorexpand
		3 -1 roll 5 -1 roll {0}{0 exch} ifelse 4 2 roll
		dup /DeviceGray eq {
			pop ci6graytintimage
		}{
			dup /DeviceRGB eq {
				pop ci6rgbtintimage
			}{
				pop ci6cmyktintimage
			} ifelse
		} ifelse
	}{
		dup ci6marksplate {
			plateindex 5 lt {
				ci6colortocmyk plateindex get
				dup 0 eq ci6curoverprint and {
					7 {pop} repeat
				}{
					1 exch sub
					exch {1 0}{0 1} ifelse () ci6graytintimage
				} ifelse
			}{
				pop exch {0}{0 exch} ifelse 0 3 1 roll () ci6graytintimage
			} ifelse
		}{
			ci6curoverprint {
				8 {pop} repeat
			}{
				pop pop pop
				{pop 1} 0 1 () /DeviceGray ci6proctintimage
			} ifelse
		} ifelse
	} ifelse
} def
/XINullImage {
} def
/XIImageMask {
	XIImageWidth XIImageHeight false
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	imagemask
} def
/XIImageTint {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	XIType 3 eq XIColorValues XIColorSpace ci6tintimage
} def
/XIImage {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	false XIChannelCount XIPlateList ci6drawimage
} def
/XG {
	pop pop
} def
/XF {
	13 {pop} repeat
} def
/Xh {
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		/_lp /null ddef
		_fc
		/_lp /imagemask ddef
 end
} def
/XH {
	Adobe_ColorImage_AI6_Vars begin
		grestore
 end
} def
/XIEnable {
	Adobe_ColorImage_AI6_Vars /XIEnable 3 -1 roll put
} def
/XC {
	Adobe_ColorImage_AI6_Vars begin
		ci6colormake
		/XIColorSpace exch def
		/XIColorValues exch def
 end
} def
/XIPlates {
	Adobe_ColorImage_AI6_Vars begin
		/XIPlateList exch def
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		cvi dup
		256 idiv /XICompression exch store
		256 mod /XIEncoding exch store
		pop pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq {
			XIImageWidth 8 div ceiling cvi
		}{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIRowBytes exch def
		XIEnable {
			/XIBuffer3 XIImageWidth string def
			XICompression 0 eq {
				/XIBuffer1 XIRowBytes string def
				XIEncoding 0 eq {
					{currentfile XIBuffer1 readhexstring pop}
				}{
					{currentfile XIBuffer1 readstring pop}
				} ifelse
			}{
				/XIBuffer1 256 string def
				/XIBuffer2 XIRowBytes string def
				{currentfile XIBuffer1 readline pop (%) anchorsearch {pop} if}
				/ASCII85Decode filter /DCTDecode filter
				/XIFile exch def
				{XIFile XIBuffer2 readstring pop}
			} ifelse
			/XIDataProc exch def
			
			XIType 1 ne {
				0 setgray
			} if
			XIType 1 eq {
				XIImageMask
			}{
				XIType 2 eq XIType 3 eq or {
					XIImageTint
				}{
					XIImage
				} ifelse
			} ifelse
		}{
			XINullImage
		} ifelse
		/XIPlateList false def
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.3 0
%%Title: (Adobe Illustrator (R) Version 8.0 Full Prolog)
%%Version: 1.3 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1998 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 112 dict dup begin
put
/_?cmyk false def
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 100 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	/_aicmykps where {pop /_?cmyk _aicmykps def}if
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/_rgbtocmyk
{
	3
	{
		1 exch sub 3 1 roll
	} repeat
	3 copy 1 4 1 roll
	3
	{
		3 index 2 copy gt
		{
			exch
		} if
		pop 4 1 roll
	} repeat
	pop pop pop
	4 1 roll
	3
	{
		3 index sub
		3 1 roll
	} repeat
	4 -1 roll
} def
/setrgbfill
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/setrgbstroke
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_?cmyk {
		3 npop k
	}{
		setrgbfill 4 npop
	} ifelse
} def
/XA
{
	_?cmyk {
		3 npop K
	}{
		setrgbstroke 4 npop
	} ifelse
} def
/Xs
{
	/_gf exch ddef
	5 npop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setAIseparationgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XS
{
	/_gs exch ddef
	5 npop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setAIseparationgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/XK
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		K
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		XA
	} ifelse
} def
/Xk
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		k
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		Xa
	} ifelse
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/Xt {
	pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			endString eq {
				cleartomark stop
			} if
		}ifelse
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			dup beginString eq
			{
				pop /layerCnt dup load 1 add store
			}
			{
				endString eq
				{
					layerCnt 1 eq
					{
						cleartomark stop
					}
					{
						/layerCnt dup load 1 sub store
					} ifelse
				} if
			} ifelse
		}ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	6 npop
	7 2 roll
	5 npop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
/XP
{
	4 npop
} bind def
/XD
{
	pop
} bind def
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_pattern_AI5 1.1 0
%%Title: (Adobe Illustrator (R) Version 5.0 Pattern Operators)
%%Version: 1.1 0
%%CreationDate: (03/26/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 95 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/@
{
} def
/&
{
} def
/dp
{
	dup null eq
	{
		pop
		_dp 0 ne
		{
			0 1 _dp 1 sub _dl mod
			{
				_da exch get 3 get
			} for
			_dp 1 sub _dl mod 1 add packedarray
			_da 0 get aload pop 8 -1 roll 5 -1 roll pop 4 1 roll
			definepattern pop
		} if
	}
	{
		_dp 0 ne _dp _dl mod 0 eq and
		{
			null dp
		} if
		7 packedarray _da exch _dp _dl mod exch put
		_dp _dl mod _da 0 get 4 get 2 packedarray
		/_dp _dp 1 add def
	} ifelse
} def
/E
{
	_ed begin
	dup 0 get type /arraytype ne
	{
		0
		{
			dup 1 add index type /arraytype eq
			{
				1 add
			}
			{
				exit
			} ifelse
		} loop
		array astore
	} if
	/_dd exch def
	/_ury exch def
	/_urx exch def
	/_lly exch def
	/_llx exch def
	/_n exch def
	/_y 0 def
	/_dl 4 def
	/_dp 0 def
	/_da _dl array def
	0 1 _dd length 1 sub
	{
		/_d exch _dd exch get def
		0 2 _d length 2 sub
		{
			/_x exch def
			/_c false def
			/_r _d _x 1 add get cvlit def
			_r _ ne
			{
				_urx _llx sub _ury _lly sub
				[
				1 0 0 1 0 0
				]
				[
				/save cvx
				_llx neg _lly neg /translate cvx
				_c
				{
					nc /begin cvx
				} if
				_r dup type /stringtype eq
				{
					cvx
				}
				{
					{
						exec
					} /forall cvx
				} ifelse
				_c
				{
					/end cvx
				} if
				/restore cvx
				] cvx
				/_fn 12 _n length add string def
				_y _fn cvs pop
				/_y _y 1 add def
				_fn 12 _n putinterval
				_fn _c false dp
				_d exch _x 1 add exch put
			} if
		} for
	} for
	null dp
	_n _dd /_pd
 end
	xput
} def
/fc
{
	_fm dup concatmatrix pop
} def
/p
{
	/_fm exch ddef
	9 -2 roll _pm translate fc
	7 -2 roll _pm scale fc
	5 -1 roll _pm rotate fc
	4 -2 roll exch 0 ne
	{
		dup _pm rotate fc
		1 -1 _pm scale fc
		neg _pm rotate fc
	}
	{
		pop
	} ifelse
	dup _pm rotate fc
	exch dup sin exch cos div 1 0 0 1 0 6 2 roll
	_pm astore fc
	neg _pm rotate fc
	_pd exch get /_fdd exch ddef
	/_pf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					patternfill
				}
				{
					pop
					fill
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		newpath
	} ddef
	/_psf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					9 copy 6 npop patternashow
				}
				{
					pop
					6 copy 3 npop hvashow
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		sw rmoveto
	} ddef
	/_pjsf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					12 copy 6 npop patternawidthshow
				}
				{
					pop 9 copy 3 npop hvawidthshow
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		swj rmoveto
	} ddef
	/_lp /none ddef
} def
/sc
{
	_sm dup concatmatrix pop
} def
/P
{
	/_sm exch ddef
	9 -2 roll _pm translate sc
	7 -2 roll _pm scale sc
	5 -1 roll _pm rotate sc
	4 -2 roll exch 0 ne
	{
		dup _pm rotate sc
		1 -1 _pm scale sc
		neg _pm rotate sc
	}
	{
		pop
	} ifelse
	dup _pm rotate sc
	exch dup sin exch cos div 1 0 0 1 0 6 2 roll
	_pm astore sc
	neg _pm rotate sc
	_pd exch get /_sdd exch ddef
	/_ps
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					patternstroke
				}
				{
					pop stroke
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		newpath
	} ddef
	/_pss
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					10 copy 6 npop patternashowstroke
				}
				{
					pop 7 copy 3 npop ss
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		pop sw rmoveto
	} ddef
	/_pjss
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					13 copy 6 npop patternawidthshowstroke
				}
				{
					pop 10 copy 3 npop jss
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		pop swj rmoveto
	} ddef
	/_lp /none ddef
} def
end
userdict /Adobe_pattern_AI5 18 dict dup begin
put
/initialize
{
	/definepattern where
	{
		pop
		pop pop
	}
	{
	 begin
	 begin
		Adobe_pattern_AI5 begin
		Adobe_pattern_AI5
		{
			dup xcheck
			{
				bind
			} if
			pop pop
		} forall
		mark
		cachestatus 7 1 roll pop pop pop pop exch pop exch
		{
			{
				10000 add
				dup 2 index gt
				{
					exit
				} if
				dup setcachelimit
			} loop
		} stopped
		cleartomark
	 end 	
		
	 end
	 end
		
		Adobe_pattern_AI5 begin
	} ifelse
} def
/terminate
{
	currentdict Adobe_pattern_AI5 eq
	{
	 end
	} if
} def
errordict
/nocurrentpoint
{
	pop
	stop
} put
errordict
/invalidaccess
{
	pop
	stop
} put
/patternencoding
256 array def
0 1 255
{
	patternencoding exch ( ) 2 copy exch 0 exch put cvn put
} for
/definepattern
{
	17 dict begin
	/uniform exch def
	/cache exch def
	/key exch def
	/procarray exch def
	/mtx exch matrix invertmatrix def
	/height exch def
	/width exch def
	/ctm matrix currentmatrix def
	/ptm matrix def
	/str 32 string def
	/slice 9 dict def
	slice /s 1 put
	slice /q 256 procarray length div sqrt floor cvi put
	slice /b 0 put
	/FontBBox
	[
	0 0 0 0
	] def
	/FontMatrix mtx matrix copy def
	/Encoding patternencoding def
	/FontType 3 def
	/BuildChar
	{
		exch
	 begin
		/setstrokeadjust where {pop true setstrokeadjust} if
		slice begin
		dup q dup mul mod s idiv /i exch def
		dup q dup mul mod s mod /j exch def
		q dup mul idiv procarray exch get
		/xl j width s div mul def
		/xg j 1 add width s div mul def
		/yl i height s div mul def
		/yg i 1 add height s div mul def
		uniform
		{
			1 1
		}
		{
			width 0 dtransform
			dup mul exch dup mul add sqrt dup 1 add exch div
			0 height dtransform
			dup mul exch dup mul add sqrt dup 1 add exch div
		} ifelse
		width 0 cache
		{
			xl 4 index mul yl 4 index mul xg 6 index mul yg 6 index mul
			setcachedevice
		}
		{
			setcharwidth
		} ifelse
		gsave
		scale
		newpath
		xl yl moveto
		xg yl lineto
		xg yg lineto
		xl yg lineto
		closepath
		clip
		newpath
	 end
	 end
		exec
		grestore
	} def
	key currentdict definefont
 end
} def
/patterncachesize
{
	gsave
	newpath
	0 0 moveto
	width 0 lineto
	width height lineto
	0 height lineto
	closepath
	patternmatrix setmatrix
	pathbbox
	exch ceiling 4 -1 roll floor sub 3 1 roll
	ceiling exch floor sub
	mul 1 add
	grestore
} def
/patterncachelimit
{
	cachestatus 7 1 roll 6 npop 8 mul
} def
/patternpath
{
	exch dup begin
	setfont
	ctm setmatrix
	concat
	slice exch /b exch slice /q get dup mul mul put
	FontMatrix concat
	uniform
	{
		width 0 dtransform round width div exch round width div exch
		0 height dtransform round height div exch height div exch
		0 0 transform round exch round exch
		ptm astore setmatrix
	}
	{
		ptm currentmatrix pop
	} ifelse
	{
		currentpoint
	} stopped not
	{
		2 npop
		pathbbox
		true
		4 index 3 index eq
		4 index 3 index eq
		and
		{
			pop false
			{
				{
					2 npop
				}
				{
					3 npop true
				}
				{
					7 npop true
				}
				{
					pop true
				} pathforall
			} stopped
			{
				5 npop true
			} if
		} if
		{
			height div ceiling height mul 4 1 roll
			width div ceiling width mul 4 1 roll
			height div floor height mul 4 1 roll
			width div floor width mul 4 1 roll
			2 index sub height div ceiling cvi exch
			3 index sub width div ceiling cvi exch
			4 2 roll moveto
			FontMatrix mtx invertmatrix
			dup dup 4 get exch 5 get rmoveto
			ptm ptm concatmatrix pop
			slice /s
			patterncachesize patterncachelimit div ceiling sqrt ceiling cvi
			dup slice /q get gt
			{
				pop slice /q get
			} if
			put
			0 1 slice /s get dup mul 1 sub
			{
				slice /b get add
				gsave
				0 1 str length 1 sub
				{
					str exch 2 index put
				} for
				pop
				dup
				{
					gsave
					ptm setmatrix
					1 index str length idiv
					{
						str show
					} repeat
					1 index str length mod str exch 0 exch getinterval show
					grestore
					0 height rmoveto
				} repeat
				grestore
			} for
			2 npop
		}
		{
			4 npop
		} ifelse
	} if
 end
} def
/patternclip
{
	_eo {eoclip} {clip} ifelse
} def
/patternstrokepath
{
	strokepath
} def
/patternmatrix
matrix def
/patternfill
{
	dup type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get
	} if
	gsave
	patternclip
	Adobe_pattern_AI5 /patternpath get exec
	grestore
	newpath
} def
/patternstroke
{
	dup type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get
	} if
	gsave
	patternstrokepath
	true
	{
		{
			{
				newpath
				moveto
			}
			{
				lineto
			}
			{
				curveto
			}
			{
				closepath
				3 copy
				Adobe_pattern_AI5 /patternfill get exec
			} pathforall
			3 npop
		} stopped
		{
			5 npop
			patternclip
			Adobe_pattern_AI5 /patternfill get exec
		} if
	}
	{
		patternclip
		Adobe_pattern_AI5 /patternfill get exec
	} ifelse
	grestore
	newpath
} def
/vpatternawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index 5 index 5 index Adobe_pattern_AI5 /patternfill get exec
			grestore
			_fontRotateAdjust sub
			moveto
			_hvwb eq { _hvcx _hvcy rmoveto } if
			_hvax _hvay rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			_hvax sub
			3 index _hvwb eq { _hvcx sub } if
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
			gsave
			2 index false charpath
			6 index 6 index 6 index Adobe_pattern_AI5 /patternfill get exec
			grestore
			newpath moveto pop pop
		} ifelse
	} cforall
	3 npop
} def
/hpatternawidthshow
{
	{
		dup cstring exch
		gsave
		3 index eq { 5 index 5 index rmoveto } if
		false charpath currentpoint
		9 index 9 index 9 index
		Adobe_pattern_AI5 /patternfill get exec
		grestore
		newpath moveto
		2 copy rmoveto
	} cforall
	8 npop
} def
/patternashow
{
0 0 0 6 3 roll
patternawidthshow
} def
/patternawidthshow
{
	6 index type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get 7 1 roll
	} if
	_lineorientation 0 eq { hpatternawidthshow } { vpatternawidthshow } ifelse
} def
/vpatternawidthshowstroke
{
	7 1 roll
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			3 index setmatrix
			6 index 6 index 6 index Adobe_pattern_AI5 /patternstroke get exec
			grestore
			_fontRotateAdjust sub
			moveto
			_hvwb eq { _hvcx _hvcy rmoveto } if
			_hvax _hvay rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			_hvax sub
			3 index _hvwb eq { _hvcx sub } if
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
			gsave
			2 index false charpath
			4 index setmatrix
			7 index 7 index 7 index Adobe_pattern_AI5 /patternstroke get exec
			grestore
			newpath moveto pop pop
		} ifelse
	} cforall
	4 npop
} def
/hpatternawidthshowstroke
{
	7 1 roll
	{
		dup cstring exch
		gsave
		3 index eq { 5 index 5 index rmoveto } if
		false charpath currentpoint
		7 index setmatrix
		10 index 10 index 10 index
		Adobe_pattern_AI5 /patternstroke get exec
		grestore
		newpath moveto
		2 copy rmoveto
	} cforall
	9 npop
} def
/patternashowstroke
{
	0 0 0 7 3 roll
	patternawidthshowstroke
} def
/patternawidthshowstroke
{
	7 index type /dicttype eq
	{
		patternmatrix /patternmatrix get 8 1 roll
	} if
	_lineorientation 0 eq { hpatternawidthshowstroke } { vpatternawidthshowstroke } ifelse
} def
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_shading_AI8 1.0 0
%%Title: (Adobe Illustrator 8 Shading Procset)
%%Version: 1.0 0
%%CreationDate: (12/17/97) ()
%%Copyright: ((C) 1987-1997 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /Adobe_shading_AI8 10 dict dup begin put
/initialize {
	Adobe_shading_AI8 begin
	Adobe_shading_AI8 bdprocs
	Mesh /initialize get exec
} def
/terminate {
	currentdict Adobe_shading_AI8 eq {
	 end
	} if
} def
/bdprocs {
	{
		dup xcheck 1 index type /arraytype eq and {
			bind
		} if
		pop pop
	} forall
} def
/X! {pop} def
/X# {pop pop} def
/Mesh 40 dict def
Mesh begin
/initialize {
	Mesh bdprocs
	Mesh begin
		/emulate? /AI8MeshEmulation where {
			pop AI8MeshEmulation
		}{
			systemdict /shfill known not
		} ifelse def
 end
} def
/bd {
	shadingdict begin
} def
/paint {
	emulate? {
	 end
	}{
		/_lp /none ddef _fc /_lp /none ddef
		
		/AIColorSpace AIColorSpace tocolorspace store
		/ColorSpace AIColorSpace topsspace store
		
		version_ge_3010.106 not systemdict /setsmoothness known and {
			0.0001 setsmoothness
		} if
		
		composite? {
			/DataSource getdatasrc def
			Matrix concat
			currentdict end
			shfill
		}{
			AIColorSpace makesmarks AIPlateList markingplate and not isoverprint and {
			 end
			}{
				/ColorSpace /DeviceGray store
				/Decode [0 1 0 1 0 1] store
				/DataSource getplatesrc def
				Matrix concat
				currentdict end
				shfill
			} ifelse
		} ifelse
	} ifelse
} def
/shadingdict 12 dict def
shadingdict begin
	/ShadingType 6 def
	/BitsPerCoordinate 16 def
	/BitsPerComponent 8 def
	/BitsPerFlag 8 def
end
/datafile null def
/databuf 256 string def
/dataptr 0 def
/srcspace null def
/srcchannels 0 def
/dstchannels 0 def
/dstplate 0 def
/srctodstcolor null def
/getplatesrc {
	/srcspace AIColorSpace store
	/srcchannels AIColorSpace getnchannels store
	/dstchannels 1 store
	/dstplate getplateindex store
	/srctodstcolor srcspace makesmarks {
		dstplate 4 eq {
			{1 exch sub}
		}{
			{srcspace tocmyk 3 dstplate sub index 1 exch sub 5 1 roll 4 {pop} repeat}
		} ifelse
	}{
		{srcchannels {pop} repeat 1}
	} ifelse store
	/datafile getdatasrc store
	/rdpatch168 load DataLength () /SubFileDecode filter
} def
/getdatasrc {
	/rdcmntline load /ASCII85Decode filter
} def
/rdpatch168 {
	/dataptr 0 store
	49 rdcount
	4 {
		dup {pop srcchannels getint8} if
		dup {pop srctodstcolor dstchannels putint8 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdpatch3216 {
	/dataptr 0 store
	97 rdcount
	4 {
		dup {pop srcchannels getint16} if
		dup {pop srctodstcolor dstchannels putint16 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdcount {
	dup 0 gt {
		datafile databuf dataptr 4 -1 roll getinterval readstring
		exch length dataptr add /dataptr exch store
	}{
		true
	} ifelse
} def
/getint8 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 255 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint8 {
	dup dataptr add /dataptr exch store
	dataptr exch
	{
		1 sub exch
		255 mul cvi
		databuf 2 index
		3 -1 roll put
	} repeat
	pop
} def 
/getint16 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 256 mul datafile read} if
		dup {pop add 65535 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint16 {
	dup 2 mul dataptr add /dataptr exch store
	dataptr exch
	{
		2 sub exch
		65535 mul cvi dup
		256 idiv databuf 3 index 3 -1 roll put
		256 mod databuf 2 index 1 add 3 -1 roll put
	} repeat
	pop
} def 
/srcbuf 256 string def
/rdcmntline {
	currentfile srcbuf readline pop
	(%) anchorsearch {pop} if
} def
/getplateindex {
	0 [cyan? magenta? yellow? black? customColor?] {{exit} if 1 add} forall
} def
/aicsarray 4 array def
/aicsaltvals 4 array def
/aicsaltcolr aicsaltvals def
/tocolorspace {
	dup type /arraytype eq {
		mark exch aload pop
		aicsarray 0 3 -1 roll put
		aicsarray 1 3 -1 roll put
		dup aicsarray 2 3 -1 roll put
		gettintxform aicsarray 3 3 -1 roll put
		counttomark aicsaltvals 0 3 -1 roll getinterval /aicsaltcolr exch store
		aicsaltcolr astore pop pop
		aicsarray
	} if
} def
/subtintxform {aicsaltcolr {1 index mul exch} forall pop} def
/addtintxform {aicsaltcolr {1 sub 1 index mul 1 add exch} forall pop} def
/gettintxform {
	/DeviceRGB eq {/addtintxform}{/subtintxform} ifelse load
} def
/getnchannels {
	dup type /arraytype eq {0 get} if
	colorspacedict exch get begin Channels end
} def
/makesmarks {
	composite? {
		pop true
	}{
		dup dup type /arraytype eq {0 get} if
		colorspacedict exch get begin MarksPlate end
	} ifelse
} def
/markingplate {
	composite? {
		pop true
	}{
		dup type /arraytype eq {
			dup length getplateindex gt {getplateindex get}{pop false} ifelse
		} if
	} ifelse
} def
/tocmyk {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToCMYK end
} def
/topsspace {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToPSSpace end
} def
/colorspacedict 5 dict dup begin
	/DeviceGray 4 dict dup begin
		/Channels 1 def
		/MarksPlate {pop black?} def
		/ToCMYK {pop 1 exch sub 0 0 0 4 -1 roll} def
		/ToPSSpace {} def
 end def
	/DeviceRGB 4 dict dup begin
		/Channels 3 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop _rgbtocmyk} def
		/ToPSSpace {} def
 end def
	/DeviceCMYK 4 dict dup begin
		/Channels 4 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop} def
		/ToPSSpace {} def
 end def
	/Separation 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			/findcmykcustomcolor where {
				pop dup 1 exch ToCMYK 5 -1 roll 1 get
				findcmykcustomcolor 1 setcustomcolor
				systemdict /currentgray get exec
				1 ne
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {} def
 end def
	/Process 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			isCMYKSep? {
				1 exch ToCMYK 4 array astore getplateindex get 0 ne 
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {
			4 array copy dup 0 /Separation put
		} def
 end def
end def
/isoverprint {
	/currentoverprint where {pop currentoverprint}{_of} ifelse
} def
/version_ge_3010.106 {
   version {cvr} stopped {
      pop
      false
   }{
      3010.106 ge
   } ifelse
} def
end
end
defaultpacking setpacking
%%EndResource
%%EndProlog
%%BeginSetup
userdict /_useSmoothShade true put
userdict /_aicmykps false put
userdict /_forceToCMYK false put
Adobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 AGM_Gradient /initializeAI get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 Adobe_pattern_AI5 /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_shading_AI8 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
%AI5_Begin_NonPrinting
Np
%AI8_PluginGroupInfo
(Adobe Tracing Object) (\203g\203\214\201[\203X) (TracingSuite.aip)
%AI8_PluginGroupInfo
(Adobe Flare Plugin) (Flare) (flare.aip)
%AI8_PluginGroupInfo
(Adobe Deform Plugin) (Adobe \203G\203\223\203x\203\215\201[\203v\203v\203\211\203O\203C\203\223) (Envelope and Warp.aip)
%AI8_PluginGroupInfo
(Adobe Planar Group) (Adobe \203\211\203C\203u\203y\203C\203\223\203g\203v\203\211\203O\203C\203\223) (Live Paint.aip)
%AI8_PluginGroupInfo
(Adobe Path Blends) (Adobe \203u\203\214\203\223\203h\203v\203\211\203O\203C\203\223) (Live Blends.aip)
%AI8_PluginGroupInfo
(Adobe Symbolism) (Adobe \203V\203\223\203{\203\213) (Symbolism.aip)
%AI8_PluginGroupInfo
(Adobe PatternOnPath Brush Tool) (Adobe \203p\203^\201[\203\223\203u\203\211\203V\203v\203\211\203O\203C\203\223) (ArtOnPath.aip)
%AI8_PluginGroupInfo
(Adobe PatternOnPath Brush Tool) (Adobe \203p\203^\201[\203\223\203u\203\211\203V\203v\203\211\203O\203C\203\223) (ArtOnPath.aip)
%AI8_PluginGroupInfo
(Adobe ArtOnPath Brush Tool) (Adobe \203A\201[\203g\203u\203\211\203V\203v\203\211\203O\203C\203\223) (ArtOnPath.aip)
%AI8_PluginGroupInfo
(Adobe ArtOnPath Brush Tool) (Adobe \203A\201[\203g\203u\203\211\203V\203v\203\211\203O\203C\203\223) (ArtOnPath.aip)
%AI8_PluginGroupInfo
(Adobe Calligraphic Brush Tool) (Adobe \203J\203\212\203O\203\211\203t\203B\203u\203\211\203V\203v\203\211\203O\203C\203\223) (Calligraphic Brush Tool.aip)
%AI8_PluginGroupInfo
(Adobe Scatter Brush Tool) (Adobe \216U\225z\203u\203\211\203V\203v\203\211\203O\203C\203\223) (Scatter Brush Tool.aip)
%AI8_PluginGroupInfo
(Adobe Scatter Brush Tool) (Adobe \216U\225z\203u\203\211\203V\203v\203\211\203O\203C\203\223) (Scatter Brush Tool.aip)
%AI8_PluginGroupInfo
(Pathfinder Suite) (Adobe Compound Shape) (PathFinder Suite.aip)
%AI5_End_NonPrinting--
%AI5_Begin_NonPrinting
Np
6 Bn
%AI5_BeginGradient: (\603\\\603t\603g\603u\603\611\603b\603N\603r\603l\603b\603g)
(\603\\\603t\603g\603u\603\611\603b\603N\603r\603l\603b\603g) 1 3 Bd
[
0.2
0.2
0.2
1
1 %_Br
0.2
0.2
0.2
1
1 %_Br
[
0.2 0.2 0.2 1 1 68.3944 73.8792 %_BS
%_0.2 0.2 0.2 1 1 68.3944 73.8792 Bs
0.2 0.2 0.2 1 1 31.8603 88.7329 %_BS
%_0.2 0.2 0.2 1 1 31.8603 88.7329 Bs
0.2 0.2 0.2 1 1 50 100 %_BS
%_0.2 0.2 0.2 1 1 50 100 Bs
BD
%AI5_EndGradient
%AI5_BeginGradient: (\603u\603\611\603b\603N\602\711\603t\603F\601[\603h)
(\603u\603\611\603b\603N\602\711\603t\603F\601[\603h) 0 2 Bd
[
0
0 %_Br
[
0 0 0 1 1 50 100 %_BS
%_0 0 0 1 1 50 100 Bs
0 0 0 1 1 50 0 %_BS
%_0 0 0 1 1 50 0 Bs
BD
%AI5_EndGradient
%AI5_BeginGradient: (\625\772\616\713\617\763\603O\603\611\603f\601[\603V\603\607\603\623)
(\625\772\616\713\617\763\603O\603\611\603f\601[\603V\603\607\603\623) 1 2 Bd
[
<
FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8
D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0
AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A8988
87868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A69686766656463626160
5F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A3938
37363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A19181716151413121110
0F0E0D0C0B0A09080706050403020100
>
0 %_Br
[
0 0 0 0 1 50 0 %_BS
%_0 0 0 0 1 50 0 Bs
0 0 0 1 1 50 100 %_BS
%_0 0 0 1 1 50 100 Bs
BD
%AI5_EndGradient
%AI5_BeginGradient: (\615\673\624\631\602\714\623\772\625\751\602\752)
(\615\673\624\631\602\714\623\772\625\751\602\752) 0 6 Bd
[
<
38393A3A3B3C3D3E3E3F404141424344444546474748494A4A4B4C4C4D4E4F4F5051515253535455
555657575859595A5B5B5C5D5D5E5F5F60616162626364646565666767686869696A6B6B6C6C6D6D
6E6E6F6F7070717172727373747475757676777778787879797A7A7B7B7B7C7C7C7D7D7E7E7E7E7F
7F7F80808080818181818282828282
>
<
5758595A5B5C5D5E5F60616263636465666768696A6B6C6D6E6F70717272737475767778797A7A7B
7C7D7E7F808081828384858586878889898A8B8C8D8D8E8F90909192939394959696979899999A9B
9B9C9D9D9E9F9FA0A1A1A2A2A3A4A4A5A5A6A7A7A8A8A9A9AAAAABABACACADADAEAEAFAFB0B0B1B1
B1B2B2B2B3B3B3B4B4B4B4B5B5B5B5
>
<
2E2E2F2F2F3030303131313232323333333434343535353636363737373838383939393A3A3A3A3B
3B3B3C3C3C3D3D3D3D3E3E3E3F3F3F3F404040414141414242424243434344444444454545454646
464646474747474848484849494949494A4A4A4A4A4B4B4B4B4B4C4C4C4C4C4C4D4D4D4D4D4D4D4E
4E4E4E4E4E4E4E4F4F4F4F4F4F4F4F
>
0
1 %_Br
<
1F1F202122222324242526272728292A2A2B2C2C2D2E2F2F303132323334343536373738
>
<
4040414242434444454646474848494A4A4B4C4C4D4E4E4F4F5051515253535455555657
>
<
5251504F4E4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E
>
0
1 %_Br
<
050606070808090A0A0B0B0C0D0D0E0F0F101111121213141415151617171818191A1A1B1B1C1C1D
1E1E1F
>
<
2B2C2C2D2D2E2E2F2F30303131323233333434353536363737383839393A3A3B3B3C3C3D3D3E3E3F
3F3F40
>
<
7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5B5A595857565554
535252
>
0
1 %_Br
<
00000000000000000001010101010101010101010101010101010202020202020202020202020202
02020303030303030303030303030303030304040404040404040404040404040405050505050505
050505
>
<
7A7A79787776757474737271706F6E6D6C6B6A69686766666564636261605F5E5D5C5B5A59585756
5554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E
2D2C2B
>
<
9E9E9D9D9D9C9C9B9B9B9A9A99999998989797969696959594949393939292919190908F8F8F8E8E
8D8D8C8C8C8B8B8A8A898988888887878686858584848383838282818180807F7F7E7E7E7D7D7C7C
7B7B7A
>
<
03030202020202020202020202020202020202020202020202020202020202020202020201010101
01010101010101010101010101010101010101010101010101010100000000000000000000000000
000000
>
1 %_Br
<
05050505050505050404040404040404040404030303030303030303030303020202020202020202
020202010101010101010101010101000000000000
>
<
91919190908F8F8F8E8E8E8D8D8C8C8C8B8B8A8A8A89898988888787878686858585848484838382
828281818180807F7F7F7E7E7D7D7D7C7C7C7B7B7A
>
<
DBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4
B3B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E
>
<
2928282726262524242322222121201F1F1E1D1D1C1B1B1A19191818171616151414131212111110
0F0F0E0D0D0C0B0B0A0A0908080706060504040303
>
1 %_Br
[
0.51 0.71 0.31 0 1 50 100 %_BS
%_0.51 0.71 0.31 0 1 50 100 Bs
0.22 0.34 0.18 0 1 38.4615 71.0424 %_BS
%_0.22 0.34 0.18 0 1 38.4615 71.0424 Bs
0.12 0.25 0.32 0 1 50 53.6679 %_BS
%_0.12 0.25 0.32 0 1 50 53.6679 Bs
0.02 0.17 0.48 0 1 48 38.764 %_BS
%_0.02 0.17 0.48 0 1 48 38.764 Bs
0.000031 0.48 0.62 0.01 1 51.6129 13.1273 %_BS
%_0.000031 0.48 0.62 0.01 1 51.6129 13.1273 Bs
0.02 0.57 0.86 0.16 1 50 0 %_BS
%_0.02 0.57 0.86 0.16 1 50 0 Bs
BD
%AI5_EndGradient
%AI5_BeginGradient: (\620\774\617\763\603O\603\611\603f\601[\603V\603\607\603\623)
(\620\774\617\763\603O\603\611\603f\601[\603V\603\607\603\623) 0 2 Bd
[
<
FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8
D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0
AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A8988
87868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A69686766656463626160
5F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A3938
37363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A19181716151413121110
0F0E0D0C0B0A09080706050403020100
>
0 %_Br
[
0 0 0 1 1 50 100 %_BS
%_0 0 0 1 1 50 100 Bs
0 0 0 0 1 50 0 %_BS
%_0 0 0 0 1 50 0 Bs
BD
%AI5_EndGradient
%AI5_BeginGradient: (\623\672 \(\625\772\616\713\617\763\))
(\623\672 \(\625\772\616\713\617\763\)) 1 4 Bd
[
0
<
0A0B0B0C0D0D0E0F0F1011111212131414151616171818191A1A1B1C1C1D1E1E1F20202122222324
24252627272829292A2B2B2C2D2D2E2F2F303131323333343536
>
<
242525262728292A2B2C2D2E2F303132333435363738393A3B3C3D3D3E3F40414243444546474849
4A4B4C4D4E4F505152535455565758595A5B5C5D5E5F60616263
>
<
0001010202030404050606070808090A0A0B0C0C0D0E0E0F1010111212131414151616171818191A
1A1B1C1C1D1E1E1F2020212222232424252627272829292A2B2B
>
1 %_Br
<
00010102020303040405060607070808090A0A0B0B0C0C0D0E0E0F0F101111121213131415151616
17181819191A1B1B1C1C1D1E1E1F1F202121222223242425252627272828292A2A2B2B2C2D2D2E2E
2F30303131323333343435363637383839393A3B3B3C3C3D3E3E3F3F404141424343444445464647
474849494A4A4B4C4C4D4E4E4F4F50515152525354545556565757585959
>
<
3636373839393A3B3C3D3D3E3F4041424243444546464748494A4B4B4C4D4E4F5051515253545556
565758595A5B5C5C5D5E5F6061626263646566676868696A6B6C6D6E6E6F70717273747475767778
797A7A7B7C7D7E7F8081818283848586878788898A8B8C8D8E8E8F90919293949595969798999A9B
9C9C9D9E9FA0A1A2A3A3A4A5A6A7A8A9AAAAABACADAEAFB0B1B2B2B3B4B5
>
<
636465666768696A6B6C6C6D6E6F707172737475767778797A7B7C7C7D7E7F808182838485868788
898A8B8C8D8E8F90919293949596979898999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAF
B0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7
D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5
>
<
2B2B2C2C2C2C2C2C2C2C2C2D2D2D2D2D2D2D2D2D2E2E2E2E2E2E2E2E2F2F2F2F2F2F2F2F2F303030
30303030303131313131313131323232323232323232333333333333333334343434343434343535
3535353535353536363636363636363737373737373737383838383838383839393939393939393A
3A3A3A3A3A3A3A3A3B3B3B3B3B3B3B3B3C3C3C3C3C3C3C3C3D3D3D3D3D3D
>
1 %_Br
<
595A5A5A5A5B5B5B5B5C5C5C5C5D5D5D5D5E5E5E5E5F5F5F5F606060606161616162626262636363
636464646465656565666666666767676768686868696969696A6A6A6A6B6B6B6B6C6C6C6C6D6D6D
6D6E
>
<
B5B6B6B7B8B8B9BABABBBCBCBDBEBEBFC0C0C1C2C2C3C4C4C5C6C6C7C8C8C9CACACBCCCCCDCECECF
CFD0D1D1D2D3D3D4D5D5D6D7D7D8D9D9DADBDBDCDDDDDEDFDFE0E1E1E2E3E3E4E5E5E6E7E7E8E9E9
EAEB
>
<
F5F5F4F4F4F4F3F3F3F3F2F2F2F2F1F1F1F1F0F0F0F0EFEFEFEFEEEEEEEDEDEDEDECECECECEBEBEB
EBEAEAEAEAE9E9E9E9E8E8E8E8E7E7E7E7E6E6E6E6E5E5E5E5E4E4E4E4E3E3E3E3E2E2E2E2E1E1E1
E1E0
>
<
3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F6061626364
656768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D
8E8F
>
1 %_Br
[
0 0.04 0.14 0 1 51.0204 0.395812 %_BS
%_0 0.04 0.14 0 1 51.0204 0.395812 Bs
0 0.21 0.39 0.17 1 51.0204 30.8989 %_BS
%_0 0.21 0.39 0.17 1 51.0204 30.8989 Bs
0.35 0.71 0.96 0.24 1 50 78.0899 %_BS
%_0.35 0.71 0.96 0.24 1 50 78.0899 Bs
0.43 0.92 0.88 0.56 1 50 100 %_BS
%_0.43 0.92 0.88 0.56 1 50 100 Bs
BD
%AI5_EndGradient
%AI5_End_NonPrinting--
%AI5_Begin_NonPrinting
Np
%AI3_BeginPattern: (\613\633\614`\603p\603^\601[\603\623)
(\613\633\614`\603p\603^\601[\603\623) 77.5215 31.4824 155.3037 96.7959 [
%AI3_Tile
(0 O 0 R 0.02 0.73 1 0 k
 0.02 0.73 1 0 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 0.5 w 4 M []0 d0 XR
48.6924 38.085 m
26.7441 24.5742 7.7324 50.1514 v
7.7324 0.7559 l
26.7441 26.334 48.6924 12.8223 y
F
%AI6_EndPatternLayer
) &
(0 O 0 R 0.753658 0.603387 0.711482 0.831327 k
 0.753658 0.603387 0.711482 0.831327 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 0.5 w 4 M []0 d0 XR
48.6924 38.085 m
26.7441 24.5742 7.7324 50.1514 v
7.7324 0.7559 l
26.7441 26.334 48.6924 12.8223 y
S
%AI6_EndPatternLayer
) &
(0 O 0 R 0.02 0.73 1 0 k
 0.02 0.73 1 0 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 0.5 w 4 M []0 d0 XR
126.4736 38.085 m
104.5264 24.5742 85.5137 50.1514 v
85.5137 0.7559 l
104.5264 26.334 126.4736 12.8223 y
F
%AI6_EndPatternLayer
) &
(0 O 0 R 0.753658 0.603387 0.711482 0.831327 k
 0.753658 0.603387 0.711482 0.831327 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 0.5 w 4 M []0 d0 XR
126.4736 38.085 m
104.5264 24.5742 85.5137 50.1514 v
85.5137 0.7559 l
104.5264 26.334 126.4736 12.8223 y
S
%AI6_EndPatternLayer
) &
(0 O 0 R 0.01 1 1 0 k
 0.01 1 1 0 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 0.5 w 4 M []0 d0 XR
122.4521 70.7412 m
144.4004 57.2314 163.4121 82.8076 v
163.4121 33.4131 l
144.4004 58.9902 122.4521 45.4785 y
F
%AI6_EndPatternLayer
) &
(0 O 0 R 0.753658 0.603387 0.711482 0.831327 k
 0.753658 0.603387 0.711482 0.831327 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 0.5 w 4 M []0 d0 XR
122.4521 70.7412 m
144.4004 57.2314 163.4121 82.8076 v
163.4121 33.4131 l
144.4004 58.9902 122.4521 45.4785 y
S
%AI6_EndPatternLayer
) &
(0 O 0 R 0.02 0.73 1 0 k
 0.02 0.73 1 0 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 0.5 w 4 M []0 d0 XR
126.7764 78.6689 m
122.4805 70.8115 l
144.4277 57.3008 163.4404 82.8779 v
F
%AI6_EndPatternLayer
) &
(0 O 0 R 0.753658 0.603387 0.711482 0.831327 k
 0.753658 0.603387 0.711482 0.831327 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 0.5 w 4 M []0 d0 XR
126.7764 78.6689 m
122.4805 70.8115 l
144.4277 57.3008 163.4404 82.8779 v
S
%AI6_EndPatternLayer
) &
(0 O 0 R 0.02 0.73 1 0 k
 0.02 0.73 1 0 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 0.5 w 4 M []0 d0 XR
126.4736 103.3984 m
104.5264 89.8877 85.5137 115.4648 v
85.5137 66.0693 l
104.5264 91.6475 126.4736 78.1357 y
F
%AI6_EndPatternLayer
) &
(0 O 0 R 0.753658 0.603387 0.711482 0.831327 k
 0.753658 0.603387 0.711482 0.831327 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 0.5 w 4 M []0 d0 XR
126.4736 103.3984 m
104.5264 89.8877 85.5137 115.4648 v
85.5137 66.0693 l
104.5264 91.6475 126.4736 78.1357 y
S
%AI6_EndPatternLayer
) &
(0 O 0 R 0.02 0.73 1 0 k
 0.02 0.73 1 0 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 0.5 w 4 M []0 d0 XR
126.7764 102.8643 m
122.4805 110.7227 l
144.4277 124.2334 163.4404 98.6563 v
F
%AI6_EndPatternLayer
) &
(0 O 0 R 0.753658 0.603387 0.711482 0.831327 k
 0.753658 0.603387 0.711482 0.831327 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 0.5 w 4 M []0 d0 XR
126.7764 102.8643 m
122.4805 110.7227 l
144.4277 124.2334 163.4404 98.6563 v
S
%AI6_EndPatternLayer
) &
(0 O 0 R 0.01 1 1 0 k
 0.01 1 1 0 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 0.5 w 4 M []0 d0 XR
164.7207 98.3916 m
158.3359 102.5957 153.498 106.7451 141.2617 106.7451 c
121.0918 106.7451 123.8242 93.9854 103.6523 93.9854 C
99.5859 94.7793 99.5859 90.6816 v
99.5859 86.9863 103.6016 87.5869 Y
123.7754 87.5869 121.0439 74.8252 141.2168 74.8252 c
151.6201 74.8252 160.1045 79.6699 163.8457 82.3398 c
164.7344 82.9736 165.3613 83.4873 165.6768 83.7822 c
165.7119 83.8154 165.7529 83.8525 165.79 83.8867 c
167.4775 85.4463 170.8945 88.2871 170.8945 90.7666 c
170.8945 93.6357 164.7207 98.3916 Y
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.753658 0.603387 0.711482 0.831327 k
 0.753658 0.603387 0.711482 0.831327 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 0.5 w 4 M []0 d0 XR
164.7207 98.3916 m
158.3359 102.5957 153.498 106.7451 141.2617 106.7451 c
121.0918 106.7451 123.8242 93.9854 103.6523 93.9854 C
99.5859 94.7793 99.5859 90.6816 v
99.5859 86.9863 103.6016 87.5869 Y
123.7754 87.5869 121.0439 74.8252 141.2168 74.8252 c
151.6201 74.8252 160.1045 79.6699 163.8457 82.3398 c
164.7344 82.9736 165.3613 83.4873 165.6768 83.7822 c
165.7119 83.8154 165.7529 83.8525 165.79 83.8867 c
167.4775 85.4463 170.8945 88.2871 170.8945 90.7666 c
170.8945 93.6357 164.7207 98.3916 Y
s
%AI6_EndPatternLayer
) &
(0 O 0 R 1 0.89 0.01 0 k
 1 0.89 0.01 0 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
157.2695 96.7959 m
157.2695 95.71 156.3896 94.8291 155.3027 94.8291 c
154.2168 94.8291 153.3369 95.71 153.3369 96.7959 c
153.3369 97.8828 154.2168 98.7637 155.3027 98.7637 c
156.3896 98.7637 157.2695 97.8828 157.2695 96.7959 c
f
142.3477 90.6719 m
142.3477 96.1738 146.54 100.6943 151.9033 101.2197 C
151.5596 101.2529 151.2109 101.2715 150.8584 101.2715 c
145.0039 101.2715 140.2588 96.5264 140.2588 90.6719 c
140.2588 84.8184 145.0039 80.0723 150.8584 80.0723 c
151.2109 80.0723 151.5596 80.0918 151.9033 80.125 C
146.54 80.6494 142.3477 85.1709 142.3477 90.6719 c
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.02 0.73 1 0 k
 0.02 0.73 1 0 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 0.5 w 4 M []0 d0 XR
48.9941 78.6689 m
44.6982 70.8115 l
66.6465 57.3008 85.6582 82.8779 v
F
%AI6_EndPatternLayer
) &
(0 O 0 R 0.753658 0.603387 0.711482 0.831327 k
 0.753658 0.603387 0.711482 0.831327 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 0.5 w 4 M []0 d0 XR
48.9941 78.6689 m
44.6982 70.8115 l
66.6465 57.3008 85.6582 82.8779 v
S
%AI6_EndPatternLayer
) &
(0 O 0 R 0.01 1 1 0 k
 0.01 1 1 0 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 0.5 w 4 M []0 d0 XR
44.6699 70.7412 m
66.6182 57.2314 85.6299 82.8076 v
85.6299 33.4131 l
66.6182 58.9902 44.6699 45.4785 y
F
%AI6_EndPatternLayer
) &
(0 O 0 R 0.753658 0.603387 0.711482 0.831327 k
 0.753658 0.603387 0.711482 0.831327 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 0.5 w 4 M []0 d0 XR
44.6699 70.7412 m
66.6182 57.2314 85.6299 82.8076 v
85.6299 33.4131 l
66.6182 58.9902 44.6699 45.4785 y
S
%AI6_EndPatternLayer
) &
(0 O 0 R 0.02 0.73 1 0 k
 0.02 0.73 1 0 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 0.5 w 4 M []0 d0 XR
48.6924 103.3984 m
26.7441 89.8877 7.7324 115.4648 v
7.7324 66.0693 l
26.7441 91.6475 48.6924 78.1357 y
F
%AI6_EndPatternLayer
) &
(0 O 0 R 0.753658 0.603387 0.711482 0.831327 k
 0.753658 0.603387 0.711482 0.831327 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 0.5 w 4 M []0 d0 XR
48.6924 103.3984 m
26.7441 89.8877 7.7324 115.4648 v
7.7324 66.0693 l
26.7441 91.6475 48.6924 78.1357 y
S
%AI6_EndPatternLayer
) &
(0 O 0 R 0.02 0.73 1 0 k
 0.02 0.73 1 0 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 0.5 w 4 M []0 d0 XR
48.9941 102.8643 m
44.6982 110.7227 l
66.6465 124.2334 85.6582 98.6563 v
F
%AI6_EndPatternLayer
) &
(0 O 0 R 0.753658 0.603387 0.711482 0.831327 k
 0.753658 0.603387 0.711482 0.831327 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 0.5 w 4 M []0 d0 XR
48.9941 102.8643 m
44.6982 110.7227 l
66.6465 124.2334 85.6582 98.6563 v
S
%AI6_EndPatternLayer
) &
(0 O 0 R 0.01 1 1 0 k
 0.01 1 1 0 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 0.5 w 4 M []0 d0 XR
86.9395 98.3916 m
80.5547 102.5957 75.7168 106.7451 63.4805 106.7451 c
43.3105 106.7451 46.042 93.9854 25.8701 93.9854 C
21.8037 94.7793 21.8037 90.6816 v
21.8037 86.9863 25.8193 87.5869 Y
45.9932 87.5869 43.2617 74.8252 63.4355 74.8252 c
73.8389 74.8252 82.3223 79.6699 86.0645 82.3398 c
86.9521 82.9736 87.5791 83.4873 87.8945 83.7822 c
87.9307 83.8154 87.9707 83.8525 88.0088 83.8867 c
89.6963 85.4463 93.1123 88.2871 93.1123 90.7666 c
93.1123 93.6357 86.9395 98.3916 Y
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.753658 0.603387 0.711482 0.831327 k
 0.753658 0.603387 0.711482 0.831327 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 0.5 w 4 M []0 d0 XR
86.9395 98.3916 m
80.5547 102.5957 75.7168 106.7451 63.4805 106.7451 c
43.3105 106.7451 46.042 93.9854 25.8701 93.9854 C
21.8037 94.7793 21.8037 90.6816 v
21.8037 86.9863 25.8193 87.5869 Y
45.9932 87.5869 43.2617 74.8252 63.4355 74.8252 c
73.8389 74.8252 82.3223 79.6699 86.0645 82.3398 c
86.9521 82.9736 87.5791 83.4873 87.8945 83.7822 c
87.9307 83.8154 87.9707 83.8525 88.0088 83.8867 c
89.6963 85.4463 93.1123 88.2871 93.1123 90.7666 c
93.1123 93.6357 86.9395 98.3916 Y
s
%AI6_EndPatternLayer
) &
(0 O 0 R 1 0.89 0.01 0 k
 1 0.89 0.01 0 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
79.4883 96.7959 m
79.4883 95.71 78.6084 94.8291 77.5215 94.8291 c
76.4355 94.8291 75.5557 95.71 75.5557 96.7959 c
75.5557 97.8828 76.4355 98.7637 77.5215 98.7637 c
78.6084 98.7637 79.4883 97.8828 79.4883 96.7959 c
f
64.5654 90.6719 m
64.5654 96.1738 68.7578 100.6943 74.1211 101.2197 C
73.7773 101.2529 73.4297 101.2715 73.0762 101.2715 c
67.2227 101.2715 62.4766 96.5264 62.4766 90.6719 c
62.4766 84.8184 67.2227 80.0723 73.0762 80.0723 c
73.4297 80.0723 73.7773 80.0918 74.1211 80.125 C
68.7578 80.6494 64.5654 85.1709 64.5654 90.6719 c
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.01 1 1 0 k
 0.01 1 1 0 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 0.5 w 4 M []0 d0 XR
44.3682 46.0117 m
48.6641 38.1553 l
26.7158 24.6436 7.7041 50.2217 v
F
%AI6_EndPatternLayer
) &
(0 O 0 R 0.753658 0.603387 0.711482 0.831327 k
 0.753658 0.603387 0.711482 0.831327 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 0.5 w 4 M []0 d0 XR
44.3682 46.0117 m
48.6641 38.1553 l
26.7158 24.6436 7.7041 50.2217 v
S
%AI6_EndPatternLayer
) &
(0 O 0 R 0.01 1 1 0 k
 0.01 1 1 0 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 0.5 w 4 M []0 d0 XR
44.3682 70.207 m
48.6641 78.0654 l
26.7158 91.5762 7.7041 65.999 v
F
%AI6_EndPatternLayer
) &
(0 O 0 R 0.753658 0.603387 0.711482 0.831327 k
 0.753658 0.603387 0.711482 0.831327 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 0.5 w 4 M []0 d0 XR
44.3682 70.207 m
48.6641 78.0654 l
26.7158 91.5762 7.7041 65.999 v
S
%AI6_EndPatternLayer
) &
(0 O 0 R 0.02 0.73 1 0 k
 0.02 0.73 1 0 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 0.5 w 4 M []0 d0 XR
67.4922 61.3281 m
47.3203 61.3281 50.0518 74.0879 29.8818 74.0879 c
17.6455 74.0879 12.8076 69.9395 6.4229 65.7354 C
0.25 60.9795 0.25 58.1104 v
0.25 55.6309 3.666 52.79 5.3535 51.2305 c
5.3916 51.1963 5.4326 51.1592 5.4678 51.126 c
5.7832 50.8311 6.4102 50.3174 7.2979 49.6836 c
11.04 47.0137 19.5234 42.1689 29.9268 42.1689 c
50.1006 42.1689 47.3691 54.9307 67.543 54.9307 C
71.5586 54.3301 71.5586 58.0254 v
71.5586 62.123 67.4922 61.3281 Y
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.753658 0.603387 0.711482 0.831327 k
 0.753658 0.603387 0.711482 0.831327 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 0.5 w 4 M []0 d0 XR
67.4922 61.3281 m
47.3203 61.3281 50.0518 74.0879 29.8818 74.0879 c
17.6455 74.0879 12.8076 69.9395 6.4229 65.7354 C
0.25 60.9795 0.25 58.1104 v
0.25 55.6309 3.666 52.79 5.3535 51.2305 c
5.3916 51.1963 5.4326 51.1592 5.4678 51.126 c
5.7832 50.8311 6.4102 50.3174 7.2979 49.6836 c
11.04 47.0137 19.5234 42.1689 29.9268 42.1689 c
50.1006 42.1689 47.3691 54.9307 67.543 54.9307 C
71.5586 54.3301 71.5586 58.0254 v
71.5586 62.123 67.4922 61.3281 Y
s
%AI6_EndPatternLayer
) &
(0 O 0 R 1 0.89 0.01 0 k
 1 0.89 0.01 0 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
13.874 64.1396 m
13.874 63.0527 14.7539 62.1729 15.8408 62.1729 c
16.9268 62.1729 17.8066 63.0527 17.8066 64.1396 c
17.8066 65.2266 16.9268 66.1064 15.8408 66.1064 c
14.7539 66.1064 13.874 65.2266 13.874 64.1396 c
f
28.7969 58.0156 m
28.7969 63.5176 24.6045 68.0381 19.2412 68.5635 C
19.585 68.5967 19.9326 68.6152 20.2861 68.6152 c
26.1396 68.6152 30.8857 63.8691 30.8857 58.0156 c
30.8857 52.1611 26.1396 47.416 20.2861 47.416 c
19.9326 47.416 19.585 47.4355 19.2412 47.4688 C
24.6045 47.9932 28.7969 52.5146 28.7969 58.0156 c
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.01 1 1 0 k
 0.01 1 1 0 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 0.5 w 4 M []0 d0 XR
122.1504 46.0117 m
126.4463 38.1553 l
104.498 24.6436 85.4863 50.2217 v
F
%AI6_EndPatternLayer
) &
(0 O 0 R 0.753658 0.603387 0.711482 0.831327 k
 0.753658 0.603387 0.711482 0.831327 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 0.5 w 4 M []0 d0 XR
122.1504 46.0117 m
126.4463 38.1553 l
104.498 24.6436 85.4863 50.2217 v
S
%AI6_EndPatternLayer
) &
(0 O 0 R 0.01 1 1 0 k
 0.01 1 1 0 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 0.5 w 4 M []0 d0 XR
122.1504 70.207 m
126.4463 78.0654 l
104.498 91.5762 85.4863 65.999 v
F
%AI6_EndPatternLayer
) &
(0 O 0 R 0.753658 0.603387 0.711482 0.831327 k
 0.753658 0.603387 0.711482 0.831327 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 0.5 w 4 M []0 d0 XR
122.1504 70.207 m
126.4463 78.0654 l
104.498 91.5762 85.4863 65.999 v
S
%AI6_EndPatternLayer
) &
(0 O 0 R 0.02 0.73 1 0 k
 0.02 0.73 1 0 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 0.5 w 4 M []0 d0 XR
145.2734 61.3281 m
125.1025 61.3281 127.834 74.0879 107.6641 74.0879 c
95.4277 74.0879 90.5898 69.9395 84.2051 65.7354 C
78.0322 60.9795 78.0322 58.1104 v
78.0322 55.6309 81.4482 52.79 83.1357 51.2305 c
83.1729 51.1963 83.2139 51.1592 83.25 51.126 c
83.5654 50.8311 84.1914 50.3174 85.0801 49.6836 c
88.8223 47.0137 97.3057 42.1689 107.709 42.1689 c
127.8828 42.1689 125.1514 54.9307 145.3242 54.9307 C
149.3408 54.3301 149.3408 58.0254 v
149.3408 62.123 145.2734 61.3281 Y
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.753658 0.603387 0.711482 0.831327 k
 0.753658 0.603387 0.711482 0.831327 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 0.5 w 4 M []0 d0 XR
145.2734 61.3281 m
125.1025 61.3281 127.834 74.0879 107.6641 74.0879 c
95.4277 74.0879 90.5898 69.9395 84.2051 65.7354 C
78.0322 60.9795 78.0322 58.1104 v
78.0322 55.6309 81.4482 52.79 83.1357 51.2305 c
83.1729 51.1963 83.2139 51.1592 83.25 51.126 c
83.5654 50.8311 84.1914 50.3174 85.0801 49.6836 c
88.8223 47.0137 97.3057 42.1689 107.709 42.1689 c
127.8828 42.1689 125.1514 54.9307 145.3242 54.9307 C
149.3408 54.3301 149.3408 58.0254 v
149.3408 62.123 145.2734 61.3281 Y
s
%AI6_EndPatternLayer
) &
(0 O 0 R 1 0.89 0.01 0 k
 1 0.89 0.01 0 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
91.6563 64.1396 m
91.6563 63.0527 92.5361 62.1729 93.623 62.1729 c
94.709 62.1729 95.5889 63.0527 95.5889 64.1396 c
95.5889 65.2266 94.709 66.1064 93.623 66.1064 c
92.5361 66.1064 91.6563 65.2266 91.6563 64.1396 c
f
106.5781 58.0156 m
106.5781 63.5176 102.3867 68.0381 97.0234 68.5635 C
97.3662 68.5967 97.7148 68.6152 98.0684 68.6152 c
103.9219 68.6152 108.668 63.8691 108.668 58.0156 c
108.668 52.1611 103.9219 47.416 98.0684 47.416 c
97.7148 47.416 97.3662 47.4355 97.0234 47.4688 C
102.3867 47.9932 106.5781 52.5146 106.5781 58.0156 c
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.02 0.73 1 0 k
 0.02 0.73 1 0 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 0.5 w 4 M []0 d0 XR
126.7764 13.3555 m
122.4805 5.498 l
144.4277 -8.0127 163.4404 17.5645 v
F
%AI6_EndPatternLayer
) &
(0 O 0 R 0.753658 0.603387 0.711482 0.831327 k
 0.753658 0.603387 0.711482 0.831327 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 0.5 w 4 M []0 d0 XR
126.7764 13.3555 m
122.4805 5.498 l
144.4277 -8.0127 163.4404 17.5645 v
S
%AI6_EndPatternLayer
) &
(0 O 0 R 0.02 0.73 1 0 k
 0.02 0.73 1 0 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 0.5 w 4 M []0 d0 XR
126.7764 37.5508 m
122.4805 45.4092 l
144.4277 58.9199 163.4404 33.3428 v
F
%AI6_EndPatternLayer
) &
(0 O 0 R 0.753658 0.603387 0.711482 0.831327 k
 0.753658 0.603387 0.711482 0.831327 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 0.5 w 4 M []0 d0 XR
126.7764 37.5508 m
122.4805 45.4092 l
144.4277 58.9199 163.4404 33.3428 v
S
%AI6_EndPatternLayer
) &
(0 O 0 R 0.01 1 1 0 k
 0.01 1 1 0 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 0.5 w 4 M []0 d0 XR
164.7207 33.0781 m
158.3359 37.2822 153.498 41.4316 141.2617 41.4316 c
121.0918 41.4316 123.8242 28.6719 103.6523 28.6719 C
99.5859 29.4658 99.5859 25.3691 v
99.5859 21.6729 103.6016 22.2734 Y
123.7754 22.2734 121.0439 9.5117 141.2168 9.5117 c
151.6201 9.5117 160.1045 14.3564 163.8457 17.0273 c
164.7344 17.6602 165.3613 18.1738 165.6768 18.4688 c
165.7119 18.502 165.7529 18.54 165.79 18.5732 c
167.4775 20.1338 170.8945 22.9736 170.8945 25.4531 c
170.8945 28.3232 164.7207 33.0781 Y
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.753658 0.603387 0.711482 0.831327 k
 0.753658 0.603387 0.711482 0.831327 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 0.5 w 4 M []0 d0 XR
164.7207 33.0781 m
158.3359 37.2822 153.498 41.4316 141.2617 41.4316 c
121.0918 41.4316 123.8242 28.6719 103.6523 28.6719 C
99.5859 29.4658 99.5859 25.3691 v
99.5859 21.6729 103.6016 22.2734 Y
123.7754 22.2734 121.0439 9.5117 141.2168 9.5117 c
151.6201 9.5117 160.1045 14.3564 163.8457 17.0273 c
164.7344 17.6602 165.3613 18.1738 165.6768 18.4688 c
165.7119 18.502 165.7529 18.54 165.79 18.5732 c
167.4775 20.1338 170.8945 22.9736 170.8945 25.4531 c
170.8945 28.3232 164.7207 33.0781 Y
s
%AI6_EndPatternLayer
) &
(0 O 0 R 1 0.89 0.01 0 k
 1 0.89 0.01 0 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
157.2695 31.4824 m
157.2695 30.3965 156.3896 29.5156 155.3027 29.5156 c
154.2168 29.5156 153.3369 30.3965 153.3369 31.4824 c
153.3369 32.5693 154.2168 33.4502 155.3027 33.4502 c
156.3896 33.4502 157.2695 32.5693 157.2695 31.4824 c
f
142.3477 25.3594 m
142.3477 30.8604 146.54 35.3809 151.9033 35.9063 C
151.5596 35.9395 151.2109 35.959 150.8584 35.959 c
145.0039 35.959 140.2588 31.2129 140.2588 25.3594 c
140.2588 19.5049 145.0039 14.7598 150.8584 14.7598 c
151.2109 14.7598 151.5596 14.7783 151.9033 14.8115 C
146.54 15.3359 142.3477 19.8574 142.3477 25.3594 c
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.02 0.73 1 0 k
 0.02 0.73 1 0 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 0.5 w 4 M []0 d0 XR
48.9941 13.3555 m
44.6982 5.498 l
66.6465 -8.0127 85.6582 17.5645 v
F
%AI6_EndPatternLayer
) &
(0 O 0 R 0.753658 0.603387 0.711482 0.831327 k
 0.753658 0.603387 0.711482 0.831327 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 0.5 w 4 M []0 d0 XR
48.9941 13.3555 m
44.6982 5.498 l
66.6465 -8.0127 85.6582 17.5645 v
S
%AI6_EndPatternLayer
) &
(0 O 0 R 0.02 0.73 1 0 k
 0.02 0.73 1 0 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 0.5 w 4 M []0 d0 XR
48.9941 37.5508 m
44.6982 45.4092 l
66.6465 58.9199 85.6582 33.3428 v
F
%AI6_EndPatternLayer
) &
(0 O 0 R 0.753658 0.603387 0.711482 0.831327 k
 0.753658 0.603387 0.711482 0.831327 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 0.5 w 4 M []0 d0 XR
48.9941 37.5508 m
44.6982 45.4092 l
66.6465 58.9199 85.6582 33.3428 v
S
%AI6_EndPatternLayer
) &
(0 O 0 R 0.01 1 1 0 k
 0.01 1 1 0 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 0.5 w 4 M []0 d0 XR
86.9395 33.0781 m
80.5547 37.2822 75.7168 41.4316 63.4805 41.4316 c
43.3105 41.4316 46.042 28.6719 25.8701 28.6719 C
21.8037 29.4658 21.8037 25.3691 v
21.8037 21.6729 25.8193 22.2734 Y
45.9932 22.2734 43.2617 9.5117 63.4355 9.5117 c
73.8389 9.5117 82.3223 14.3564 86.0645 17.0273 c
86.9521 17.6602 87.5791 18.1738 87.8945 18.4688 c
87.9307 18.502 87.9707 18.54 88.0088 18.5732 c
89.6963 20.1338 93.1123 22.9736 93.1123 25.4531 c
93.1123 28.3232 86.9395 33.0781 Y
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.753658 0.603387 0.711482 0.831327 k
 0.753658 0.603387 0.711482 0.831327 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 0.5 w 4 M []0 d0 XR
86.9395 33.0781 m
80.5547 37.2822 75.7168 41.4316 63.4805 41.4316 c
43.3105 41.4316 46.042 28.6719 25.8701 28.6719 C
21.8037 29.4658 21.8037 25.3691 v
21.8037 21.6729 25.8193 22.2734 Y
45.9932 22.2734 43.2617 9.5117 63.4355 9.5117 c
73.8389 9.5117 82.3223 14.3564 86.0645 17.0273 c
86.9521 17.6602 87.5791 18.1738 87.8945 18.4688 c
87.9307 18.502 87.9707 18.54 88.0088 18.5732 c
89.6963 20.1338 93.1123 22.9736 93.1123 25.4531 c
93.1123 28.3232 86.9395 33.0781 Y
s
%AI6_EndPatternLayer
) &
(0 O 0 R 1 0.89 0.01 0 k
 1 0.89 0.01 0 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
79.4883 31.4824 m
79.4883 30.3965 78.6084 29.5156 77.5215 29.5156 c
76.4355 29.5156 75.5557 30.3965 75.5557 31.4824 c
75.5557 32.5693 76.4355 33.4502 77.5215 33.4502 c
78.6084 33.4502 79.4883 32.5693 79.4883 31.4824 c
f
64.5654 25.3594 m
64.5654 30.8604 68.7578 35.3809 74.1211 35.9063 C
73.7773 35.9395 73.4297 35.959 73.0762 35.959 c
67.2227 35.959 62.4766 31.2129 62.4766 25.3594 c
62.4766 19.5049 67.2227 14.7598 73.0762 14.7598 c
73.4297 14.7598 73.7773 14.7783 74.1211 14.8115 C
68.7578 15.3359 64.5654 19.8574 64.5654 25.3594 c
f
%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI5_End_NonPrinting--
%AI5_Begin_NonPrinting
Np
%AI8_BeginBrushPattern
(Unnamed 20)0 A
u
u
0 J 0 j 1 w 4 M []0 d0 XR
-4241.5 4394.5054 m
-4027.8999 4394.5054 L
-4027.8999 4386.7046 L
-4241.5 4386.7046 L
-4241.5 4394.5054 L
n
0 O
0 0 0 1 k
-4241.5 4390.6055 m
-4231.4854 4393.0972 -4224.6865 4394.4453 -4212.7007 4394.5054 c
-4199.7188 4394.5703 -4134.6997 4394.5054 y
-4069.6816 4394.5703 -4056.6997 4394.5054 v
-4044.7124 4394.4453 -4037.9136 4393.0972 -4027.8999 4390.6055 C
-4037.9136 4388.1138 -4044.7124 4386.7656 -4056.6997 4386.7046 c
-4069.6816 4386.6392 -4134.6997 4386.7046 y
-4199.7188 4386.6392 -4212.7007 4386.7046 v
-4224.6865 4386.7656 -4231.4854 4388.1138 -4241.5 4390.6055 C
f
U
U
%AI8_EndBrushPattern
%AI8_BeginBrushPattern
(Unnamed Brush Pat 12)0 A
u
0 J 0 j 1 w 4 M []0 d0 XR
-8114 8267.0703 m
-8016.2451 8267.0703 L
-8016.2451 8246.3545 L
-8114 8246.3545 L
-8114 8267.0703 L
n
0 O
0 g
1 XR
-8016.5586 8262.3887 m
-8031.8247 8248.6006 -8049.5537 8269.5195 -8064.9277 8257.2363 C
-8063.4199 8251.584 -8057.7598 8258.5381 -8055.5176 8253.8916 C
-8055.4341 8252.291 -8058.6313 8253.791 -8058.5127 8251.6709 C
-8056.6245 8248.2617 -8051.8955 8248.7588 -8050.5664 8252.8076 C
-8044.3115 8250.8379 -8037.7734 8244.8945 -8031.7847 8246.6875 C
-8030.2671 8248.0381 -8031.0708 8249.2217 -8030.6211 8250.498 C
-8023.2871 8246.0625 -8014.4644 8255.1982 -8016.5586 8262.3887 C
f
-8060.2842 8264.0029 m
-8060.8247 8264.3789 -8059.9277 8265.4902 -8060.2529 8265.9785 C
-8062.3237 8265.2266 -8064.6919 8261.1484 -8066.4731 8258.3809 C
-8066.2632 8259.9102 -8067.6641 8261.2344 -8069.0781 8259.0029 C
-8069.2383 8258.1855 -8068.3667 8257.8984 -8068.6729 8257.0068 C
-8069.8306 8255.4385 -8070.8472 8256.9238 -8071.7798 8256.6953 C
-8072.3184 8255.9316 -8072.6143 8255.2891 -8072.6816 8254.7646 C
-8066.5537 8251.9443 -8059.9263 8263.7471 -8053.7456 8264.1729 C
-8053.9048 8267.1855 -8057.8555 8268.8711 -8060.2842 8264.0029 C
f
u
u
0 XR
-8057.1602 8258.7305 m
-8072.0142 8252.1904 -8093.4731 8256.4121 -8109.3687 8256.3896 c
-8115.2988 8256.3828 -8104.8965 8256.3916 -8110.8267 8256.3965 c
N
0 O
0 g
-8054.8052 8257.5098 m
-8072.1475 8250.334 -8091.9341 8255.126 -8110.0532 8255.0566 C
-8110.8608 8255.9434 -8111.6685 8256.832 -8112.4751 8257.7178 C
-8111.6973 8257.7178 -8110.9194 8257.7168 -8110.1421 8257.7236 C
-8109.3345 8256.8359 -8108.5273 8255.9492 -8107.7202 8255.0625 C
-8108.3516 8255.0723 -8108.9844 8255.0654 -8109.6157 8255.0654 c
-8111.3735 8255.0684 -8115.9165 8257.7324 -8112.0376 8257.7275 c
-8111.4063 8257.7275 -8110.7734 8257.7344 -8110.1421 8257.7236 c
-8108.4155 8257.6963 -8103.8184 8255.0938 -8107.7202 8255.0625 c
-8108.4976 8255.0537 -8109.2759 8255.0566 -8110.0532 8255.0566 c
-8111.8081 8255.0557 -8116.3574 8257.7031 -8112.4751 8257.7178 c
-8095.1177 8257.7852 -8076.1025 8253.084 -8059.5151 8259.9492 c
-8058.1035 8260.5342 -8052.8081 8258.3369 -8054.8052 8257.5098 c
-8054.8052 8257.5098 l
f
U
U
U
%AI8_EndBrushPattern
%AI8_BeginBrushPattern
(Unnamed Brush Pat 158)0 A
u
0 J 0 j 1 w 4 M []0 d0 XR
-8114 8267.0703 m
-8102.0078 8267.0703 L
-8102.0078 8256.4336 L
-8114 8256.4336 L
-8114 8267.0703 L
n
-8113.3218 8256.4336 m
-8113.3218 8260.3828 L
-8113.3218 8261.418 L
-8113.3218 8262.0566 L
-8113.3218 8263.1553 L
-8113.3218 8267.0703 L
-8102.6865 8267.0703 L
-8102.6865 8263.1553 L
-8102.6865 8262.0566 L
-8102.6865 8261.418 L
-8102.6865 8260.3828 L
-8102.6865 8256.4336 L
-8113.3218 8256.4336 L
n
u
0 O
0.746094 0.675781 0.667969 0.898438 k
-8102.0078 8263.1553 m
-8102.0078 8262.5098 L
-8114 8262.5117 L
-8114 8263.1553 L
-8114 8263.2207 L
-8102.0078 8263.2197 L
-8102.0078 8263.1553 L
f
-8102.0078 8260.3828 m
-8114 8260.3828 L
-8114 8261.0918 L
-8102.0078 8261.0918 L
-8102.0078 8260.3828 L
f
0.15 1 0.9 0.1 k
-8102.0078 8262.1221 m
-8114 8262.1221 L
-8114 8262.5117 L
-8102.0078 8262.5098 L
-8102.0078 8262.1221 L
f
-8102.0078 8261.418 m
-8102.0078 8261.0918 L
-8114 8261.0918 L
-8114 8261.418 L
-8114 8261.4824 L
-8102.0078 8261.4824 L
-8102.0078 8261.418 L
f
0 1 1 0 k
-8102.0078 8262.0566 m
-8102.0078 8261.4824 L
-8114 8261.4824 L
-8114 8262.0566 L
-8114 8262.1221 L
-8102.0078 8262.1221 L
-8102.0078 8262.0566 L
f
U
U
%AI8_EndBrushPattern
%AI8_BeginBrushPattern
(Unnamed Brush Pat 160)0 A
u
0 J 0 j 1 w 4 M []0 d0 XR
-8114 8265.875 m
-8103.3638 8265.875 L
-8103.3638 8255.2383 L
-8114 8255.2383 L
-8114 8265.875 L
n
-8114 8255.2383 m
-8114 8259.1289 L
-8114 8259.8389 L
-8114 8260.2217 L
-8114 8260.8633 L
-8114 8261.252 L
-8114 8261.9609 L
-8114 8265.875 L
-8103.3638 8265.875 L
-8103.3638 8255.2383 L
-8114 8255.2383 L
n
u
0 O
0.746094 0.675781 0.667969 0.898438 k
-8107.9585 8267.0703 m
-8107.2515 8267.0703 L
-8107.2607 8262.0264 L
-8101.5229 8262.0254 L
-8101.5229 8261.3145 L
-8107.9707 8261.3174 L
-8107.9585 8267.0703 L
f
-8109.6055 8259.6045 m
-8109.8696 8259.8672 -8110.0215 8260.2334 -8110.0215 8260.6064 C
-8110.0073 8267.0703 L
-8109.2979 8267.0703 L
-8109.3125 8260.6064 L
-8109.3125 8260.4199 -8109.2363 8260.2383 -8109.1045 8260.1055 c
-8108.9717 8259.9736 -8108.7891 8259.8984 -8108.6021 8259.8984 C
-8101.5229 8259.8984 L
-8101.5229 8259.1885 L
-8108.6021 8259.1885 L
-8108.9761 8259.1885 -8109.3418 8259.3398 -8109.6055 8259.6045 c
f
0.15 1 0.9 0.1 k
-8108.2827 8267.0703 m
-8107.9585 8267.0703 L
-8107.9707 8261.3174 L
-8101.5229 8261.3145 L
-8101.5229 8260.9258 L
-8108.2827 8260.9258 L
-8108.2827 8267.0703 L
f
-8109.1045 8260.1055 m
-8109.2363 8260.2383 -8109.3125 8260.4199 -8109.3125 8260.6064 C
-8109.2979 8267.0703 L
-8108.9219 8267.0703 L
-8108.9219 8260.6064 L
-8108.9219 8260.5225 -8108.8877 8260.4414 -8108.8281 8260.3809 c
-8108.7695 8260.3223 -8108.6865 8260.2891 -8108.6025 8260.2891 C
-8101.5229 8260.2891 L
-8101.5229 8259.8984 L
-8108.6021 8259.8984 L
-8108.7891 8259.8984 -8108.9717 8259.9736 -8109.1045 8260.1055 c
f
0 1 1 0 k
-8108.8281 8260.3809 m
-8108.8877 8260.4414 -8108.9219 8260.5225 -8108.9219 8260.6064 C
-8108.9219 8267.0703 L
-8108.2827 8267.0703 L
-8108.2827 8260.9258 L
-8101.5229 8260.9258 L
-8101.5229 8260.2891 L
-8108.6025 8260.2891 L
-8108.6865 8260.2891 -8108.7695 8260.3223 -8108.8281 8260.3809 c
f
U
U
%AI8_EndBrushPattern
%AI8_BeginBrushPattern
(Unnamed Brush Pat 161)0 A
u
0 J 0 j 1 w 4 M []0 d0 XR
-8114 8267.0703 m
-8102.0078 8267.0703 L
-8102.0078 8256.4336 L
-8114 8256.4336 L
-8114 8267.0703 L
n
-8113.0117 8256.4336 m
-8113.0117 8260.3828 L
-8113.0117 8261.418 L
-8113.0117 8262.0566 L
-8113.0117 8263.1553 L
-8113.0117 8267.0703 L
-8102.3765 8267.0703 L
-8102.3765 8263.1553 L
-8102.3765 8262.0566 L
-8102.3765 8261.418 L
-8102.3765 8260.3828 L
-8102.3765 8256.4336 L
-8113.0117 8256.4336 L
n
0 O
0.15 1 0.9 0.1 k
-8102.0078 8262.1221 m
-8114 8262.1221 L
-8114 8262.5117 L
-8102.0078 8262.5098 L
-8102.0078 8262.1221 L
f
-8102.0078 8261.418 m
-8102.0078 8261.0918 L
-8114 8261.0918 L
-8114 8261.418 L
-8114 8261.4824 L
-8102.0078 8261.4824 L
-8102.0078 8261.418 L
f
0 1 1 0 k
-8102.0078 8262.0566 m
-8102.0078 8261.4824 L
-8114 8261.4824 L
-8114 8262.0566 L
-8114 8262.1221 L
-8102.0078 8262.1221 L
-8102.0078 8262.0566 L
f
1 Ap
0.746094 0.675781 0.667969 0.898438 k
-8112.2715 8263.2207 m
-8114 8263.2207 L
-8114 8260.3828 L
-8112.2715 8260.3828 L
-8112.2715 8263.2207 L
f
0.15 1 0.9 0.1 k
-8111.5967 8263.2041 m
-8112.4492 8263.2041 L
-8112.4492 8260.3672 L
-8111.5967 8260.3672 L
-8111.5967 8263.2041 L
f
0 Ap
0.746094 0.675781 0.667969 0.898438 k
-8102.0078 8263.1553 m
-8102.0078 8262.5098 L
-8114 8262.5117 L
-8114 8263.1553 L
-8114 8263.2207 L
-8102.0078 8263.2197 L
-8102.0078 8263.1553 L
f
-8102.0078 8260.3828 m
-8114 8260.3828 L
-8114 8261.0918 L
-8102.0078 8261.0918 L
-8102.0078 8260.3828 L
f
U
%AI8_EndBrushPattern
%AI8_BeginBrushPattern
(Unnamed Brush Pat 162)0 A
u
0 J 0 j 1 w 4 M []0 d0 XR
-8114 8267.0703 m
-8102.6099 8267.0703 L
-8102.6099 8256.4336 L
-8114 8256.4336 L
-8114 8267.0703 L
n
-8113.2461 8263.1553 m
-8113.2461 8267.0703 L
-8102.6099 8267.0703 L
-8102.6099 8256.4336 L
-8113.2461 8256.4336 L
-8113.2461 8260.3252 L
-8113.2461 8263.1553 L
n
u
0 O
0.746094 0.675781 0.667969 0.898438 k
-8107.6245 8263.0918 m
-8107.6245 8262.4473 L
-8114 8262.4473 L
-8114 8263.0918 L
-8114 8263.1553 L
-8107.6245 8263.1553 L
-8107.6245 8263.0918 L
f
-8107.6245 8260.3184 m
-8114 8260.3184 L
-8114 8261.0283 L
-8107.6245 8261.0283 L
-8107.6245 8260.3184 L
f
0.15 1 0.9 0.1 k
-8107.6245 8262.0566 m
-8114 8262.0566 L
-8114 8262.4473 L
-8107.6245 8262.4473 L
-8107.6245 8262.0566 L
f
-8107.6245 8261.3535 m
-8107.6245 8261.0283 L
-8114 8261.0283 L
-8114 8261.3535 L
-8114 8261.4189 L
-8107.6245 8261.4189 L
-8107.6245 8261.3535 L
f
0 1 1 0 k
-8107.6245 8261.9912 m
-8107.6245 8261.4189 L
-8114 8261.4189 L
-8114 8261.9912 L
-8114 8262.0566 L
-8107.6245 8262.0566 L
-8107.6245 8261.9912 L
f
U
-8113.2461 8267.0703 m
-8102.6099 8267.0703 L
-8102.6099 8256.4336 L
-8113.2461 8256.4336 L
-8113.2461 8267.0703 L
n
-8102.7241 8261.752 m
-8110.8125 8266.4219 L
N
0 O
0.746094 0.675781 0.667969 0.898438 k
-8110.4814 8261.0303 m
-8110.4814 8258.2109 L
-8104.3535 8261.748 L
-8110.4814 8265.2861 L
-8110.4814 8262.4473 L
-8110.8125 8262.4473 L
-8110.8125 8263.1553 L
-8110.8125 8266.4219 L
-8102.7241 8261.752 L
-8110.8125 8257.083 L
-8110.8125 8260.3213 L
-8110.8125 8261.0303 L
-8110.4814 8261.0303 L
f
0.15 1 0.9 0.1 k
-8110.4814 8265.2861 m
-8104.3535 8261.748 L
-8110.4814 8258.2109 L
-8110.4814 8261.0303 L
-8110.4814 8261.418 L
-8110.3472 8261.418 L
-8110.2148 8261.0459 -8109.8633 8260.7773 -8109.4453 8260.7773 c
-8108.9155 8260.7773 -8108.4849 8261.207 -8108.4849 8261.7373 c
-8108.4849 8262.2676 -8108.9155 8262.6973 -8109.4453 8262.6973 c
-8109.8633 8262.6973 -8110.2148 8262.4297 -8110.3472 8262.0566 C
-8110.4814 8262.0566 L
-8110.4814 8262.4473 L
-8110.4814 8265.2861 L
f
0 1 1 0 k
-8109.4453 8262.6973 m
-8108.9155 8262.6973 -8108.4849 8262.2676 -8108.4849 8261.7373 c
-8108.4849 8261.207 -8108.9155 8260.7773 -8109.4453 8260.7773 c
-8109.8633 8260.7773 -8110.2148 8261.0459 -8110.3472 8261.418 c
-8110.3828 8261.5176 -8110.4058 8261.624 -8110.4058 8261.7373 c
-8110.4058 8261.8496 -8110.3828 8261.9551 -8110.3472 8262.0566 c
-8110.2148 8262.4297 -8109.8633 8262.6973 -8109.4453 8262.6973 c
f
U
%AI8_EndBrushPattern
%AI8_BeginBrushPattern
(Unnamed Brush Pat 4)0 A
u
0 J 0 j 1 w 4 M []0 d0 XR
-8113.8833 8267.0254 m
-8022.0479 8267.0254 L
-8022.0479 8262.7461 L
-8113.8833 8262.7461 L
-8113.8833 8267.0254 L
n
0 O
0 0 0 1 k
-8113.6631 8264.3457 m
-8114 8264.4121 -8113.4814 8264.6016 -8113.8833 8264.459 C
-8113.8379 8264.3408 -8113.7725 8264.252 -8113.6631 8264.3457 C
f
-8023.1675 8264.5117 m
-8024.2524 8265.2744 -8025.6816 8264.5039 -8026.8701 8264.9902 C
-8027.0098 8265.0225 -8026.8345 8264.5723 -8027.1484 8264.6729 C
-8028.3008 8265.2656 -8030.1162 8264.9121 -8031.5195 8264.4551 C
-8031.4346 8264.3369 L
-8031.7017 8264.252 -8032.0283 8264.6426 -8032.3115 8264.5879 C
-8032.3135 8264.5098 -8032.2207 8264.4766 -8032.2861 8264.3691 C
-8032.3574 8264.6055 -8032.7983 8264.4785 -8032.9185 8264.6543 C
-8033.0303 8264.5625 -8033.0195 8264.375 -8033.1641 8264.2715 C
-8033.3262 8264.54 L
-8033.7769 8265.1797 -8034.4209 8264.4961 -8035.0361 8264.8262 C
-8035.0063 8264.7637 -8034.9453 8264.7148 -8034.9941 8264.6543 C
-8035.9814 8265.043 -8037.2168 8264.9707 -8038.3208 8265.1133 C
-8038.2769 8265.0186 -8038.2363 8264.8457 -8038.3008 8264.7383 C
-8038.3555 8265.0215 -8038.6963 8265.0928 -8038.9922 8265.1484 C
-8039.1255 8264.8574 -8039.4995 8265.4141 -8039.8467 8265.2539 C
-8039.8169 8265.1895 L
-8040.0732 8265.4941 -8040.1973 8265.0137 -8040.4053 8265.3789 C
-8040.5684 8265.1504 L
-8040.6807 8265.5605 -8040.9395 8264.9375 -8041.1514 8265.1465 C
-8041.1445 8265.2305 L
-8041.3442 8265.3301 -8041.4482 8265.124 -8041.6338 8265.1934 C
-8041.6514 8265.1465 L
-8042.0854 8265.2539 -8042.3379 8265.0254 -8042.3271 8265.3457 C
-8042.4795 8265.0889 -8041.9063 8265.2285 -8042.1455 8264.8555 C
-8043.5732 8265.1855 -8045.0459 8265.1211 -8046.4834 8265.127 C
-8046.6465 8264.998 -8046.7505 8264.959 -8046.7871 8264.8379 C
-8046.9307 8264.9023 -8047.3281 8264.8965 -8047.4585 8265.0605 C
-8047.4102 8265.0537 -8047.5513 8264.8965 -8047.6274 8264.8809 C
-8047.8887 8264.7598 -8047.9131 8265.2324 -8048.2002 8265.0889 C
-8048.0859 8265.0039 -8048.0469 8264.9004 -8048.0854 8264.7813 C
-8048.3301 8265.0313 -8048.6577 8264.9912 -8048.9473 8265.0723 C
-8048.9023 8265.0186 -8048.8325 8264.9863 -8048.8433 8264.8857 C
-8049.1602 8265.1689 -8049.4209 8264.8262 -8049.6982 8265.0049 C
-8049.5947 8264.8203 L
-8050.0415 8264.5957 -8049.7266 8265.207 -8050.1128 8265.0742 C
-8050.02 8265.0156 -8050.0527 8264.9434 -8050.0361 8264.8682 C
-8050.3965 8265.2041 -8050.9795 8265.0928 -8051.3389 8265.207 C
-8051.3174 8265.1816 -8051.3232 8265.1309 Y
-8051.7148 8265.1729 -8052.1245 8265.0684 -8052.5552 8265.2148 C
-8052.7119 8265.1328 -8052.5039 8264.7637 -8052.9185 8264.832 C
-8052.9033 8265.2031 -8053.6221 8264.9844 -8053.3779 8265.4043 C
-8053.7319 8265.3438 -8054.2925 8265.2041 -8054.5283 8265.3301 C
-8054.3691 8265.1895 -8054.7007 8264.877 -8054.4063 8264.8457 C
-8054.6289 8264.6201 L
-8054.5957 8264.4688 -8054.3999 8264.6719 -8054.4707 8264.4805 C
-8054.6182 8264.4961 -8055.0479 8264.6426 -8055.1797 8264.582 C
-8055.4531 8264.8096 -8055.7041 8265.2344 -8056.1465 8265.2813 C
-8055.9385 8265.1367 -8056.2646 8264.8721 -8056.1235 8264.8086 C
-8056.7407 8265.5195 L
-8056.8877 8265.5371 -8056.7725 8265.2266 -8056.9854 8265.3232 C
-8056.9746 8265.4219 -8057.0674 8265.4824 -8057.1318 8265.5625 C
-8057.1875 8265.5195 -8057.7441 8265.6543 -8057.8081 8265.2891 C
-8057.8735 8265.1465 -8057.5684 8265.2129 -8057.7314 8265.082 C
-8058.0029 8265.0859 -8058.0151 8265.2109 -8058.2871 8265.2168 C
-8058.2925 8265.168 L
-8058.4717 8265.1133 -8058.8213 8265.3232 -8058.6265 8265.5254 C
-8058.5015 8265.5371 -8058.6738 8265.3057 -8058.4888 8265.4121 C
-8058.6152 8265.624 -8058.9312 8265.6836 -8059.2031 8265.6875 C
-8059.1104 8265.6289 -8059.1216 8265.5313 -8059.0845 8265.4277 C
-8059.4497 8265.7148 -8059.8369 8265.8057 -8060.2451 8265.9258 C
-8060.2515 8266.0996 -8060.0928 8265.6094 -8060.0327 8265.7012 C
-8060.5557 8265.46 -8061.1128 8266.043 -8061.5479 8265.6904 C
-8061.4766 8265.6602 -8061.5098 8265.9375 -8061.5146 8265.8887 C
-8061.7666 8265.8672 -8061.7549 8265.6152 -8061.9189 8265.708 C
-8061.9355 8265.5605 -8062.1255 8265.7559 -8062.2944 8265.8008 C
-8062.3818 8265.9072 -8062.3384 8265.7285 -8062.1914 8265.7129 C
-8062.4268 8265.8379 -8063.3691 8266.0645 -8063.9131 8265.8496 C
-8063.9023 8265.9473 -8064.2471 8266.208 -8064.3721 8266.1973 C
-8064.3232 8265.9688 L
-8064.4375 8265.832 -8064.7422 8265.9883 -8064.7632 8265.793 C
-8065.0303 8266.0703 -8063.7344 8265.5566 -8064.0957 8265.7705 C
-8064.1895 8265.5801 -8064.5991 8266.1348 -8064.5215 8265.8232 C
-8064.7725 8265.832 -8065.0161 8266.0889 -8065.2559 8265.875 C
-8065.1865 8265.9121 -8065.0522 8265.5576 -8065.2549 8265.5742 C
-8065.6123 8265.6152 -8065.3564 8265.6836 -8065.6465 8265.7598 C
-8065.8281 8265.8535 L
-8065.8398 8266.0762 -8066.1475 8265.8232 -8066.0146 8266.0723 C
-8066.0586 8265.8887 -8066.5337 8266.1855 -8066.4971 8265.8164 C
-8066.4473 8265.5254 L
-8066.6016 8265.5469 -8066.7002 8265.832 -8066.8213 8265.96 C
-8066.8418 8265.9336 -8066.8823 8265.875 -8066.8745 8265.8281 C
-8066.8994 8266.2734 -8067.2432 8265.791 -8067.4268 8266.1348 C
-8067.7505 8265.9805 -8068.2495 8266.1211 -8068.4023 8265.8438 C
-8068.6514 8265.9785 -8068.8784 8266.1387 -8069.1621 8266.043 C
-8069.1055 8266.001 -8069.0283 8265.9883 -8069.0122 8265.8926 C
-8069.1904 8265.7617 -8069.2344 8265.8789 -8069.3975 8265.9512 C
-8069.3608 8265.8848 -8069.7539 8265.6904 -8069.9521 8265.5332 C
-8070.1992 8265.666 -8070.1143 8265.9063 -8070.1392 8266.0527 C
-8070.3652 8265.6133 -8070.8379 8266.3359 -8071.1211 8265.9375 C
-8071.0352 8265.877 -8070.7598 8265.7217 -8070.9658 8265.6113 C
-8071.1919 8265.1729 -8071.4219 8265.9355 -8071.7861 8265.7246 C
-8071.6968 8266.0889 L
-8071.8594 8265.8633 -8072.2334 8266.3008 -8072.1963 8265.9297 C
-8072.3184 8266.0605 -8072.6265 8265.8086 -8072.5859 8266.1641 C
-8073.1846 8265.8633 -8074.0425 8266.3457 -8074.4102 8265.708 C
-8074.4961 8265.7676 -8074.7104 8265.707 -8074.6665 8265.8896 C
-8074.5239 8266.0879 -8074.4673 8265.748 -8074.4141 8265.8828 C
-8074.4912 8265.8936 -8074.5078 8265.9912 -8074.5161 8266.04 C
-8074.7021 8265.959 -8074.8486 8265.9336 -8074.6729 8265.6377 C
-8075.0869 8265.418 -8075.1001 8266.2422 -8075.6274 8266.1035 C
-8075.6035 8265.9561 -8075.6436 8265.9004 -8075.7979 8265.9238 C
-8076.0903 8266.1758 L
-8076.4312 8266.1172 -8076.2842 8265.8408 -8076.2925 8265.5918 C
-8076.4746 8265.6348 -8076.6973 8265.623 -8076.7803 8265.8086 C
-8077.0015 8265.4961 L
-8076.8398 8265.7217 -8077.1514 8265.6465 -8077.2368 8265.707 C
-8077.1514 8265.6465 L
-8077.1846 8265.54 -8077.3955 8265.6055 -8077.5024 8265.6367 C
-8077.4766 8265.791 -8077.2617 8265.8535 -8077.1445 8265.8984 C
-8077.2373 8266.0078 -8077.3823 8265.9824 -8077.5059 8266.1113 C
-8077.4648 8265.8672 -8077.8027 8265.9375 -8077.9473 8265.9121 C
-8078.1133 8265.8594 -8078.1348 8266.1309 -8078.1831 8266.123 C
-8078.1875 8265.9961 -8078.4541 8266.1016 -8078.3247 8265.9238 C
-8078.2681 8265.8828 -8078.1953 8266.0469 -8078.1016 8265.9355 C
-8078.2109 8265.8408 -8078.1982 8265.6201 -8078.4258 8265.7813 C
-8078.5967 8265.9023 -8078.3818 8266.2637 -8078.7061 8266.1094 C
-8078.6211 8266.0488 -8078.6055 8265.9512 -8078.5391 8265.8633 C
-8078.8433 8265.7363 L
-8078.8564 8265.959 L
-8078.8975 8265.9023 -8078.8691 8265.8828 -8078.8877 8265.8535 C
-8078.9785 8266.0879 -8079.3521 8265.9258 -8079.4209 8266.1895 C
-8079.5742 8266.2129 -8079.7441 8266.0352 -8079.8906 8266.0098 C
-8079.8623 8265.9902 L
-8080.0415 8265.8594 -8080.2793 8265.9453 -8080.4297 8266.0957 C
-8080.4219 8266.0469 L
-8080.5195 8266.0293 -8080.7505 8266.0645 -8080.8735 8266.1953 C
-8081.1201 8266.0273 -8080.9561 8265.3545 -8081.2295 8265.6348 C
-8081.48 8265.6426 -8081.6221 8266.043 -8081.5215 8266.1855 C
-8081.9717 8266.0352 -8082.4834 8266.3984 -8082.9009 8266.0527 C
-8082.9658 8266.1426 -8082.9248 8266.1992 -8083.0586 8266.252 C
-8083.7197 8266.1641 -8084.4551 8266.5156 -8084.9814 8266.0781 C
-8084.79 8265.9844 -8084.9688 8265.8555 -8084.9727 8265.7285 C
-8085.1309 8265.9277 -8085.1631 8265.5215 -8085.2197 8265.8633 C
-8085.2041 8266.0645 -8085.2197 8266.1621 -8085.0337 8266.2432 C
-8085.4282 8266.3516 -8086.0283 8266.3516 -8086.2471 8266.1641 C
-8086.1377 8266.2568 -8086.2227 8266.3184 -8086.3086 8266.3789 C
-8086.2803 8266.0576 -8086.5713 8266.0098 -8086.7915 8266.123 C
-8086.8223 8266.3184 L
-8086.9658 8266.1172 L
-8087.0503 8266.1797 -8087.0591 8266.5273 -8087.2773 8266.3398 C
-8087.2891 8266.2637 -8087.3018 8266.1865 -8087.3418 8266.1309 C
-8087.5693 8266.291 -8087.8906 8266.5625 -8088.1377 8266.3965 C
-8088.3398 8266.1113 L
-8088.4453 8266.1426 -8088.6235 8266.3145 -8088.4375 8266.3965 C
-8088.8594 8266.2246 -8089.1309 8266.2031 -8089.2646 8265.9561 C
-8089.9912 8266.5576 -8091.0459 8266.582 -8091.8906 8266.5391 C
-8091.8652 8266.3926 L
-8092.0923 8266.2559 -8091.9834 8266.6484 -8092.1416 8266.5469 C
-8092.0684 8266.4072 -8092.3145 8266.2432 -8092.1362 8266.0723 C
-8092.4609 8265.918 -8092.5547 8266.3262 -8092.7656 8266.3926 C
-8092.7979 8266.585 -8092.5957 8266.2695 -8092.6367 8266.5137 C
-8092.6729 8266.582 -8093.0859 8266.3633 -8093.1362 8266.6543 C
-8093.2178 8266.54 -8093.1543 8266.3262 -8093.1104 8266.208 C
-8093.3086 8266.3496 L
-8093.5513 8266.0098 -8092.7559 8265.7422 -8093.0107 8265.3232 C
-8093.1934 8265.3691 L
-8093.3682 8265.0645 -8092.71 8265.0254 -8093.1689 8264.9209 C
-8093.3682 8265.0645 -8093.5381 8265.4863 -8093.3608 8265.6152 C
-8093.7754 8265.6953 -8093.5527 8266.3086 -8093.9985 8266.2842 C
-8094.1201 8266.1133 -8093.6416 8266.2432 -8093.7275 8266.0039 C
-8093.9375 8265.7695 -8094.1484 8266.1348 -8094.3354 8266.0527 C
-8094.1279 8266.1621 -8094.3032 8266.4561 -8094.4375 8266.5098 C
-8094.6641 8266.3721 -8094.29 8266.2344 -8094.6113 8266.2041 C
-8094.6641 8266.3721 -8094.9595 8266.498 -8094.7041 8266.6152 C
-8094.8203 8266.9961 -8095.0381 8266.5098 -8095.2129 8266.8047 C
-8095.3174 8266.5371 -8094.8823 8266.1855 -8095.2354 8266.0518 C
-8095.1792 8266.3096 -8095.6704 8266.4023 -8095.4839 8266.7852 C
-8095.6221 8266.7109 -8095.6367 8266.5078 -8095.5361 8266.3496 C
-8095.7334 8266.1904 -8096.0151 8266.8203 -8096.0801 8266.3086 C
-8096.1479 8266.5723 L
-8096.21 8266.4863 -8096.2983 8266.4219 -8096.3994 8266.2793 C
-8096.5732 8266.2744 -8096.96 8266.6367 -8096.9443 8266.2383 C
-8097 8266.2793 -8097.3975 8266.2617 -8097.2441 8266.5371 C
-8096.9971 8266.7051 -8096.96 8266.3359 -8096.8223 8266.708 C
-8096.9971 8266.4043 -8097.1787 8266.748 -8097.3213 8266.8496 C
-8097.3447 8266.6953 L
-8097.4297 8266.7559 -8097.6255 8266.7217 -8097.6787 8266.8887 C
-8097.6133 8266.8008 -8097.6475 8266.6953 -8097.7148 8266.6582 C
-8097.8042 8266.8926 L
-8098.1494 8267.0098 -8097.8857 8266.4805 -8098.2217 8266.5488 C
-8097.9663 8266.3672 L
-8098.0225 8266.4063 -8098.1367 8266.1865 -8098.2979 8266.2598 C
-8098.3604 8266.4736 -8098.4775 8266.7305 -8098.5313 8266.8965 C
-8098.7207 8266.9902 -8098.6162 8266.6553 -8098.8027 8266.875 C
-8098.5586 8266.6172 L
-8098.5215 8266.5469 -8098.7231 8266.2637 -8098.9761 8266.2695 C
-8099.1377 8266.3438 -8099.3887 8266.6523 -8099.1338 8266.7695 C
-8099.2607 8266.7734 -8099.4385 8266.6426 -8099.3379 8266.4863 C
-8099.6255 8266.5605 -8099.2998 8266.7168 -8099.5479 8266.8496 C
-8099.6494 8266.707 -8099.9658 8266.5039 -8100.1563 8266.2969 C
-8099.8975 8265.9385 L
-8100.0693 8265.9355 L
-8099.8467 8265.6484 -8100.1826 8265.7168 -8100.0566 8265.4141 C
-8100.1743 8265.3672 -8100.3169 8265.4697 -8100.4307 8265.5488 C
-8100.0864 8266.0332 -8100.8159 8266.2109 -8100.7158 8266.6523 C
-8101.1875 8266.7734 -8101.0107 8265.5781 -8101.5024 8266.2695 C
-8101.4219 8266.3848 -8101.6533 8266.7207 -8101.3564 8266.5928 C
-8101.6494 8266.5449 -8101.5557 8267.0361 -8101.9014 8266.8535 C
-8101.6455 8266.6719 -8102.1763 8266.4063 -8101.8066 8266.1426 C
-8101.8311 8266.2891 -8101.6001 8266.2539 -8101.5435 8266.2129 C
-8101.6641 8266.043 -8101.5186 8265.7676 -8101.8184 8265.7676 C
-8102.0015 8265.8096 -8102.2524 8265.8184 -8102.2158 8266.0488 C
-8102.2085 8266.3018 -8101.9365 8266.0215 -8102.0537 8266.2773 C
-8102.4185 8266.3652 -8102.4795 8265.9805 -8102.6304 8266.4297 C
-8102.3999 8266.3936 -8102.3423 8266.6543 -8102.3467 8266.8281 C
-8102.6143 8266.9336 L
-8102.5625 8266.7656 L
-8102.9922 8266.6445 -8102.6895 8267.0703 -8103.1055 8267.0254 C
-8103.3008 8266.6934 L
-8103.2017 8266.4072 -8102.6953 8266.8203 -8102.7695 8266.3545 C
-8103.04 8266.3359 -8103.1299 8266.5723 -8103.3848 8266.4521 C
-8103.3281 8266.4121 -8103.2505 8266.4004 -8103.1943 8266.3594 C
-8103.2915 8266.3438 -8103.3877 8265.7266 -8103.7734 8266.0879 C
-8103.9727 8266.2285 -8103.8262 8266.2539 -8103.8311 8266.4277 C
-8104.2656 8266.4805 -8104.3955 8266.6582 -8104.6753 8266.6855 C
-8104.6177 8266.3457 -8105.1699 8266.6523 -8104.8608 8266.3047 C
-8104.7188 8266.5039 -8104.0903 8266.4844 -8103.9365 8266.1602 C
-8104.0947 8265.7568 -8103.5952 8266.2168 -8103.5024 8265.8086 C
-8103.8506 8265.7988 -8103.8335 8265.4023 -8103.8896 8265.1426 C
-8103.9863 8265.124 -8104.0801 8265.2344 -8104.1377 8265.2744 C
-8104.1787 8265.5195 -8104.0522 8265.5156 -8104.0449 8265.7676 C
-8104.4336 8265.7012 -8104.8081 8265.8379 -8105.0225 8266.0762 C
-8105.1523 8265.9551 -8105.1113 8265.7109 -8104.9575 8265.6875 C
-8105.4199 8265.7598 -8105.9141 8265.7266 -8106.3535 8265.6523 C
-8106.0693 8266.0518 -8106.8433 8265.7461 -8106.6494 8266.0781 C
-8106.4141 8266.168 -8106.2119 8266.4521 -8106.3418 8266.6309 C
-8106.4888 8266.6055 -8106.3369 8266.4561 -8106.3984 8266.3711 C
-8106.5859 8266.5889 -8106.6895 8266.0215 -8106.8735 8266.3652 C
-8106.4512 8266.2363 -8106.7915 8265.8789 -8106.7139 8265.5664 C
-8107.0186 8265.7422 -8106.7007 8265.3438 -8107.0024 8265.3438 C
-8107.3057 8265.5176 -8107.6787 8265.6543 -8108.0161 8265.7217 C
-8108.4399 8265.4258 -8109.0898 8265.7168 -8109.4683 8265.7285 C
-8109.6665 8265.5703 -8109.5322 8265.2168 -8109.7471 8265.1553 C
-8109.9995 8265.1621 -8109.5601 8265.5371 -8109.9336 8265.375 C
-8109.8975 8265.3047 L
-8110.0107 8265.3867 -8110.5825 8265.0645 -8110.6929 8265.5723 C
-8110.5776 8265.1895 L
-8110.6475 8265.1543 -8110.7119 8265.2422 -8110.7695 8265.2832 C
-8110.7725 8265.1582 -8110.8535 8265.0449 -8110.7402 8264.9629 C
-8110.9707 8264.6992 -8111.2241 8265.0049 -8111.4746 8265.0156 C
-8111.3135 8265.2422 L
-8111.7422 8265.4199 -8112.0293 8265.1953 -8112.4443 8265.2744 C
-8112.4316 8265.0527 L
-8112.6787 8265.1855 L
-8112.6182 8264.9707 -8112.8447 8264.832 -8112.9751 8265.0117 C
-8112.3335 8264.4688 L
-8112.1553 8264.5996 -8112.5283 8264.7363 -8112.4165 8264.9551 C
-8112.3213 8265.1465 -8111.9375 8265.0859 -8111.8755 8264.8721 C
-8112.0225 8264.8477 -8112.0293 8264.8965 -8112.1436 8264.9766 C
-8112.1919 8264.668 -8111.9688 8264.6797 -8111.8584 8264.4736 C
-8111.9355 8264.4863 -8112.0449 8264.3926 -8112.0615 8264.4902 C
-8111.9102 8264.3398 -8111.7578 8264.3164 -8111.5059 8264.3086 C
-8111.6763 8264.4297 -8111.4131 8264.5 -8111.4775 8264.5879 C
-8111.4575 8264.3164 -8111.2168 8264.2324 -8110.9053 8264.3086 C
-8110.6831 8264.623 -8110.3208 8264.1064 -8109.96 8264.1934 C
-8110.1064 8264.4688 -8110.2935 8264.6895 -8110.5127 8264.8008 C
-8110.2861 8264.9385 -8110.2607 8264.793 -8110.0337 8264.9316 C
-8109.9238 8264.7266 -8109.8457 8264.4121 -8109.5503 8264.2871 C
-8109.5342 8264.4902 L
-8109.2666 8264.3867 -8109.2666 8264.0859 -8108.9258 8264.1426 C
-8108.3418 8264.2422 -8107.7407 8264.2422 -8107.2949 8264.2676 C
-8107.2783 8264.4697 L
-8107.0303 8264.0361 -8106.4521 8264.3096 -8106.1182 8264.1172 C
-8105.5503 8264.3125 -8104.8848 8263.9238 -8104.5938 8264.2734 C
-8103.5913 8264.1172 -8102.7148 8263.9648 -8101.6768 8264.0391 C
-8101.8516 8264.334 L
-8101.6655 8264.1172 -8101.7305 8264.5039 -8101.5479 8264.46 C
-8101.7578 8264.2246 -8101.2949 8264.1543 -8101.1665 8263.9736 C
-8100.7041 8264.2031 -8100.1104 8263.9531 -8099.7007 8263.7461 C
-8099.6846 8263.9492 L
-8099.2705 8263.5684 -8098.7759 8263.9023 -8098.2598 8263.9648 C
-8098.2007 8264.0488 -8098.1074 8264.2393 -8097.9536 8264.2168 C
-8097.6738 8263.8887 -8097.5273 8263.9121 -8097.1167 8263.707 C
-8096.8169 8263.707 -8096.3301 8263.7881 -8096.0254 8263.916 C
-8094.8975 8263.4551 -8093.7456 8263.75 -8092.5732 8263.4727 C
-8092.4888 8263.7109 L
-8091.3521 8263.2012 -8089.9541 8263.6641 -8088.9839 8263.4023 C
-8089.0776 8263.8096 L
-8088.7734 8263.9355 -8088.3843 8263.7031 -8088.4619 8263.4141 C
-8088.1567 8263.5391 -8087.7007 8263.2168 -8087.5068 8263.5518 C
-8087.1953 8263.627 -8087.1255 8263.3633 -8086.8662 8263.3086 C
-8086.2422 8263.4629 -8086.0107 8263.4277 -8085.4224 8263.3516 C
-8085.5684 8263.3262 L
-8085.6328 8263.416 -8085.6387 8263.5889 -8085.4922 8263.6152 C
-8085.2725 8263.502 -8084.6846 8263.7246 -8084.9033 8263.2383 C
-8084.2754 8263.5195 -8083.4385 8263.0098 -8082.8271 8263.3887 C
-8082.8789 8263.2559 -8082.7246 8263.2305 -8082.6602 8263.1406 C
-8082.1089 8263.1348 -8081.5293 8263.4063 -8081.0898 8263.1797 C
-8081.0024 8263.2461 -8081.2295 8263.4063 -8081.0049 8263.4199 C
-8080.8721 8263.3691 -8081.0024 8263.2461 -8080.8384 8263.1719 C
-8079.9453 8262.9238 -8079.0303 8263.4277 -8078.2188 8263.3633 C
-8076.7754 8263.1064 -8075.2695 8263.2363 -8073.8867 8263.1934 C
-8073.9023 8263.291 L
-8073.4395 8262.918 -8072.8159 8263.6729 -8072.4463 8263.1113 C
-8072.3369 8263.2041 -8072.0283 8263.1553 -8072.1094 8263.3438 C
-8071.7407 8263.0801 -8071.0771 8263.5918 -8070.5439 8263.2568 C
-8070.5928 8263.248 -8070.6211 8263.2676 -8070.6777 8263.3096 C
-8070.1392 8263.5254 -8069.6641 8263.2305 -8069.0957 8263.4258 C
-8069.1533 8263.4678 -8069.2583 8263.498 -8069.2754 8263.5957 C
-8069.0557 8263.7832 -8068.7549 8263.1836 -8068.6348 8263.6543 C
-8068.5088 8263.6504 -8068.5449 8263.418 -8068.6221 8263.4316 C
-8067.3779 8263.6152 -8066.0498 8263.3145 -8064.7549 8263.207 C
-8063.8271 8263.4883 -8064.6982 8264 -8063.9663 8263.6484 C
-8063.9063 8263.7393 -8063.9229 8263.4688 -8063.9131 8263.5664 C
-8063.6299 8263.4346 -8063.4717 8264.0918 -8063.2754 8263.8457 C
-8063.3564 8263.5566 -8063.1445 8263.6836 -8063.1387 8263.5078 C
-8062.5713 8263.6953 -8062.4575 8263.9561 -8062.0098 8263.7363 C
-8062.0435 8263.8887 L
-8061.5186 8263.459 -8060.9102 8263.6895 -8060.4673 8263.1934 C
-8057.5728 8263.1035 -8054.7983 8262.8281 -8051.9761 8262.7705 C
-8049.1865 8262.8652 -8046.4551 8262.6426 -8043.6221 8262.9063 C
-8042.9585 8263.3057 -8042.9087 8263.2949 -8042.1797 8263.1328 C
-8042.2095 8263.1973 -8042.2549 8263.2129 -8042.2061 8263.2734 C
-8042.1699 8262.9453 -8041.6929 8263.2422 -8041.6235 8262.9297 C
-8040.5762 8262.9902 -8039.6113 8262.9004 -8038.5337 8262.8984 C
-8038.7041 8262.9336 -8038.7896 8263.2012 -8038.5869 8263.1797 C
-8038.3755 8262.9707 L
-8038.3408 8263.0625 L
-8038.2021 8263.0137 -8038.0513 8262.8516 -8038.1943 8262.7461 C
-8035.4873 8262.4629 -8032.8242 8263.1211 -8030.1729 8263.04 C
-8029.5435 8263.1768 -8028.6475 8263.0518 -8027.9629 8262.9844 C
-8025.9355 8263.4219 -8024.1079 8263.7744 -8022.0479 8263.4688 C
-8022.3169 8264.3164 -8023.1675 8264.5117 V
f
-8113.2578 8264.3125 m
-8113.1855 8264.4766 -8112.9497 8264.5664 -8113.1377 8264.7852 C
-8113.1611 8264.6309 -8113.2822 8264.459 -8113.2578 8264.3125 C
f
-8106.9619 8266 m
-8106.9536 8265.9512 -8106.8721 8266.0664 -8106.8521 8266.0928 C
-8106.9297 8266.1055 -8107.0024 8266.2432 -8107.0645 8266.1582 C
-8106.9854 8266.1465 -8106.9976 8266.0684 -8106.9619 8266 C
f
-8105.3521 8266.0977 m
-8105.3765 8266.2432 -8105.7207 8266.3594 -8105.9238 8266.377 C
-8105.3521 8266.0977 L
f
-8103.8521 8266.6992 m
-8103.7227 8266.8223 -8103.7583 8266.8896 -8103.9326 8266.8857 C
-8103.9453 8266.8086 -8103.8877 8266.7695 -8103.8521 8266.6992 C
f
-8103.7456 8266.3672 m
-8103.6211 8266.3633 -8103.5591 8266.4492 -8103.4985 8266.5332 C
-8103.5029 8266.4072 -8103.7871 8266.6113 -8103.7456 8266.3672 C
f
-8100.4893 8266.791 m
-8100.4111 8266.7793 -8100.2417 8266.6582 -8100.1689 8266.8203 C
-8100.2505 8266.707 -8100.5498 8267.0049 -8100.4893 8266.791 C
f
-8098.9761 8266.5703 m
-8098.9272 8266.5801 -8098.9072 8266.6064 -8098.8506 8266.5664 C
-8098.7607 8266.6328 -8098.8555 8266.7393 -8098.9312 8266.7529 C
-8098.9761 8266.5703 L
f
-8071.4287 8265.9844 m
-8071.5923 8266.0566 L
-8071.5684 8265.9121 L
-8071.4287 8265.9844 L
f
-8059.3574 8265.9766 m
-8059.1943 8265.8848 -8059.2441 8266.1133 -8059.2168 8266.1348 C
-8059.3643 8266.1504 -8059.1621 8265.9551 -8059.3574 8265.9766 C
f
-8052.8486 8265.248 m
-8052.8984 8265.252 L
-8052.8818 8264.9531 L
-8052.8486 8265.248 L
f
U
%AI8_EndBrushPattern
%AI8_BeginBrushPattern
(Unnamed Brush Pat 55)0 A
u
1 Ap
0 J 0 j 1 w 4 M []0 d0 XR
-8087.9727 8267.0703 m
-8087.9727 8241.042 L
-8114 8241.042 L
-8114 8267.0703 L
-8087.9727 8267.0703 L
n
0 Ap
0 R
0.7084 0.636438 0.515526 0.381872 K
1.125 w-8114 8249.7168 m
-8087.9727 8249.7168 l
S
0.64 0.650477 0.701045 0.510735 K
-8114 8258.3945 m
-8087.9727 8258.3945 l
S
0.597742 0.537865 0.64184 0.350469 K
0.375 w-8114 8254.0557 m
-8087.9727 8254.0557 l
S
0 O
0.597742 0.537865 0.64184 0.350469 k
1 w-8092.5742 8254.082 m
-8092.3442 8253.8105 -8092.6914 8253.5244 -8093 8253.3135 c
-8093.1118 8253.2363 -8093.5215 8253.4492 -8093.7466 8253.2832 c
-8094.0439 8253.0654 -8094.1826 8252.9785 -8094.4824 8252.9844 c
-8094.6455 8252.9883 -8095.0435 8253.1182 -8095.1895 8253.1484 c
-8095.5679 8253.2246 -8095.8022 8253.4219 -8096.3672 8253.3252 c
-8096.7344 8253.2617 -8096.8286 8253.1709 -8096.9233 8253.2188 c
-8097.1118 8253.3604 -8097.2202 8253.584 -8097.4258 8253.6328 c
-8097.9575 8253.7598 -8098.3535 8253.8037 -8098.8818 8253.793 c
-8099.3047 8253.7832 -8100.4185 8253.8516 -8101.2866 8253.752 c
-8101.6226 8253.7119 -8101.6025 8253.2871 -8101.7695 8253.2832 c
-8101.8618 8253.2813 -8101.7646 8253.5967 -8101.8306 8253.6172 c
-8102.1694 8253.7236 -8102.4702 8252.5732 -8102.6943 8252.6426 c
-8102.8047 8252.6777 -8102.5562 8253.2236 -8102.6729 8253.252 c
-8102.8975 8253.3076 -8103.2178 8252.2891 -8103.4321 8252.3516 c
-8103.5635 8252.3887 -8103.2886 8252.8086 -8103.4375 8252.877 c
-8103.6655 8252.9814 -8103.9087 8252.1055 -8104.1064 8252.2041 C
-8104.1543 8252.252 -8103.7295 8253.0078 -8104.1685 8252.9492 c
-8104.2871 8252.9316 -8104.5054 8252.3838 -8104.5801 8252.4102 c
-8104.6919 8252.4502 -8104.3535 8252.8721 -8104.4897 8252.998 C
-8104.7681 8253.2246 -8105.3711 8252.2334 -8105.4575 8252.3047 c
-8105.5791 8252.4063 -8105.1279 8253.168 -8105.2695 8253.2363 C
-8105.4497 8253.5 -8106.0142 8252.623 -8106.0889 8252.6719 c
-8106.1777 8252.7305 -8105.9058 8253.1084 -8105.8799 8253.3037 c
-8105.8545 8253.498 -8105.9966 8253.6318 -8106.2144 8253.5801 c
-8106.4736 8253.5176 -8106.8696 8252.7119 -8106.9727 8252.8057 C
-8107.0791 8252.8613 -8106.8682 8253.1484 -8106.7954 8253.3828 c
-8106.7583 8253.498 -8106.8882 8253.6719 -8107.0298 8253.6719 c
-8107.3135 8253.7197 -8107.6255 8253.0684 -8107.7065 8253.1729 c
-8107.7524 8253.2324 -8107.5898 8253.5605 -8107.7295 8253.6582 c
-8107.8994 8253.7764 -8108.3115 8253.3086 -8108.4521 8253.3633 C
-8108.5361 8253.4121 -8108.4126 8253.667 -8108.4927 8253.7236 c
-8108.7295 8253.8896 -8109.0039 8253.4912 -8109.0513 8253.5391 C
-8109.1167 8253.5615 -8109.1201 8253.6064 -8109.2793 8253.7109 c
-8109.4736 8253.8379 -8109.5254 8253.9189 -8109.5425 8254.0352 c
-8109.5654 8254.1533 -8109.3135 8254.4453 -8109.1655 8254.4199 c
-8108.8223 8254.3604 -8108.8662 8254.9199 -8108.6328 8254.7861 c
-8108.5679 8254.75 -8108.6592 8254.3291 -8108.4199 8254.3359 c
-8108.0488 8254.3486 -8107.9858 8254.8916 -8107.7817 8254.8809 c
-8107.6406 8254.874 -8107.8521 8254.2539 -8107.6328 8254.3311 c
-8107.4751 8254.3867 -8107.0063 8255.3721 -8106.9795 8255.2803 c
-8106.8975 8255.0127 -8107.0703 8254.4688 -8106.9409 8254.4785 c
-8106.7568 8254.4932 -8106.5078 8255.3877 -8106.2544 8255.5078 c
-8106.1826 8255.543 -8106.3774 8254.6709 -8106.1958 8254.667 C
-8106.0898 8254.7168 -8105.7578 8255.5195 -8105.6274 8255.5684 C
-8105.5591 8255.5527 -8105.5879 8255.1953 -8105.5176 8255.1748 c
-8105.4688 8255.1602 -8105.2817 8255.6357 -8105.21 8255.5938 c
-8105.1055 8255.5332 -8105.2471 8255.0625 -8105.0889 8254.9932 c
-8104.9175 8254.9189 -8104.4878 8255.9629 -8104.3486 8255.8682 c
-8104.2769 8255.8203 -8104.3574 8255.2803 -8104.21 8255.3164 c
-8104.0718 8255.3486 -8103.9414 8255.6846 -8103.8081 8255.7129 c
-8103.7295 8255.7285 -8103.7935 8255.2617 -8103.7495 8255.2441 c
-8103.5889 8255.1855 -8103.2329 8255.7422 -8103.0688 8255.5938 c
-8102.8584 8255.4053 -8102.9395 8255.04 -8102.8345 8255.0527 c
-8102.6274 8255.0762 -8102.4912 8255.3135 -8102.4146 8255.2539 c
-8102.2642 8255.1387 -8102.3281 8254.8496 -8102.0527 8254.7627 c
-8101.8975 8254.7129 -8101.7935 8255.0049 -8101.7495 8255.001 c
-8101.6738 8254.998 -8101.6782 8254.9004 -8101.6665 8254.7949 c
-8101.6328 8254.5313 -8101.6064 8254.4697 -8101.4878 8254.4473 c
-8101.0854 8254.4238 -8100.5625 8254.3545 -8100.1807 8254.3457 c
-8099.6274 8254.3311 -8098.2607 8254.3076 -8098.1182 8254.3076 c
-8098 8254.2832 -8097.7432 8254.4648 -8097.6689 8254.5313 c
-8097.4678 8254.7158 -8097.2998 8254.9297 -8096.9858 8255.1904 c
-8096.8906 8255.2715 -8096.8081 8255.251 -8096.7378 8255.2266 c
-8096.5249 8255.1553 -8096.4585 8255.1035 -8096.2202 8255.0723 c
-8095.9175 8255.0293 -8095.4272 8255.1191 -8095.1245 8255.2129 c
-8094.6035 8255.3721 -8094.5264 8255.3945 -8094.0977 8255.3457 c
-8093.6992 8255.2998 -8093.0586 8255.2285 -8093.0479 8254.8809 c
-8093.0415 8254.666 -8092.9414 8254.5137 -8092.5742 8254.082 c
f
U
%AI8_EndBrushPattern
%AI8_BeginBrushPattern
(Unnamed Brush Pat 56)0 A
u
1 Ap
0 J 0 j 1 w 4 M []0 d0 XR
-8087.9722 8267.0703 m
-8087.9722 8241.043 L
-8114 8241.043 L
-8114 8267.0703 L
-8087.9722 8267.0703 L
n
0 Ap
0 R
0.597742 0.537865 0.64184 0.350469 K
0.375 w-8096.6455 8254.0596 m
-8087.9736 8254.0596 l
S
-8100.9839 8267.0703 m
-8100.9839 8258.3945 l
S
0.7084 0.636438 0.515526 0.381872 K
1.125 w-8096.7202 8249.7207 m
-8087.9727 8249.7207 l
S
-8105.3232 8267.0693 m
-8105.3232 8257.7158 l
S
0.64 0.650477 0.701045 0.510735 K
-8096.6504 8267.0693 m
-8096.6504 8264.6572 l
-8093.9937 8264.4336 -8092.3096 8262.7305 v
-8090.6064 8261.0039 -8090.3774 8258.3984 y
-8087.9727 8258.3984 l
S
*u
1 D
0 O
0.7084 0.636438 0.515526 0.381872 k
1 w-8104.8418 8251.2559 m
-8104.8418 8251.3203 -8104.8218 8251.3613 -8104.7783 8251.3613 c
-8104.6943 8251.3613 -8104.4634 8251.0244 -8104.3994 8251.0244 c
-8104.3154 8251.0244 -8104.2729 8251.0664 -8104.2729 8251.1719 c
-8104.2729 8251.2559 -8104.5264 8252.1631 y
-8104.5264 8252.2041 -8104.5264 8252.2041 -8104.5049 8252.2041 c
-8104.4414 8252.2041 -8104.0615 8251.6572 -8103.9351 8251.6572 c
-8103.9146 8251.6572 -8103.8936 8251.6777 -8103.8936 8251.6992 c
-8104.1675 8252.6055 -8104.1675 8252.7959 v
-8104.1675 8252.8594 -8104.1675 8252.8809 -8104.1465 8252.8809 c
-8104.1055 8252.8809 -8103.6826 8252.3105 -8103.5562 8252.3105 c
-8103.5352 8252.3105 -8103.5137 8252.3311 -8103.5137 8252.3525 c
-8103.5137 8252.416 -8103.7666 8253.1543 -8103.7666 8253.3223 c
-8103.7666 8253.3652 -8103.7666 8253.3652 -8103.7446 8253.3652 c
-8103.6826 8253.3652 -8103.4722 8253.1543 -8103.4297 8253.1543 c
-8103.4082 8253.1543 -8103.3882 8253.1758 -8103.3882 8253.1963 c
-8103.3882 8253.2168 -8103.4927 8253.5762 -8103.4927 8253.6602 c
-8103.4927 8253.6816 -8103.4927 8253.6816 -8103.4722 8253.6816 c
-8103.4297 8253.6816 -8103.0918 8253.3223 -8103.0078 8253.3223 c
-8102.9658 8253.3223 -8102.9233 8253.3652 -8102.9233 8253.4492 c
-8102.9233 8253.5977 -8103.1138 8254.3145 -8103.1138 8254.3564 c
-8103.1138 8254.4404 -8103.0918 8254.4824 -8103.0498 8254.4824 c
-8102.9658 8254.4824 -8102.7119 8254.166 -8102.6494 8254.166 c
-8102.5854 8254.166 -8102.5439 8254.1865 -8102.5439 8254.251 c
-8102.5854 8254.6719 L
-8102.5854 8254.7363 -8102.5854 8254.7559 -8102.5654 8254.7559 c
-8102.5225 8254.7559 -8102.2915 8254.4619 -8102.2065 8254.4619 c
-8102.1006 8254.4619 -8102.1006 8254.9473 -8102.1006 8255.0098 c
-8102.1006 8255.1152 -8102.0166 8255.1992 -8101.8896 8255.1992 c
-8101.8057 8255.1992 -8101.4678 8254.9678 -8101.4473 8254.9678 c
-8101.3623 8254.9678 -8101.3198 8255.4102 -8101.2568 8255.4102 c
-8101.1943 8255.4102 -8100.9199 8255.2832 -8100.8564 8255.2832 c
-8100.6455 8255.2832 -8100.6035 8255.3691 -8100.6035 8255.5371 c
-8100.6255 8255.6846 L
-8100.6255 8255.7266 -8100.6035 8255.7266 -8100.5835 8255.7266 c
-8100.4985 8255.7266 -8100.2241 8255.4521 -8100.1392 8255.4521 c
-8099.9287 8255.4521 -8097.8198 8257.5195 -8097.5454 8257.793 c
-8097.3984 8257.9609 -8097.3984 8258.2568 -8097.3984 8258.3838 c
-8097.3984 8259.248 -8097.3984 8259.332 -8097.2295 8259.416 c
-8096.5977 8259.6699 -8096.5127 8259.8174 -8095.7334 8261.1035 c
-8095.6479 8261.251 -8094.7407 8261.8633 -8094.5942 8261.8633 c
-8094.4878 8261.8633 -8094.1094 8261.6094 -8094.0239 8261.6094 c
-8093.9194 8261.6094 -8093.8135 8261.6729 -8093.8135 8261.8408 c
-8093.8135 8262.2842 -8094.3408 8262.791 -8094.9312 8262.791 c
-8095.7534 8262.791 -8096.0913 8262.0938 -8096.1338 8261.6953 c
-8096.1543 8261.5469 -8096.2393 8261.4619 -8096.3447 8261.4619 c
-8096.3862 8261.4619 -8096.4287 8261.4824 -8096.4702 8261.5469 c
-8096.9561 8262.3477 -8097.9473 8262.791 -8098.7065 8262.791 c
-8099.7393 8262.791 -8100.8774 8262.1582 -8101.3418 8261.8848 c
-8101.7842 8261.6318 -8102.4814 8261.4619 -8102.8809 8261.4619 c
-8103.3242 8261.4619 -8103.3662 8261.6094 -8103.3662 8261.8633 c
-8103.3662 8262.0107 -8102.9023 8262.4521 -8102.9023 8262.5801 c
-8102.9023 8262.7061 -8103.0498 8262.791 -8103.4082 8262.791 c
-8103.8936 8262.791 -8104.5679 8262.0732 -8104.5679 8261.2939 c
-8104.5679 8260.6816 -8103.7666 8260.1553 -8103.3022 8260.1553 c
-8102.3755 8260.1553 -8102.0942 8260.5137 -8101.5264 8260.9775 c
-8101.4414 8261.04 -8101.3774 8261.0625 -8101.3359 8261.0625 c
-8101.1895 8261.0625 -8101.1895 8259.9648 -8101.1895 8259.8398 c
-8101.1895 8259.6904 -8101.2729 8259.6279 -8101.3774 8259.6279 c
-8103.7822 8259.6279 -8108.6592 8258.4043 -8110.3672 8252.248 c
-8110.4297 8252.0361 -8110.5361 8251.9316 -8110.6406 8251.9316 c
-8110.7881 8251.9316 -8111.7793 8252.7744 -8111.7793 8254.3564 c
-8111.7793 8256.1904 -8110.5767 8257.1602 -8109.9873 8257.1602 c
-8109.8398 8257.1602 -8109.6494 8257.1396 -8109.6494 8256.9912 c
-8109.6494 8256.9287 -8109.6929 8256.8652 -8109.7759 8256.7598 c
-8110.1143 8256.4238 -8110.3672 8255.79 -8110.3672 8255.4736 c
-8110.3672 8255.2617 -8110.2607 8255.0938 -8110.1143 8255.0938 c
-8109.9033 8255.0938 -8109.5654 8256.043 -8109.46 8256.1904 c
-8109.3335 8256.4014 -8108.9546 8256.7813 -8108.2378 8257.3086 c
-8107.4995 8257.834 -8106.0654 8259.1426 -8106.0654 8260.4072 c
-8106.0654 8261.7793 -8107.1191 8262.6855 -8107.9209 8262.6855 c
-8108.7007 8262.6855 -8109.6714 8262.1582 -8110.0713 8261.6729 c
-8110.7041 8260.9355 -8111.3154 8260.3652 -8111.8218 8260.3652 c
-8112.1592 8260.3652 -8112.3066 8260.5762 -8112.3066 8260.7871 c
-8112.3066 8261.124 -8112.0537 8261.3564 -8111.5479 8261.3984 c
-8110.9575 8261.4414 -8110.8936 8261.8633 -8110.8936 8262.1992 c
-8110.8936 8262.4736 -8111.4209 8262.791 -8111.8433 8262.791 c
-8112.4751 8262.791 -8113.2974 8262.0938 -8113.2974 8260.2607 c
-8113.2974 8258.7627 -8112.0537 8258.2998 -8111.5679 8258.2998 c
-8111.1265 8258.2998 -8110.4722 8258.3838 -8110.0928 8258.7207 c
-8108.8066 8259.9238 -8108.1318 8260.1328 -8107.5835 8260.1328 c
-8107.3721 8260.1328 -8107.2881 8260.1328 -8107.2881 8260.2813 c
-8107.2881 8260.5977 -8108.0474 8260.7871 -8108.1318 8260.8086 c
-8108.3423 8260.8711 -8108.5103 8261.1035 -8108.5103 8261.3145 c
-8108.5103 8261.7998 -8108.2378 8261.8203 -8107.8774 8261.8203 c
-8107.5215 8261.8203 -8106.8042 8261.4619 -8106.8042 8260.2607 c
-8106.8042 8259.2695 -8107.9424 8258.1094 -8108.4058 8257.8779 c
-8108.7007 8257.708 -8109.5874 8257.7305 -8109.9458 8257.6875 c
-8110.6406 8257.6025 -8112.4121 8256.6553 -8112.4121 8254.166 c
-8112.4336 8252.7529 -8111.1265 8251.4258 -8110.8511 8251.2363 c
-8110.6826 8251.1289 -8110.5986 8251.0029 -8110.5986 8250.834 c
-8110.5986 8250.623 -8110.6626 8247.6924 -8110.9995 8247.6924 c
-8111.4424 8247.6924 -8111.5054 8247.6924 -8111.5054 8247.8838 c
-8111.21 8248.9785 -8111.21 8249.2109 v
-8111.21 8249.5273 -8111.4424 8251.0029 -8112.3066 8251.0029 c
-8112.5806 8251.0029 -8113.0449 8250.7705 -8113.0449 8250.4551 c
-8113.0449 8250.1602 -8112.3486 8248.958 -8112.3486 8248.6836 c
-8112.3486 8248.1982 -8112.3921 8248.1777 -8113.0654 8247.5664 c
-8113.2559 8247.4189 -8113.3193 8247.293 -8113.3193 8247.1016 c
-8113.3193 8246.9336 -8113.2134 8246.8057 -8113.0449 8246.8057 c
-8112.8975 8246.8057 -8112.3281 8247.082 -8112.2017 8247.1016 c
-8112.0752 8247.1016 -8111.8433 8247.123 -8111.6538 8247.123 c
-8111.2734 8247.123 -8111.0845 8246.9961 -8111.0845 8246.8701 c
-8111.0845 8246.6377 -8111.0845 8245.9639 -8111.9263 8244.5078 c
-8112.1167 8244.1709 -8113.2974 8242.8428 -8113.2974 8242.5049 c
-8113.2974 8242.3359 -8113.2134 8242.3164 -8113.1089 8242.3164 c
-8112.9185 8242.3164 -8112.4966 8242.7373 -8112.3706 8242.8848 c
-8111.1265 8244.2129 -8110.3042 8245.6465 -8109.9238 8246.9121 c
-8109.8398 8247.2285 -8109.7344 8247.1445 -8109.5654 8247.166 c
-8107.4155 8247.6719 -8105.3271 8250.1807 -8105.3271 8250.2021 c
-8105.4326 8250.4756 -8105.4326 8250.5391 v
-8105.4326 8250.666 -8105.3271 8250.6875 -8105.3057 8250.6875 c
-8105.2432 8250.6875 -8105.0527 8250.4756 -8105.0103 8250.4756 c
-8104.9058 8250.4756 -8104.7783 8250.5605 -8104.7783 8250.708 C
-8104.8418 8251.2559 l
f
0 D
-8108.1104 8249.7598 m
-8107.5215 8249.7598 -8107.0986 8249.8652 -8106.6982 8250.1387 c
-8106.6553 8250.1602 -8106.6138 8250.1807 -8106.5928 8250.1807 c
-8106.5498 8250.1807 -8106.5498 8250.1602 -8106.5498 8250.1172 c
-8106.5498 8249.6963 -8108.4272 8247.7363 -8109.5654 8247.7363 c
-8109.6289 8247.7363 -8109.6714 8247.7773 -8109.6714 8247.8398 c
-8109.6714 8248.0303 -8109.5874 8250.0332 -8109.2495 8250.0332 c
-8109.1865 8250.0332 -8109.1016 8250.0117 -8109.0386 8249.9707 c
-8108.7007 8249.8223 -8108.4902 8249.7598 -8108.1104 8249.7598 c
f
-8107.5835 8252.5215 m
-8107.5835 8252.0996 -8107.5625 8251.6357 -8106.8662 8251.6357 c
-8106.2334 8251.6357 -8105.6431 8252.29 -8105.4961 8252.4375 c
-8105.4326 8252.4795 -8105.3906 8252.5 -8105.3486 8252.5 c
-8105.3271 8252.5 -8105.2847 8252.458 -8105.2847 8252.416 c
-8105.2847 8251.9727 -8106.6553 8250.3076 -8108.0049 8250.3076 c
-8108.2578 8250.3076 -8109.2705 8250.4756 -8109.2705 8251.0244 c
-8109.2705 8251.2773 -8108.8906 8252.6484 -8108.2793 8253.7236 c
-8106.9087 8256.2119 -8102.7119 8257.7705 -8100.8145 8257.7705 c
-8099.9072 8257.793 -8099.6118 8257.4766 -8099.4863 8257.4551 c
-8099.4648 8257.4551 -8099.4438 8257.4346 -8099.4233 8257.4346 c
-8099.3174 8257.4346 -8099.1904 8257.498 -8099.1904 8257.6455 c
-8099.1904 8257.667 -8099.2119 8257.667 v
-8099.3594 8258.8047 -8099.4014 8259.2061 -8099.4014 8260.4697 c
-8099.4014 8261.8633 -8099.4014 8261.9893 -8098.4321 8261.9893 c
-8097.1455 8261.9893 -8096.8506 8260.9141 -8096.8506 8260.6816 c
-8096.8506 8260.2607 -8097.4399 8259.9648 -8097.5889 8259.9648 c
-8097.7358 8259.9648 -8097.9058 8260.0723 -8097.9058 8260.2607 c
-8097.9058 8260.5557 -8097.9473 8260.7031 -8098.2207 8260.7031 c
-8098.4951 8260.7031 -8098.4951 8260.3447 -8098.4951 8260.2383 c
-8098.4951 8259.9863 -8098.3896 8259.7334 -8098.1782 8259.6064 c
-8097.7998 8259.3535 -8097.7998 8258.9531 -8097.7998 8258.7422 c
-8097.7998 8258.6367 -8097.7998 8258.5098 -8097.8198 8258.4043 c
-8097.8418 8258.2363 -8099.7817 8256.1904 -8100.0977 8256.1904 c
-8100.2446 8256.1904 -8100.5615 8256.3369 -8101.4258 8256.3369 c
-8103.5767 8256.3369 -8104.5474 8254.6094 -8104.7378 8254.082 c
-8104.9897 8253.3652 -8105.7915 8253.0693 -8106.0225 8253.0693 c
-8106.2129 8253.0693 -8106.2129 8253.1123 -8106.2129 8253.5127 c
-8106.2129 8253.5977 -8106.4238 8253.9336 y
-8106.4238 8254.124 -8105.3906 8254.377 -8105.3906 8254.5664 c
-8105.3906 8254.7363 -8105.5801 8254.7559 -8105.7271 8254.7559 c
-8105.8115 8254.7559 -8106.8882 8254.7559 -8107.3306 8253.9336 c
-8107.5415 8253.5332 -8107.5835 8252.9648 -8107.5835 8252.5215 c
f
1 D
-8103.4927 8250.2656 m
-8103.4927 8250.2217 -8103.5137 8250.2021 -8103.5352 8250.2021 c
-8103.5986 8250.2021 -8103.7666 8250.5391 -8103.8506 8250.5391 c
-8103.9146 8250.5391 -8103.9995 8250.4551 -8104.0415 8250.3486 c
-8104.0615 8250.2656 -8104.1255 8249.8008 -8104.21 8249.8008 c
-8104.2524 8249.8008 -8104.4209 8250.0332 -8104.4634 8250.0332 c
-8104.6104 8250.0332 -8104.7158 8249.8008 -8104.7158 8249.5918 c
-8104.7158 8249.4854 -8104.7783 8249.4854 -8104.9263 8249.4854 c
-8105.5166 8249.4854 -8107.1406 8247.3135 -8107.5625 8245.5625 c
-8107.6055 8245.3945 -8107.5835 8245.2471 -8107.8994 8245.1406 c
-8110.0713 8244.4043 -8112.5176 8242.252 -8112.5176 8242.126 c
-8112.5176 8241.9785 -8112.4336 8241.8945 -8112.3066 8241.8945 c
-8112.2432 8241.8945 -8112.1592 8241.8945 -8111.6538 8242.2305 c
-8110.7681 8242.8213 -8108.7217 8244.1084 -8107.8994 8244.1084 c
-8107.6265 8244.1084 -8107.6055 8243.75 -8107.6055 8243.4961 c
-8107.6055 8243.3057 -8107.6265 8243.0742 -8107.6265 8242.9277 c
-8107.6465 8242.6533 -8107.9634 8242.3359 -8107.9634 8242.168 c
-8107.9634 8242.0205 -8107.8154 8241.915 -8107.6465 8241.915 c
-8107.4575 8241.915 -8107.3306 8241.9365 -8107.1606 8242.126 c
-8106.8662 8242.4629 -8106.7402 8242.6113 -8106.4238 8242.6113 c
-8106.1914 8242.6113 -8105.1377 8241.8945 -8104.8838 8241.8945 c
-8104.5679 8241.8945 -8104.1895 8242.3789 -8104.1895 8242.6748 c
-8104.1895 8243.4121 -8105.0942 8244.0029 -8105.6431 8244.0029 c
-8106.0225 8244.0029 -8106.4438 8243.877 -8106.6353 8243.6445 c
-8106.6982 8243.5801 -8106.7607 8243.5391 -8106.8242 8243.5391 c
-8106.9937 8243.5391 -8107.1191 8244.0029 -8107.1191 8244.0449 c
-8107.1191 8244.4678 -8104.2729 8244.5293 -8103.9146 8244.5293 c
-8103.7666 8244.5293 -8103.6401 8244.4453 -8103.5352 8244.2764 c
-8103.3447 8243.9824 -8102.1855 8242.7598 -8100.6255 8242.7598 c
-8098.79 8242.7598 -8097.0825 8244.0225 -8097.0825 8245.9209 c
-8097.0825 8246.0273 -8097.1245 8246.5742 -8097.1245 8246.5967 c
-8097.1245 8246.6602 -8096.0063 8248.4092 -8094.6782 8248.4092 c
-8093.6245 8248.4092 -8093.2656 8247.8203 -8093.2656 8247.334 c
-8093.2656 8247.1016 -8093.3711 8246.4492 -8093.8984 8246.4492 c
-8094.1094 8246.4492 -8094.2144 8246.6602 -8094.2144 8247.0391 c
-8094.2144 8247.123 -8094.0039 8247.5029 -8094.0039 8247.6084 c
-8094.0039 8247.6504 -8094.0239 8247.6719 -8094.0879 8247.6719 c
-8094.4258 8247.6719 -8094.9521 8247.3135 -8095.1846 8246.6602 c
-8095.4595 8245.9434 -8095.8594 8245.2471 -8096.1958 8244.8457 c
-8096.5127 8244.4883 -8096.6182 8243.8965 -8096.6182 8243.5596 c
-8096.6182 8243.0742 -8096.1338 8241.915 -8094.4878 8241.915 c
-8093.2871 8241.915 -8092.4434 8242.6533 -8092.4434 8243.2646 c
-8092.4434 8243.877 -8092.7598 8244.2559 -8093.2026 8244.2559 c
-8093.6455 8244.2559 -8093.9824 8243.918 -8093.9824 8243.5801 c
-8093.9824 8242.9063 -8094.1514 8242.7598 -8094.4878 8242.7598 c
-8094.6992 8242.7598 -8094.8896 8242.8848 -8094.8896 8243.2012 c
-8094.8896 8243.4336 -8094.8896 8243.8125 -8093.3711 8245.0781 c
-8092.8857 8245.4785 -8092.4214 8246.1758 -8092.4214 8246.9551 c
-8092.4214 8247.7148 -8093.4561 8248.915 -8094.6362 8248.915 c
-8095.8594 8248.915 -8096.6401 8248.1357 -8097.2515 8247.4189 c
-8097.5454 8247.082 -8098.9814 8245.3945 -8099.0439 8245.3721 c
-8099.2334 8245.2246 -8099.3174 8245.0996 -8099.3174 8244.9727 c
-8099.3174 8244.8672 -8099.2119 8244.7617 -8099.0854 8244.7617 c
-8098.8535 8244.7617 -8097.9058 8245.7109 -8097.8198 8245.7109 c
-8097.7568 8245.7109 -8097.7153 8245.6465 -8097.7153 8245.5625 c
-8097.7153 8244.8037 -8098.8535 8243.3281 -8100.6255 8243.3281 c
-8102.1006 8243.3281 -8102.9863 8244.4453 -8102.9863 8244.4883 c
-8102.9863 8244.6143 -8102.8394 8244.7393 -8102.5225 8244.8037 c
-8098.6426 8245.542 -8095.3955 8249.0918 -8095.3955 8253.708 c
-8095.3955 8253.8145 -8095.2256 8253.8408 -8095.0786 8253.8408 c
-8094.7202 8253.8408 -8094.0879 8253.9199 -8094.0879 8253.6465 c
-8094.0879 8253.54 -8094.1294 8253.4141 -8094.1934 8253.2871 c
-8094.5518 8252.7168 -8094.8682 8252.543 -8094.8682 8251.5918 c
-8094.8682 8251.1289 -8094.4878 8250.6025 -8093.8984 8250.6025 c
-8092.8657 8250.6025 -8092.4214 8251.6357 -8092.4214 8251.8672 c
-8092.4214 8252.0361 -8092.5073 8252.0996 -8092.5903 8252.0996 c
-8092.7178 8252.0996 -8093.2241 8251.5723 -8093.3711 8251.5723 c
-8093.5615 8251.5723 -8093.7085 8251.6143 -8093.7085 8252.0996 c
-8093.7085 8252.4375 -8092.4214 8256.1484 -8092.4214 8256.9492 c
-8092.4214 8257.5195 -8092.7598 8258.2158 -8093.6455 8258.7207 c
-8093.6875 8258.7422 -8093.7085 8258.7627 -8093.7085 8258.8047 c
-8093.7085 8258.8887 -8093.5615 8258.9951 -8093.4126 8259.0361 c
-8092.8018 8259.2061 -8092.4214 8259.3115 -8092.4214 8260.2607 c
-8092.4214 8260.6191 -8092.7598 8261.2939 -8093.0127 8261.2939 c
-8093.2026 8261.2939 -8093.2026 8261.251 -8093.2026 8260.8926 c
-8093.2026 8260.7451 -8093.2446 8260.6396 -8093.3926 8260.5342 c
-8093.7085 8260.3232 -8093.7295 8260.2813 -8093.8135 8259.7969 c
-8093.8774 8259.4805 -8094.0039 8259.3945 -8095.1426 8258.7627 c
-8095.5854 8258.4893 -8095.6904 8258.2568 -8095.7744 8258.0254 c
-8095.8594 8257.834 -8095.9233 8257.834 -8096.4287 8257.834 c
-8096.9561 8257.834 -8099.5073 8255.1152 -8099.5073 8254.9883 c
-8099.5073 8254.9258 -8099.3809 8254.6299 -8099.3809 8254.5664 c
-8099.3809 8254.5039 -8099.4014 8254.4619 -8099.4438 8254.4619 c
-8099.4863 8254.4619 -8099.6338 8254.6719 -8099.6758 8254.6719 c
-8099.7817 8254.6719 -8099.7817 8254.4824 -8099.7817 8254.334 c
-8099.7817 8254.2305 -8099.5703 8253.6602 -8099.5703 8253.5127 c
-8099.5703 8253.4287 -8099.5918 8253.3652 -8099.6338 8253.3652 c
-8099.7178 8253.3652 -8099.9072 8253.8281 -8099.9922 8253.8281 c
-8100.0342 8253.8281 -8100.0762 8253.7871 -8100.0762 8253.6602 c
-8100.0762 8253.5127 -8099.8862 8252.7959 y
-8099.8862 8252.7324 -8099.9072 8252.627 -8099.9502 8252.627 c
-8100.0342 8252.627 -8100.1826 8253.0273 -8100.2666 8253.0273 c
-8100.3286 8253.0273 -8100.3926 8252.9434 -8100.3926 8252.7959 c
-8100.3926 8252.7109 -8100.2446 8252.29 -8100.2446 8252.1846 c
-8100.2446 8252.1211 -8100.2666 8252.0566 -8100.3086 8252.0566 c
-8100.3506 8252.0566 -8100.5835 8252.6699 -8100.7095 8252.6699 c
-8100.7935 8252.6699 -8100.8994 8252.5625 -8100.8994 8252.458 c
-8100.8994 8252.374 -8100.7729 8252.0156 -8100.7729 8251.9316 c
-8100.7729 8251.8887 -8100.7729 8251.8672 -8100.7935 8251.8672 c
-8100.8774 8251.8672 -8101.0254 8252.3525 -8101.1104 8252.3525 c
-8101.3418 8252.3525 -8101.3623 8251.9316 -8101.3623 8251.7412 c
-8101.3623 8251.6572 -8101.2998 8251.3203 -8101.2998 8251.2559 c
-8101.2998 8251.1934 -8101.3198 8251.1719 -8101.3418 8251.1719 c
-8101.4897 8251.1719 -8101.6782 8251.9727 -8101.8271 8251.9727 c
-8102.0386 8251.9727 -8102.0386 8251.7832 -8102.0386 8251.5518 c
-8102.0166 8251.0244 L
-8102.0166 8251.0029 -8102.0386 8250.9824 y
-8102.0586 8250.9824 -8102.1006 8251.0029 -8102.1226 8251.0664 c
-8102.1855 8251.2773 -8102.3115 8251.6992 -8102.5225 8251.6992 c
-8102.6694 8251.6992 -8102.8174 8251.5303 -8102.8174 8251.3838 c
-8102.8174 8251.1504 -8102.7119 8250.7705 -8102.7119 8250.5391 c
-8102.7119 8250.4756 -8102.7334 8250.4551 -8102.7754 8250.4551 c
-8102.8608 8250.4551 -8102.9863 8250.8965 -8103.0278 8250.9824 c
-8103.0918 8251.0664 -8103.1553 8251.0879 -8103.2192 8251.0879 c
-8103.5352 8251.0879 -8103.5352 8250.7705 -8103.5352 8250.623 C
-8103.4927 8250.2656 l
f
0 D
-8104.8633 8245.9004 m
-8104.8633 8245.668 -8106.8042 8245.4785 -8106.8662 8245.4785 c
-8106.9722 8245.4785 -8107.0352 8245.542 -8107.0352 8245.6465 c
-8107.0352 8246.5117 -8105.2847 8248.7471 -8104.8633 8248.7471 c
-8104.7998 8248.7471 -8104.7783 8248.7266 -8104.7783 8248.6631 c
-8105.2002 8247.4189 -8105.2002 8247.166 v
-8105.2002 8246.7861 -8105.0942 8246.5332 -8104.9058 8246.1113 c
-8104.8838 8246.0273 -8104.8633 8245.9639 -8104.8633 8245.9004 c
f
-8096.1338 8257.3496 m
-8095.9858 8257.3496 -8095.4795 8256.8447 -8095.3325 8256.8447 c
-8095.2065 8256.8447 -8095.0791 8256.9287 -8095.0791 8257.0762 c
-8095.0791 8257.1602 -8095.2695 8257.6025 -8095.2695 8257.708 c
-8095.2695 8258.0664 -8094.8896 8258.3633 -8094.5098 8258.3633 c
-8094.1094 8258.3633 -8092.9702 8258.0459 -8092.9702 8256.8223 c
-8092.9702 8255.7266 -8093.3926 8255.7266 -8095.0366 8255.7266 c
-8095.3955 8255.7266 -8097.0615 8255.916 -8097.3145 8255.916 c
-8097.4399 8255.916 -8097.4834 8255.7471 -8097.4834 8255.6201 c
-8097.4834 8255.5791 -8097.4834 8255.5371 -8097.4614 8255.5156 c
-8097.3984 8255.1367 -8097.1675 8254.5879 -8097.1675 8254.208 c
-8097.1675 8249.7598 -8101.2998 8245.9004 -8103.7666 8245.9004 c
-8104.4209 8245.9004 -8104.6519 8246.7021 -8104.6519 8247.123 c
-8104.6519 8248.8525 -8102.6694 8249.8848 -8102.4175 8249.8848 c
-8102.3545 8249.8848 -8102.3335 8249.8652 -8102.3335 8249.8223 c
-8102.3335 8249.7803 -8102.3545 8249.7383 -8102.3975 8249.6963 c
-8102.5225 8249.5273 -8103.0498 8248.915 -8103.0498 8248.2832 c
-8103.0498 8247.9453 -8102.7554 8247.5029 -8101.9951 8247.5029 c
-8100.7305 8247.5029 -8100.1826 8248.8525 -8100.1826 8249.2109 c
-8100.1826 8249.3594 -8100.2446 8249.5693 -8100.4561 8249.5693 c
-8100.6035 8249.5693 -8101.0049 8248.915 -8101.1519 8248.915 c
-8101.2158 8248.915 -8101.4473 8249.042 -8101.5103 8249.042 c
-8101.5942 8249.042 -8101.6582 8249.0215 -8101.7422 8249.0215 c
-8101.8057 8249.0215 -8101.8481 8249.084 -8101.8481 8249.1895 c
-8101.8481 8249.5488 -8101.3623 8250.1172 -8100.8774 8250.3711 c
-8099.9722 8250.834 -8098.6226 8252.1631 -8098.6226 8253.6182 c
-8098.6226 8254.0391 -8098.6846 8254.4404 -8098.6846 8254.7773 c
-8098.6846 8255.3262 -8097.7568 8256.1904 -8096.8081 8257.0762 c
-8096.6401 8257.2236 -8096.3862 8257.3496 -8096.1338 8257.3496 c
f
*U
U
%AI8_EndBrushPattern
%AI8_BeginBrushPattern
(Unnamed Brush Pat 57)0 A
u
1 Ap
0 J 0 j 1 w 4 M []0 d0 XR
-8087.9722 8267.0703 m
-8087.9722 8241.043 L
-8114 8241.043 L
-8114 8267.0703 L
-8087.9722 8267.0703 L
n
0 Ap
0 R
0.597742 0.537865 0.64184 0.350469 K
0.375 w-8096.6455 8254.0596 m
-8087.9736 8254.0596 l
S
-8100.9839 8267.0703 m
-8100.9839 8258.3945 l
S
0.64 0.650477 0.701045 0.510735 K
1.125 w-8096.7202 8249.7207 m
-8087.9727 8249.7207 l
S
-8105.3232 8267.0703 m
-8105.3232 8257.7158 l
S
0.7084 0.636438 0.515526 0.381872 K
-8096.6504 8267.0703 m
-8096.6504 8264.6572 l
-8093.9937 8264.4336 -8092.3096 8262.7305 v
-8090.6064 8261.0039 -8090.3774 8258.3984 y
-8087.9727 8258.3984 l
S
*u
0 O
0.7084 0.636438 0.515526 0.381872 k
1 w-8104.7783 8250.708 m
-8104.7783 8250.5605 -8104.9058 8250.4756 -8105.0103 8250.4756 c
-8105.0527 8250.4756 -8105.2432 8250.6875 -8105.3057 8250.6875 c
-8105.3271 8250.6875 -8105.4326 8250.666 -8105.4326 8250.5391 c
-8105.4326 8250.4756 -8105.3271 8250.2021 y
-8105.3271 8250.1807 -8107.4155 8247.6719 -8109.5654 8247.166 c
-8109.7344 8247.1445 -8109.8398 8247.2285 -8109.9238 8246.9121 c
-8110.3042 8245.6465 -8111.1265 8244.2129 -8112.3706 8242.8848 c
-8112.4966 8242.7383 -8112.9185 8242.3164 -8113.1089 8242.3164 c
-8113.2134 8242.3164 -8113.2974 8242.3359 -8113.2974 8242.5049 c
-8113.2974 8242.8428 -8112.1167 8244.1709 -8111.9263 8244.5078 c
-8111.0845 8245.9639 -8111.0845 8246.6377 -8111.0845 8246.8701 c
-8111.0845 8246.9961 -8111.2734 8247.123 -8111.6538 8247.123 c
-8111.8433 8247.123 -8112.0752 8247.1016 -8112.2017 8247.1016 c
-8112.3281 8247.082 -8112.8975 8246.8057 -8113.0449 8246.8057 c
-8113.2134 8246.8057 -8113.3193 8246.9336 -8113.3193 8247.1016 c
-8113.3193 8247.293 -8113.2559 8247.4189 -8113.0654 8247.5664 c
-8112.3921 8248.1777 -8112.3486 8248.1982 -8112.3486 8248.6836 c
-8112.3486 8248.958 -8113.0449 8250.1602 -8113.0449 8250.4551 c
-8113.0449 8250.7705 -8112.5806 8251.0029 -8112.3066 8251.0029 c
-8111.4424 8251.0029 -8111.21 8249.5273 -8111.21 8249.2109 c
-8111.21 8248.9785 -8111.5054 8247.8838 y
-8111.5054 8247.6924 -8111.4424 8247.6924 -8110.9995 8247.6924 c
-8110.6626 8247.6924 -8110.5986 8250.623 -8110.5986 8250.834 c
-8110.5986 8251.0029 -8110.6826 8251.1289 -8110.8511 8251.2363 c
-8111.1265 8251.4258 -8112.4336 8252.7529 -8112.4121 8254.166 c
-8112.4121 8256.6553 -8110.6406 8257.6025 -8109.9458 8257.6875 c
-8109.5874 8257.7305 -8108.7007 8257.708 -8108.4058 8257.8779 c
-8107.9424 8258.1094 -8106.8042 8259.2695 -8106.8042 8260.2607 c
-8106.8042 8261.4619 -8107.5215 8261.8203 -8107.8774 8261.8203 c
-8108.2378 8261.8203 -8108.5103 8261.7998 -8108.5103 8261.3145 c
-8108.5103 8261.1035 -8108.3423 8260.8711 -8108.1318 8260.8086 c
-8108.0474 8260.7871 -8107.2881 8260.5977 -8107.2881 8260.2813 c
-8107.2881 8260.1328 -8107.3721 8260.1328 -8107.5835 8260.1328 c
-8108.1318 8260.1328 -8108.8066 8259.9238 -8110.0928 8258.7207 c
-8110.4722 8258.3838 -8111.1265 8258.2998 -8111.5679 8258.2998 c
-8112.0537 8258.2998 -8113.2974 8258.7627 -8113.2974 8260.2607 c
-8113.2974 8262.0938 -8112.4751 8262.791 -8111.8433 8262.791 c
-8111.4209 8262.791 -8110.8936 8262.4736 -8110.8936 8262.1992 c
-8110.8936 8261.8633 -8110.9575 8261.4414 -8111.5479 8261.3984 c
-8112.0537 8261.3564 -8112.3066 8261.124 -8112.3066 8260.7871 c
-8112.3066 8260.5762 -8112.1592 8260.3652 -8111.8218 8260.3652 c
-8111.3154 8260.3652 -8110.7041 8260.9355 -8110.0713 8261.6729 c
-8109.6714 8262.1582 -8108.7007 8262.6855 -8107.9209 8262.6855 c
-8107.1191 8262.6855 -8106.0654 8261.7793 -8106.0654 8260.4072 c
-8106.0654 8259.1426 -8107.4995 8257.834 -8108.2378 8257.3086 c
-8108.9546 8256.7813 -8109.3335 8256.4014 -8109.46 8256.1904 c
-8109.5654 8256.043 -8109.9033 8255.0938 -8110.1143 8255.0938 c
-8110.2607 8255.0938 -8110.3672 8255.2617 -8110.3672 8255.4736 c
-8110.3672 8255.79 -8110.1143 8256.4238 -8109.7759 8256.7598 c
-8109.6929 8256.8652 -8109.6494 8256.9287 -8109.6494 8256.9912 c
-8109.6494 8257.1396 -8109.8398 8257.1602 -8109.9873 8257.1602 c
-8110.5767 8257.1602 -8111.7793 8256.1904 -8111.7793 8254.3564 c
-8111.7793 8252.7744 -8110.7881 8251.9316 -8110.6406 8251.9316 c
-8110.5361 8251.9316 -8110.4297 8252.0361 -8110.3672 8252.248 c
-8108.6592 8258.4043 -8103.7822 8259.6279 -8101.3774 8259.6279 c
-8101.2729 8259.6279 -8101.1895 8259.6904 -8101.1895 8259.8398 c
-8101.1895 8259.9648 -8101.1895 8261.0625 -8101.3359 8261.0625 c
-8101.3774 8261.0625 -8101.4414 8261.04 -8101.5264 8260.9775 c
-8102.0942 8260.5137 -8102.3755 8260.1553 -8103.3022 8260.1553 c
-8103.7666 8260.1553 -8104.5679 8260.6816 -8104.5679 8261.2939 c
-8104.5679 8262.0732 -8103.8936 8262.791 -8103.4082 8262.791 c
-8103.0498 8262.791 -8102.9023 8262.7061 -8102.9023 8262.5801 c
-8102.9023 8262.4521 -8103.3662 8262.0107 -8103.3662 8261.8633 c
-8103.3662 8261.6094 -8103.3242 8261.4619 -8102.8809 8261.4619 c
-8102.4814 8261.4619 -8101.7842 8261.6318 -8101.3418 8261.8848 c
-8100.8774 8262.1582 -8099.7393 8262.791 -8098.7065 8262.791 c
-8097.9473 8262.791 -8096.9561 8262.3477 -8096.4702 8261.5469 c
-8096.4287 8261.4824 -8096.3862 8261.4619 -8096.3447 8261.4619 c
-8096.2393 8261.4619 -8096.1543 8261.5469 -8096.1338 8261.6953 c
-8096.0913 8262.0938 -8095.7534 8262.791 -8094.9312 8262.791 c
-8094.3408 8262.791 -8093.8135 8262.2842 -8093.8135 8261.8408 c
-8093.8135 8261.6729 -8093.9194 8261.6094 -8094.0239 8261.6094 c
-8094.1094 8261.6094 -8094.4878 8261.8633 -8094.5942 8261.8633 c
-8094.7407 8261.8633 -8095.6479 8261.251 -8095.7334 8261.1035 c
-8096.5127 8259.8174 -8096.5977 8259.6699 -8097.2295 8259.416 c
-8097.3984 8259.332 -8097.3984 8259.248 -8097.3984 8258.3838 c
-8097.3984 8258.2568 -8097.3984 8257.9609 -8097.5454 8257.793 c
-8097.8198 8257.5195 -8099.9287 8255.4521 -8100.1392 8255.4521 c
-8100.2241 8255.4521 -8100.4985 8255.7266 -8100.5835 8255.7266 c
-8100.6035 8255.7266 -8100.6255 8255.7266 -8100.6255 8255.6846 C
-8100.6035 8255.5371 l
-8100.6035 8255.3691 -8100.6455 8255.2832 -8100.8564 8255.2832 c
-8100.9199 8255.2832 -8101.1943 8255.4102 -8101.2568 8255.4102 c
-8101.3198 8255.4102 -8101.3623 8254.9678 -8101.4473 8254.9678 c
-8101.4678 8254.9678 -8101.8057 8255.1992 -8101.8896 8255.1992 c
-8102.0166 8255.1992 -8102.1006 8255.1152 -8102.1006 8255.0098 c
-8102.1006 8254.9473 -8102.1006 8254.4619 -8102.2065 8254.4619 c
-8102.2915 8254.4619 -8102.5225 8254.7559 -8102.5654 8254.7559 c
-8102.5854 8254.7559 -8102.5854 8254.7363 -8102.5854 8254.6719 C
-8102.5439 8254.251 l
-8102.5439 8254.1865 -8102.5854 8254.166 -8102.6494 8254.166 c
-8102.7119 8254.166 -8102.9658 8254.4824 -8103.0498 8254.4824 c
-8103.0918 8254.4824 -8103.1138 8254.4404 -8103.1138 8254.3564 c
-8103.1138 8254.3145 -8102.9233 8253.5977 -8102.9233 8253.4492 c
-8102.9233 8253.3652 -8102.9658 8253.3223 -8103.0078 8253.3223 c
-8103.0918 8253.3223 -8103.4297 8253.6816 -8103.4722 8253.6816 c
-8103.4927 8253.6816 -8103.4927 8253.6816 -8103.4927 8253.6602 c
-8103.4927 8253.5762 -8103.3882 8253.2168 -8103.3882 8253.1973 c
-8103.3882 8253.1758 -8103.4082 8253.1543 -8103.4297 8253.1543 c
-8103.4722 8253.1543 -8103.6826 8253.3652 -8103.7446 8253.3652 c
-8103.7666 8253.3652 -8103.7666 8253.3652 -8103.7666 8253.3223 c
-8103.7666 8253.1543 -8103.5137 8252.416 -8103.5137 8252.3525 c
-8103.5137 8252.3311 -8103.5352 8252.3105 -8103.5562 8252.3105 c
-8103.6826 8252.3105 -8104.1055 8252.8809 -8104.1465 8252.8809 c
-8104.1675 8252.8809 -8104.1675 8252.8594 -8104.1675 8252.7959 c
-8104.1675 8252.6055 -8103.8936 8251.6992 y
-8103.8936 8251.6777 -8103.9146 8251.6572 -8103.9351 8251.6572 c
-8104.0615 8251.6572 -8104.4414 8252.2041 -8104.5049 8252.2041 c
-8104.5264 8252.2041 -8104.5264 8252.2041 -8104.5264 8252.1631 c
-8104.2729 8251.2559 -8104.2729 8251.1719 v
-8104.2729 8251.0664 -8104.3154 8251.0244 -8104.3994 8251.0244 c
-8104.4634 8251.0244 -8104.6943 8251.3613 -8104.7783 8251.3613 c
-8104.8218 8251.3613 -8104.8418 8251.3203 -8104.8418 8251.2559 c
-8104.7783 8250.708 L
f
1 D
-8109.0386 8249.9707 m
-8109.1016 8250.0117 -8109.1865 8250.0332 -8109.2495 8250.0332 c
-8109.5874 8250.0332 -8109.6714 8248.0303 -8109.6714 8247.8398 c
-8109.6714 8247.7773 -8109.6289 8247.7363 -8109.5654 8247.7363 c
-8108.4272 8247.7363 -8106.5498 8249.6973 -8106.5498 8250.1172 c
-8106.5498 8250.1602 -8106.5498 8250.1807 -8106.5928 8250.1807 c
-8106.6138 8250.1807 -8106.6553 8250.1602 -8106.6982 8250.1387 c
-8107.0986 8249.8652 -8107.5215 8249.7598 -8108.1104 8249.7598 c
-8108.4902 8249.7598 -8108.7007 8249.8223 -8109.0386 8249.9707 c
f
-8107.3306 8253.9336 m
-8106.8882 8254.7559 -8105.8115 8254.7559 -8105.7271 8254.7559 c
-8105.5801 8254.7559 -8105.3906 8254.7363 -8105.3906 8254.5664 c
-8105.3906 8254.377 -8106.4238 8254.124 -8106.4238 8253.9336 c
-8106.2129 8253.5977 -8106.2129 8253.5127 v
-8106.2129 8253.1133 -8106.2129 8253.0703 -8106.0225 8253.0703 c
-8105.7915 8253.0703 -8104.9897 8253.3652 -8104.7378 8254.082 c
-8104.5474 8254.6094 -8103.5767 8256.3369 -8101.4258 8256.3369 c
-8100.5615 8256.3369 -8100.2446 8256.1904 -8100.0977 8256.1904 c
-8099.7817 8256.1904 -8097.8418 8258.2363 -8097.8198 8258.4043 c
-8097.7998 8258.5098 -8097.7998 8258.6367 -8097.7998 8258.7422 c
-8097.7998 8258.9531 -8097.7998 8259.3535 -8098.1782 8259.6064 c
-8098.3896 8259.7334 -8098.4951 8259.9863 -8098.4951 8260.2383 c
-8098.4951 8260.3447 -8098.4951 8260.7031 -8098.2207 8260.7031 c
-8097.9473 8260.7031 -8097.9058 8260.5557 -8097.9058 8260.2607 c
-8097.9058 8260.0723 -8097.7358 8259.9648 -8097.5889 8259.9648 c
-8097.4399 8259.9648 -8096.8506 8260.2607 -8096.8506 8260.6816 c
-8096.8506 8260.9141 -8097.1455 8261.9893 -8098.4321 8261.9893 c
-8099.4014 8261.9893 -8099.4014 8261.8633 -8099.4014 8260.4697 c
-8099.4014 8259.2061 -8099.3594 8258.8047 -8099.2119 8257.667 c
-8099.1904 8257.667 -8099.1904 8257.6455 y
-8099.1904 8257.498 -8099.3174 8257.4346 -8099.4233 8257.4346 c
-8099.4438 8257.4346 -8099.4648 8257.4551 -8099.4863 8257.4551 c
-8099.6118 8257.4766 -8099.9072 8257.793 -8100.8145 8257.7705 c
-8102.7119 8257.7705 -8106.9087 8256.2119 -8108.2793 8253.7236 c
-8108.8906 8252.6484 -8109.2705 8251.2773 -8109.2705 8251.0244 c
-8109.2705 8250.4756 -8108.2578 8250.3076 -8108.0049 8250.3076 c
-8106.6553 8250.3076 -8105.2847 8251.9727 -8105.2847 8252.416 c
-8105.2847 8252.458 -8105.3271 8252.5 -8105.3486 8252.5 c
-8105.3906 8252.5 -8105.4326 8252.4795 -8105.4961 8252.4375 c
-8105.6431 8252.29 -8106.2334 8251.6357 -8106.8662 8251.6357 c
-8107.5625 8251.6357 -8107.5835 8252.0996 -8107.5835 8252.5215 c
-8107.5835 8252.9648 -8107.5415 8253.5332 -8107.3306 8253.9336 c
f
0 D
-8103.5352 8250.623 m
-8103.5352 8250.7705 -8103.5352 8251.0879 -8103.2192 8251.0879 c
-8103.1553 8251.0879 -8103.0918 8251.0664 -8103.0278 8250.9824 c
-8102.9863 8250.8965 -8102.8608 8250.4551 -8102.7754 8250.4551 c
-8102.7334 8250.4551 -8102.7119 8250.4756 -8102.7119 8250.5391 c
-8102.7119 8250.7705 -8102.8174 8251.1504 -8102.8174 8251.3838 c
-8102.8174 8251.5303 -8102.6694 8251.6992 -8102.5225 8251.6992 c
-8102.3115 8251.6992 -8102.1855 8251.2773 -8102.1226 8251.0664 c
-8102.1006 8251.0029 -8102.0586 8250.9824 -8102.0386 8250.9824 c
-8102.0166 8251.0029 -8102.0166 8251.0244 V
-8102.0386 8251.5518 l
-8102.0386 8251.7832 -8102.0386 8251.9727 -8101.8271 8251.9727 c
-8101.6782 8251.9727 -8101.4897 8251.1719 -8101.3418 8251.1719 c
-8101.3198 8251.1719 -8101.2998 8251.1934 -8101.2998 8251.2559 c
-8101.2998 8251.3203 -8101.3623 8251.6572 -8101.3623 8251.7412 c
-8101.3623 8251.9316 -8101.3418 8252.3525 -8101.1104 8252.3525 c
-8101.0254 8252.3525 -8100.8774 8251.8672 -8100.7935 8251.8672 c
-8100.7729 8251.8672 -8100.7729 8251.8887 -8100.7729 8251.9316 c
-8100.7729 8252.0156 -8100.8994 8252.374 -8100.8994 8252.458 c
-8100.8994 8252.5625 -8100.7935 8252.6699 -8100.7095 8252.6699 c
-8100.5835 8252.6699 -8100.3506 8252.0566 -8100.3086 8252.0566 c
-8100.2666 8252.0566 -8100.2446 8252.1211 -8100.2446 8252.1846 c
-8100.2446 8252.29 -8100.3926 8252.7109 -8100.3926 8252.7959 c
-8100.3926 8252.9434 -8100.3286 8253.0273 -8100.2666 8253.0273 c
-8100.1826 8253.0273 -8100.0342 8252.627 -8099.9502 8252.627 c
-8099.9072 8252.627 -8099.8862 8252.7324 -8099.8862 8252.7959 c
-8100.0762 8253.5127 -8100.0762 8253.6602 v
-8100.0762 8253.7871 -8100.0342 8253.8281 -8099.9922 8253.8281 c
-8099.9072 8253.8281 -8099.7178 8253.3652 -8099.6338 8253.3652 c
-8099.5918 8253.3652 -8099.5703 8253.4287 -8099.5703 8253.5127 c
-8099.5703 8253.6602 -8099.7817 8254.2305 -8099.7817 8254.334 c
-8099.7817 8254.4824 -8099.7817 8254.6719 -8099.6758 8254.6719 c
-8099.6338 8254.6719 -8099.4863 8254.4619 -8099.4438 8254.4619 c
-8099.4014 8254.4619 -8099.3809 8254.5039 -8099.3809 8254.5664 c
-8099.3809 8254.6299 -8099.5073 8254.9258 -8099.5073 8254.9883 c
-8099.5073 8255.1152 -8096.9561 8257.834 -8096.4287 8257.834 c
-8095.9233 8257.834 -8095.8594 8257.834 -8095.7744 8258.0254 c
-8095.6904 8258.2568 -8095.5854 8258.4893 -8095.1426 8258.7627 c
-8094.0039 8259.3945 -8093.8774 8259.4805 -8093.8135 8259.7969 c
-8093.7295 8260.2813 -8093.7085 8260.3232 -8093.3926 8260.5342 c
-8093.2446 8260.6396 -8093.2026 8260.7451 -8093.2026 8260.8926 c
-8093.2026 8261.251 -8093.2026 8261.2939 -8093.0127 8261.2939 c
-8092.7598 8261.2939 -8092.4214 8260.6191 -8092.4214 8260.2607 c
-8092.4214 8259.3115 -8092.8018 8259.2061 -8093.4126 8259.0361 c
-8093.5615 8258.9951 -8093.7085 8258.8887 -8093.7085 8258.8047 c
-8093.7085 8258.7627 -8093.6875 8258.7422 -8093.6455 8258.7207 c
-8092.7598 8258.2158 -8092.4214 8257.5195 -8092.4214 8256.9492 c
-8092.4214 8256.1484 -8093.7085 8252.4375 -8093.7085 8252.0996 c
-8093.7085 8251.6143 -8093.5615 8251.5723 -8093.3711 8251.5723 c
-8093.2241 8251.5723 -8092.7178 8252.0996 -8092.5903 8252.0996 c
-8092.5073 8252.0996 -8092.4214 8252.0361 -8092.4214 8251.8672 c
-8092.4214 8251.6357 -8092.8657 8250.6025 -8093.8984 8250.6025 c
-8094.4878 8250.6025 -8094.8682 8251.1289 -8094.8682 8251.5918 c
-8094.8682 8252.543 -8094.5518 8252.7168 -8094.1934 8253.2871 c
-8094.1294 8253.4141 -8094.0879 8253.54 -8094.0879 8253.6465 c
-8094.0879 8253.9199 -8094.7202 8253.8408 -8095.0786 8253.8408 c
-8095.2256 8253.8408 -8095.3955 8253.8145 -8095.3955 8253.708 c
-8095.3955 8249.0918 -8098.6426 8245.542 -8102.5225 8244.8037 c
-8102.8394 8244.7393 -8102.9863 8244.6143 -8102.9863 8244.4883 c
-8102.9863 8244.4453 -8102.1006 8243.3281 -8100.6255 8243.3281 c
-8098.8535 8243.3281 -8097.7153 8244.8037 -8097.7153 8245.5625 c
-8097.7153 8245.6465 -8097.7568 8245.7109 -8097.8198 8245.7109 c
-8097.9058 8245.7109 -8098.8535 8244.7617 -8099.0854 8244.7617 c
-8099.2119 8244.7617 -8099.3174 8244.8672 -8099.3174 8244.9727 c
-8099.3174 8245.0996 -8099.2334 8245.2246 -8099.0439 8245.3721 c
-8098.9814 8245.3945 -8097.5454 8247.082 -8097.2515 8247.4189 c
-8096.6401 8248.1357 -8095.8594 8248.915 -8094.6362 8248.915 c
-8093.4561 8248.915 -8092.4214 8247.7148 -8092.4214 8246.9551 c
-8092.4214 8246.1758 -8092.8857 8245.4785 -8093.3711 8245.0781 c
-8094.8896 8243.8125 -8094.8896 8243.4336 -8094.8896 8243.2012 c
-8094.8896 8242.8848 -8094.6992 8242.7598 -8094.4878 8242.7598 c
-8094.1514 8242.7598 -8093.9824 8242.9063 -8093.9824 8243.5801 c
-8093.9824 8243.918 -8093.6455 8244.2559 -8093.2026 8244.2559 c
-8092.7598 8244.2559 -8092.4434 8243.877 -8092.4434 8243.2646 c
-8092.4434 8242.6543 -8093.2871 8241.915 -8094.4878 8241.915 c
-8096.1338 8241.915 -8096.6182 8243.0742 -8096.6182 8243.5596 c
-8096.6182 8243.8965 -8096.5127 8244.4883 -8096.1958 8244.8457 c
-8095.8594 8245.2471 -8095.4595 8245.9434 -8095.1846 8246.6602 c
-8094.9521 8247.3135 -8094.4258 8247.6719 -8094.0879 8247.6719 c
-8094.0239 8247.6719 -8094.0039 8247.6504 -8094.0039 8247.6084 c
-8094.0039 8247.5029 -8094.2144 8247.123 -8094.2144 8247.0391 c
-8094.2144 8246.6602 -8094.1094 8246.4492 -8093.8984 8246.4492 c
-8093.3711 8246.4492 -8093.2656 8247.1016 -8093.2656 8247.334 c
-8093.2656 8247.8203 -8093.6245 8248.4092 -8094.6782 8248.4092 c
-8096.0063 8248.4092 -8097.1245 8246.6602 -8097.1245 8246.5967 c
-8097.1245 8246.5742 -8097.0825 8246.0273 -8097.0825 8245.9209 c
-8097.0825 8244.0225 -8098.79 8242.7598 -8100.6255 8242.7598 c
-8102.1855 8242.7598 -8103.3447 8243.9824 -8103.5352 8244.2764 c
-8103.6401 8244.4453 -8103.7666 8244.5293 -8103.9146 8244.5293 c
-8104.2729 8244.5293 -8107.1191 8244.4678 -8107.1191 8244.0449 c
-8107.1191 8244.0029 -8106.9937 8243.5391 -8106.8242 8243.5391 c
-8106.7607 8243.5391 -8106.6982 8243.5801 -8106.6353 8243.6445 c
-8106.4438 8243.877 -8106.0225 8244.0029 -8105.6431 8244.0029 c
-8105.0942 8244.0029 -8104.1895 8243.4121 -8104.1895 8242.6748 c
-8104.1895 8242.3789 -8104.5679 8241.8945 -8104.8838 8241.8945 c
-8105.1377 8241.8945 -8106.1914 8242.6113 -8106.4238 8242.6113 c
-8106.7402 8242.6113 -8106.8662 8242.4629 -8107.1606 8242.126 c
-8107.3306 8241.9365 -8107.4575 8241.915 -8107.6465 8241.915 c
-8107.8154 8241.915 -8107.9634 8242.0205 -8107.9634 8242.168 c
-8107.9634 8242.3359 -8107.6465 8242.6543 -8107.6265 8242.9277 c
-8107.6265 8243.0742 -8107.6055 8243.3057 -8107.6055 8243.4961 c
-8107.6055 8243.75 -8107.6265 8244.1084 -8107.8994 8244.1084 c
-8108.7217 8244.1084 -8110.7681 8242.8223 -8111.6538 8242.2305 c
-8112.1592 8241.8945 -8112.2432 8241.8945 -8112.3066 8241.8945 c
-8112.4336 8241.8945 -8112.5176 8241.9785 -8112.5176 8242.126 c
-8112.5176 8242.252 -8110.0713 8244.4043 -8107.8994 8245.1406 c
-8107.5835 8245.2471 -8107.6055 8245.3945 -8107.5625 8245.5625 c
-8107.1406 8247.3135 -8105.5166 8249.4863 -8104.9263 8249.4863 c
-8104.7783 8249.4863 -8104.7158 8249.4863 -8104.7158 8249.5918 c
-8104.7158 8249.8008 -8104.6104 8250.0332 -8104.4634 8250.0332 c
-8104.4209 8250.0332 -8104.2524 8249.8008 -8104.21 8249.8008 c
-8104.1255 8249.8008 -8104.0615 8250.2656 -8104.0415 8250.3486 c
-8103.9995 8250.4551 -8103.9146 8250.5391 -8103.8506 8250.5391 c
-8103.7666 8250.5391 -8103.5986 8250.2021 -8103.5352 8250.2021 c
-8103.5137 8250.2021 -8103.4927 8250.2217 -8103.4927 8250.2656 c
-8103.5352 8250.623 L
f
1 D
-8104.9058 8246.1113 m
-8105.0942 8246.5332 -8105.2002 8246.7861 -8105.2002 8247.166 c
-8105.2002 8247.4189 -8104.7783 8248.6631 y
-8104.7783 8248.7266 -8104.7998 8248.7471 -8104.8633 8248.7471 c
-8105.2847 8248.7471 -8107.0352 8246.5117 -8107.0352 8245.6465 c
-8107.0352 8245.542 -8106.9722 8245.4785 -8106.8662 8245.4785 c
-8106.8042 8245.4785 -8104.8633 8245.668 -8104.8633 8245.9004 c
-8104.8633 8245.9639 -8104.8838 8246.0273 -8104.9058 8246.1113 c
f
-8096.8081 8257.0762 m
-8097.7568 8256.1904 -8098.6846 8255.3262 -8098.6846 8254.7773 c
-8098.6846 8254.4404 -8098.6226 8254.0391 -8098.6226 8253.6182 c
-8098.6226 8252.1631 -8099.9722 8250.834 -8100.8774 8250.3711 c
-8101.3623 8250.1172 -8101.8481 8249.5488 -8101.8481 8249.1895 c
-8101.8481 8249.084 -8101.8057 8249.0215 -8101.7422 8249.0215 c
-8101.6582 8249.0215 -8101.5942 8249.042 -8101.5103 8249.042 c
-8101.4473 8249.042 -8101.2158 8248.915 -8101.1519 8248.915 c
-8101.0049 8248.915 -8100.6035 8249.5703 -8100.4561 8249.5703 c
-8100.2446 8249.5703 -8100.1826 8249.3594 -8100.1826 8249.2109 c
-8100.1826 8248.8525 -8100.7305 8247.5029 -8101.9951 8247.5029 c
-8102.7554 8247.5029 -8103.0498 8247.9453 -8103.0498 8248.2832 c
-8103.0498 8248.915 -8102.5225 8249.5273 -8102.3975 8249.6973 c
-8102.3545 8249.7383 -8102.3335 8249.7803 -8102.3335 8249.8223 c
-8102.3335 8249.8652 -8102.3545 8249.8848 -8102.4175 8249.8848 c
-8102.6694 8249.8848 -8104.6519 8248.8525 -8104.6519 8247.123 c
-8104.6519 8246.7021 -8104.4209 8245.9004 -8103.7666 8245.9004 c
-8101.2998 8245.9004 -8097.1675 8249.7598 -8097.1675 8254.208 c
-8097.1675 8254.5879 -8097.3984 8255.1367 -8097.4614 8255.5156 c
-8097.4834 8255.5371 -8097.4834 8255.5791 -8097.4834 8255.6201 c
-8097.4834 8255.7471 -8097.4399 8255.916 -8097.3145 8255.916 c
-8097.0615 8255.916 -8095.3955 8255.7266 -8095.0366 8255.7266 c
-8093.3926 8255.7266 -8092.9702 8255.7266 -8092.9702 8256.8223 c
-8092.9702 8258.0459 -8094.1094 8258.3633 -8094.5098 8258.3633 c
-8094.8896 8258.3633 -8095.2695 8258.0664 -8095.2695 8257.708 c
-8095.2695 8257.6025 -8095.0791 8257.1602 -8095.0791 8257.0762 c
-8095.0791 8256.9287 -8095.2065 8256.8447 -8095.3325 8256.8447 c
-8095.4795 8256.8447 -8095.9858 8257.3496 -8096.1338 8257.3496 c
-8096.3862 8257.3496 -8096.6401 8257.2236 -8096.8081 8257.0762 c
f
*U
U
%AI8_EndBrushPattern
%AI5_End_NonPrinting--
%AI5_Begin_NonPrinting
Np
%AI8_BeginPluginObject
(Adobe Brush Manager Order)
(Adobe Brush Manager Order)
( Adobe Calligraphic Brush Tool/ 2 pt \221\310\211~/ Adobe Calligraphic ) -
(Brush Tool/ 5 pt \221\310\211~/ Adobe Calligraphic Brush Tool/ 5 pt \203t\203) -
(\211\203b\203g/ Adobe Calligraphic Brush Tool/ 3 pt \203\211\203E\203\223\203h/ Adobe Cal) -
(ligraphic Brush Tool/ 7 pt \203\211\203E\203\223\203h/ Adobe Calligraphic Brush ) -
(Tool/ 15 pt\203\211\203E\203\223\203h/ Adobe ArtOnPath Brush Tool/ \226\330\222Y\211\346/ Adobe) -
( ArtOnPath Brush Tool/ \220\374 \(\220\346\215\327\)/ Adobe ArtOnPath Brush Tool/ ) -
(\203t\203\215\201[\203\211\203\213\203X\203|\201[\203N/ Adobe PatternOnPath Brush Tool/ \220\324\202\242\226\356\210\363\203u) -
(\203\211\203V / Adobe PatternOnPath Brush Tool/ \203S\203V\203b\203N/) .
%AI8_EndPluginObject
%AI5_End_NonPrinting--
%AI5_Begin_NonPrinting
Np
%AI8_BeginPluginObject
(Adobe Calligraphic Brush Tool)
(15 pt\603\611\603E\603\623\603h)
(1 15 15 100 100 15 15 0 0 0 0) .
%AI8_EndPluginObject
%AI8_BeginPluginObject
(Adobe Calligraphic Brush Tool)
(2 pt \621\710\611~)
(1 2 2 26 74 15 15 0 1 0 0) .
%AI8_EndPluginObject
%AI8_BeginPluginObject
(Adobe Calligraphic Brush Tool)
(3 pt \603\611\603E\603\623\603h)
(1 3 3 100 100 0 0 0 0 0 0) .
%AI8_EndPluginObject
%AI8_BeginPluginObject
(Adobe Calligraphic Brush Tool)
(5 pt \603t\603\611\603b\603g)
(1 5 5 0 0 90 90 0 0 0 0) .
%AI8_EndPluginObject
%AI8_BeginPluginObject
(Adobe Calligraphic Brush Tool)
(5 pt \621\710\611~)
(1 5 5 10 90 -65 35 0 1 1 0) .
%AI8_EndPluginObject
%AI8_BeginPluginObject
(Adobe Calligraphic Brush Tool)
(7 pt \603\611\603E\603\623\603h)
(1 7 7 100 100 0 0 0 0 0 0) .
%AI8_EndPluginObject
%AI5_End_NonPrinting--
%AI5_Begin_NonPrinting
Np
%AI8_BeginPluginObject
(Adobe ArtOnPath Brush Tool)
(\603t\603\615\601[\603\611\603\613\603X\603|\601[\603N)
(1 / Unnamed Brush Pat 12/ / / / / 0 1 /  1 1 1 0 1 0 0 1) .
%AI8_EndPluginObject
%AI8_BeginPluginObject
(Adobe ArtOnPath Brush Tool)
(\626\730\622Y\611\746)
(1 / Unnamed Brush Pat 4/ / / / / 0 1 /  1 1 1.2 0 1 0 0 0) .
%AI8_EndPluginObject
%AI8_BeginPluginObject
(Adobe ArtOnPath Brush Tool)
(\620\774 \(\620\746\615\727\))
(1 / Unnamed 20/ / / / / 0 1 /  1 1 1 0 1 0 0 0) .
%AI8_EndPluginObject
%AI5_End_NonPrinting--
%AI5_Begin_NonPrinting
Np
%AI8_BeginPluginObject
(Adobe PatternOnPath Brush Tool)
(\603S\603V\603b\603N)
(1 / Unnamed Brush Pat 55/ Unnamed Brush Pat 57/ Unnamed Brush ) -
(Pat 56/ / / 5 0.717647 0.556863 0.176471 /  1 0 1 0 1 0 0 0) .
%AI8_EndPluginObject
%AI8_BeginPluginObject
(Adobe PatternOnPath Brush Tool)
(\620\724\602\642\626\756\610\763\603u\603\611\603V )
(1 / Unnamed Brush Pat 158/ Unnamed Brush Pat 160/ Unnamed Brus) -
(h Pat 160/ Unnamed Brush Pat 162/ Unnamed Brush Pat 161/ 5 0.0) -
(196078 0.027451 0.0313726 /  1 0 1 0 1 0 0 0) .
%AI8_EndPluginObject
%AI5_End_NonPrinting--
%AI5_BeginPalette
0 0 Pb
1 1 1 1 ([\603\614\603W\603X\603g\603\614\601[\603V\603\607\603\623]) 0 Xs
([\603\614\603W\603X\603g\603\614\601[\603V\603\607\603\623])
Pc
0 0 0 0 k
(\603z\603\617\603C\603g)
Pc
0 0 0 1 k
(\603u\603\611\603b\603N)
Pc
0 1 1 0 k
(CMYK \603\614\603b\603h)
Pc
0 0 1 0 k
(CMYK \603C\603G\603\615\601[)
Pc
1 0 1 0 k
(CMYK \603O\603\612\601[\603\623)
Pc
1 0 0 0 k
(CMYK \603V\603A\603\623)
Pc
1 1 0 0 k
(CMYK \603u\603\613\601[)
Pc
0 1 0 0 k
(CMYK \603}\603[\603\623\603^)
Pc
0.15 1 0.9 0.1 k
(C=15 M=100 Y=90 K=10)
Pc
0 0.9 0.85 0 k
(C=0 M=90 Y=85 K=0)
Pc
0 0.8 0.95 0 k
(C=0 M=80 Y=95 K=0)
Pc
0 0.5 1 0 k
(C=0 M=50 Y=100 K=0)
Pc
0 0.35 0.85 0 k
(C=0 M=35 Y=85 K=0)
Pc
0.05 0 0.9 0 k
(C=5 M=0 Y=90 K=0)
Pc
0.2 0 1 0 k
(C=20 M=0 Y=100 K=0)
Pc
0.5 0 1 0 k
(C=50 M=0 Y=100 K=0)
Pc
0.75 0 1 0 k
(C=75 M=0 Y=100 K=0)
Pc
0.85 0.1 1 0.1 k
(C=85 M=10 Y=100 K=10)
Pc
0.9 0.3 0.95 0.3 k
(C=90 M=30 Y=95 K=30)
Pc
0.75 0 0.75 0 k
(C=75 M=0 Y=75 K=0)
Pc
0.8 0.1 0.45 0 k
(C=80 M=10 Y=45 K=0)
Pc
0.7 0.15 0 0 k
(C=70 M=15 Y=0 K=0)
Pc
0.85 0.5 0 0 k
(C=85 M=50 Y=0 K=0)
Pc
1 0.95 0.05 0 k
(C=100 M=95 Y=5 K=0)
Pc
1 1 0.25 0.25 k
(C=100 M=100 Y=25 K=25)
Pc
0.75 1 0 0 k
(C=75 M=100 Y=0 K=0)
Pc
0.5 1 0 0 k
(C=50 M=100 Y=0 K=0)
Pc
0.35 1 0.35 0.1 k
(C=35 M=100 Y=35 K=10)
Pc
0.1 1 0.5 0 k
(C=10 M=100 Y=50 K=0)
Pc
0 0.95 0.2 0 k
(C=0 M=95 Y=20 K=0)
Pc
0.25 0.25 0.4 0 k
(C=25 M=25 Y=40 K=0)
Pc
0.4 0.45 0.5 0.05 k
(C=40 M=45 Y=50 K=5)
Pc
0.5 0.5 0.6 0.25 k
(C=50 M=50 Y=60 K=25)
Pc
0.55 0.6 0.65 0.4 k
(C=55 M=60 Y=65 K=40)
Pc
0.25 0.4 0.65 0 k
(C=25 M=40 Y=65 K=0)
Pc
0.3 0.5 0.75 0.1 k
(C=30 M=50 Y=75 K=10)
Pc
0.35 0.6 0.8 0.25 k
(C=35 M=60 Y=80 K=25)
Pc
0.4 0.65 0.9 0.35 k
(C=40 M=65 Y=90 K=35)
Pc
0.4 0.7 1 0.5 k
(C=40 M=70 Y=100 K=50)
Pc
0.5 0.7 0.8 0.7 k
(C=50 M=70 Y=80 K=70)
Pc
Bb
2 (\620\774\617\763\603O\603\611\603f\601[\603V\603\607\603\623) 0 0 0 1 1 0 0 1 0 0 Bg
0 BB
(\620\774\617\763\603O\603\611\603f\601[\603V\603\607\603\623)
Pc
Bb
2 (\603u\603\611\603b\603N\602\711\603t\603F\601[\603h) 0 0 0 1 1 0 0 1 0 0 Bg
0 BB
(\603u\603\611\603b\603N\602\711\603t\603F\601[\603h)
Pc
Bb
0 0 0 0 Bh
2 (\625\772\616\713\617\763\603O\603\611\603f\601[\603V\603\607\603\623) 0 0 0 1 1 0 0 1 0 0 Bg
0 BB
(\625\772\616\713\617\763\603O\603\611\603f\601[\603V\603\607\603\623)
Pc
Bb
0 0 0 0 Bh
2 (\603\\\603t\603g\603u\603\611\603b\603N\603r\603l\603b\603g) 0 0 0 1 1 0 0 1 0 0 Bg
0 BB
(\603\\\603t\603g\603u\603\611\603b\603N\603r\603l\603b\603g)
Pc
Bb
2 (\615\673\624\631\602\714\623\772\625\751\602\752) 0 0 0 1 1 0 0 1 0 0 Bg
0 BB
(\615\673\624\631\602\714\623\772\625\751\602\752)
Pc
Bb
0 0 0 0 Bh
2 (\623\672 \(\625\772\616\713\617\763\)) 0 0 0 1 1 0 0 1 0 0 Bg
0 BB
(\623\672 \(\625\772\616\713\617\763\))
Pc
(\613\633\614`\603p\603^\601[\603\623) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] p
(\613\633\614`\603p\603^\601[\603\623)
Pc
0 0 0 1 k
(C=0 M=0 Y=0 K=100)
Pc
0 0 0 0.899994 k
(C=0 M=0 Y=0 K=90)
Pc
0 0 0 0.799988 k
(C=0 M=0 Y=0 K=80)
Pc
0 0 0 0.699997 k
(C=0 M=0 Y=0 K=70)
Pc
0 0 0 0.599991 k
(C=0 M=0 Y=0 K=60)
Pc
0 0 0 0.5 k
(C=0 M=0 Y=0 K=50)
Pc
0 0 0 0.399994 k
(C=0 M=0 Y=0 K=40)
Pc
0 0 0 0.299988 k
(C=0 M=0 Y=0 K=30)
Pc
0 0 0 0.199997 k
(C=0 M=0 Y=0 K=20)
Pc
0 0 0 0.099991 k
(C=0 M=0 Y=0 K=10)
Pc
0 0 0 0.049988 k
(C=0 M=0 Y=0 K=5)
Pc
0 1 1 0 k
(C=0 M=100 Y=100 K=0)
Pc
0 0.75 1 0 k
(C=0 M=75 Y=100 K=0)
Pc
0 0.1 0.95 0 k
(C=0 M=10 Y=95 K=0)
Pc
0.85 0.1 1 0 k
(C=85 M=10 Y=100 K=0)
Pc
1 0.9 0 0 k
(C=100 M=90 Y=0 K=0)
Pc
0.6 0.9 0.000031 0.000031 k
(C=60 M=90 Y=0 K=0)
Pc
PB
%AI5_EndPalette
%%EndSetup
%AI5_BeginLayer
1 1 1 1 0 0 1 -1 31 113 250 0 50 Lb
(\203f\203U\203C\203\223) Ln
0 A
LB
%AI5_EndLayer--
%AI5_BeginLayer
1 1 0 1 0 0 1 6 79 255 255 0 50 Lb
(44mm\227p\203K\203C\203h) Ln
1 A
u
0 A
1 Ap
0 D
0 R
0 0 0 1 K
0 J 0 j 1 w 4 M []0 d0 XR
151.3701 76.5352 m
151.3701 35.2051 117.8652 1.7002 76.5352 1.7002 c
35.2051 1.7002 1.7002 35.2051 1.7002 76.5352 c
1.7002 117.8652 35.2051 151.3701 76.5352 151.3701 c
117.8652 151.3701 151.3701 117.8652 151.3701 76.5352 c
(s) *
U
1 A
u
0 A
138.8975 76.5352 m
138.8975 42.0928 110.9775 14.1729 76.5352 14.1729 c
42.0938 14.1729 14.1729 42.0928 14.1729 76.5352 c
14.1729 110.9766 42.0938 138.8975 76.5352 138.8975 c
110.9775 138.8975 138.8975 110.9766 138.8975 76.5352 c
(s) *
U
LB
%AI5_EndLayer--
%AI5_BeginLayer
0 1 0 1 0 0 0 7 128 128 128 0 50 Lb
(\215\355\217\234\213\326\216~\203\214\203C\203\204\201[) Ln
1 A
u
0 A
0 Ap
0 R
0 0 0 1 K
0 J 0 j 2.55118 w 4 M []0 d0 XR
5.75195 76.5537 m
2.06738 76.5146 L
S
76.4551 5.83203 m
76.4971 2.14746 L
S
/BBAccumRotation (0.011045) XT
3.40158 w76.5107 150.9785 m
76.5107 146.7266 L
S
u
1 Ap
2.55118 w151.3691 76.5352 m
151.3691 35.2041 117.8662 1.69922 76.5352 1.69922 c
35.2051 1.69922 1.7002 35.2041 1.7002 76.5352 c
1.7002 117.8652 35.2051 151.3691 76.5352 151.3691 c
117.8662 151.3691 151.3691 117.8652 151.3691 76.5352 c
s
U
u
0 0 0 0 K
0.850394 w151.3701 76.5352 m
151.3701 35.2051 117.8652 1.70117 76.5352 1.70117 c
35.2061 1.70117 1.70117 35.2051 1.70117 76.5352 c
1.70117 117.8662 35.2061 151.3711 76.5352 151.3711 c
117.8652 151.3711 151.3701 117.8662 151.3701 76.5352 c
s
U
0 Ap
1 G
0.850394 w76.5107 150.9893 m
76.5107 147.5869 L
S
1 Ap
0 O
1 g
0 0 0 1 K
75.6328 148.7637 m
75.6328 147.8242 74.8711 147.0615 73.9297 147.0615 c
72.9932 147.0615 72.2314 147.8242 72.2314 148.7637 c
72.2314 149.7012 72.9932 150.4629 73.9297 150.4629 c
74.8711 150.4629 75.6328 149.7012 75.6328 148.7637 c
b
80.8691 148.7637 m
80.8691 147.8242 80.1074 147.0615 79.166 147.0615 c
78.2246 147.0615 77.4678 147.8242 77.4678 148.7637 c
77.4678 149.7012 78.2246 150.4629 79.166 150.4629 c
80.1074 150.4629 80.8691 149.7012 80.8691 148.7637 c
b
0 Ap
0 0 0 0 k
0.708661 w148.0498 77.8105 m
150.2197 76.5576 L
148.0498 75.3057 L
148.0498 77.8105 L
b
1 G
0.850394 w76.5127 4.94141 m
76.5439 2.10645 L
S
/BBAccumRotation (0.011045) XT
4.9209 76.5488 m
2.08691 76.5186 L
S
U
LB
%AI5_EndLayer--
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI5 /terminate get exec
Adobe_shading_AI8 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_pattern_AI5 /terminate get exec
AGM_Gradient /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF
